
Car_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003dc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00003dc8  00003e5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  00800168  00800168  00003f64  2**0
                  ALLOC
  3 .stab         000038ac  00000000  00000000  00003f64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c35  00000000  00000000  00007810  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  00009445  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000278  00000000  00000000  00009665  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002a72  00000000  00000000  000098dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000177d  00000000  00000000  0000c34f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000015b6  00000000  00000000  0000dacc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  0000f084  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000361  00000000  00000000  0000f2c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000df4  00000000  00000000  0000f625  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010419  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 9b 15 	jmp	0x2b36	; 0x2b36 <__vector_5>
      18:	0c 94 25 16 	jmp	0x2c4a	; 0x2c4a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a4 3a       	cpi	r26, 0xA4	; 164
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 ec       	ldi	r30, 0xC8	; 200
      78:	fd e3       	ldi	r31, 0x3D	; 61
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <main>
      8a:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 1c 03 	call	0x638	; 0x638 <__subsf3>
     1bc:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__floatundisf>:
     1e8:	a2 e0       	ldi	r26, 0x02	; 2
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__prologue_saves__>
     1f4:	12 2f       	mov	r17, r18
     1f6:	b3 2e       	mov	r11, r19
     1f8:	a4 2e       	mov	r10, r20
     1fa:	95 2e       	mov	r9, r21
     1fc:	86 2e       	mov	r8, r22
     1fe:	37 2e       	mov	r3, r23
     200:	28 2e       	mov	r2, r24
     202:	9a 83       	std	Y+2, r25	; 0x02
     204:	c2 2e       	mov	r12, r18
     206:	d3 2e       	mov	r13, r19
     208:	e4 2e       	mov	r14, r20
     20a:	f5 2e       	mov	r15, r21
     20c:	a7 01       	movw	r20, r14
     20e:	96 01       	movw	r18, r12
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	21 17       	cp	r18, r17
     21a:	a1 f4       	brne	.+40     	; 0x244 <__floatundisf+0x5c>
     21c:	3b 15       	cp	r19, r11
     21e:	91 f4       	brne	.+36     	; 0x244 <__floatundisf+0x5c>
     220:	4a 15       	cp	r20, r10
     222:	81 f4       	brne	.+32     	; 0x244 <__floatundisf+0x5c>
     224:	59 15       	cp	r21, r9
     226:	71 f4       	brne	.+28     	; 0x244 <__floatundisf+0x5c>
     228:	68 15       	cp	r22, r8
     22a:	61 f4       	brne	.+24     	; 0x244 <__floatundisf+0x5c>
     22c:	73 15       	cp	r23, r3
     22e:	51 f4       	brne	.+20     	; 0x244 <__floatundisf+0x5c>
     230:	82 15       	cp	r24, r2
     232:	41 f4       	brne	.+16     	; 0x244 <__floatundisf+0x5c>
     234:	aa 81       	ldd	r26, Y+2	; 0x02
     236:	9a 17       	cp	r25, r26
     238:	29 f4       	brne	.+10     	; 0x244 <__floatundisf+0x5c>
     23a:	c7 01       	movw	r24, r14
     23c:	b6 01       	movw	r22, r12
     23e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
     242:	aa c0       	rjmp	.+340    	; 0x398 <__floatundisf+0x1b0>
     244:	21 2f       	mov	r18, r17
     246:	3b 2d       	mov	r19, r11
     248:	4a 2d       	mov	r20, r10
     24a:	59 2d       	mov	r21, r9
     24c:	68 2d       	mov	r22, r8
     24e:	73 2d       	mov	r23, r3
     250:	82 2d       	mov	r24, r2
     252:	9a 81       	ldd	r25, Y+2	; 0x02
     254:	00 e2       	ldi	r16, 0x20	; 32
     256:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__lshrdi3>
     25a:	c9 01       	movw	r24, r18
     25c:	da 01       	movw	r26, r20
     25e:	80 30       	cpi	r24, 0x00	; 0
     260:	e0 e0       	ldi	r30, 0x00	; 0
     262:	9e 07       	cpc	r25, r30
     264:	e1 e0       	ldi	r30, 0x01	; 1
     266:	ae 07       	cpc	r26, r30
     268:	e0 e0       	ldi	r30, 0x00	; 0
     26a:	be 07       	cpc	r27, r30
     26c:	80 f4       	brcc	.+32     	; 0x28e <__floatundisf+0xa6>
     26e:	8f 3f       	cpi	r24, 0xFF	; 255
     270:	91 05       	cpc	r25, r1
     272:	a1 05       	cpc	r26, r1
     274:	b1 05       	cpc	r27, r1
     276:	31 f0       	breq	.+12     	; 0x284 <__floatundisf+0x9c>
     278:	28 f0       	brcs	.+10     	; 0x284 <__floatundisf+0x9c>
     27a:	28 e0       	ldi	r18, 0x08	; 8
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	40 e0       	ldi	r20, 0x00	; 0
     280:	50 e0       	ldi	r21, 0x00	; 0
     282:	16 c0       	rjmp	.+44     	; 0x2b0 <__floatundisf+0xc8>
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	11 c0       	rjmp	.+34     	; 0x2b0 <__floatundisf+0xc8>
     28e:	80 30       	cpi	r24, 0x00	; 0
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	9f 07       	cpc	r25, r31
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	af 07       	cpc	r26, r31
     298:	f1 e0       	ldi	r31, 0x01	; 1
     29a:	bf 07       	cpc	r27, r31
     29c:	28 f0       	brcs	.+10     	; 0x2a8 <__floatundisf+0xc0>
     29e:	28 e1       	ldi	r18, 0x18	; 24
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <__floatundisf+0xc8>
     2a8:	20 e1       	ldi	r18, 0x10	; 16
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	02 2e       	mov	r0, r18
     2b2:	04 c0       	rjmp	.+8      	; 0x2bc <__floatundisf+0xd4>
     2b4:	b6 95       	lsr	r27
     2b6:	a7 95       	ror	r26
     2b8:	97 95       	ror	r25
     2ba:	87 95       	ror	r24
     2bc:	0a 94       	dec	r0
     2be:	d2 f7       	brpl	.-12     	; 0x2b4 <__floatundisf+0xcc>
     2c0:	fc 01       	movw	r30, r24
     2c2:	e8 59       	subi	r30, 0x98	; 152
     2c4:	ff 4f       	sbci	r31, 0xFF	; 255
     2c6:	80 81       	ld	r24, Z
     2c8:	29 01       	movw	r4, r18
     2ca:	3a 01       	movw	r6, r20
     2cc:	48 0e       	add	r4, r24
     2ce:	51 1c       	adc	r5, r1
     2d0:	61 1c       	adc	r6, r1
     2d2:	71 1c       	adc	r7, r1
     2d4:	49 82       	std	Y+1, r4	; 0x01
     2d6:	21 2f       	mov	r18, r17
     2d8:	3b 2d       	mov	r19, r11
     2da:	4a 2d       	mov	r20, r10
     2dc:	59 2d       	mov	r21, r9
     2de:	68 2d       	mov	r22, r8
     2e0:	73 2d       	mov	r23, r3
     2e2:	82 2d       	mov	r24, r2
     2e4:	9a 81       	ldd	r25, Y+2	; 0x02
     2e6:	04 2d       	mov	r16, r4
     2e8:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__lshrdi3>
     2ec:	c9 01       	movw	r24, r18
     2ee:	da 01       	movw	r26, r20
     2f0:	4c 01       	movw	r8, r24
     2f2:	5d 01       	movw	r10, r26
     2f4:	80 e2       	ldi	r24, 0x20	; 32
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	84 19       	sub	r24, r4
     2fa:	95 09       	sbc	r25, r5
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <__floatundisf+0x11e>
     2fe:	cc 0c       	add	r12, r12
     300:	dd 1c       	adc	r13, r13
     302:	ee 1c       	adc	r14, r14
     304:	ff 1c       	adc	r15, r15
     306:	8a 95       	dec	r24
     308:	d2 f7       	brpl	.-12     	; 0x2fe <__floatundisf+0x116>
     30a:	c1 14       	cp	r12, r1
     30c:	d1 04       	cpc	r13, r1
     30e:	e1 04       	cpc	r14, r1
     310:	f1 04       	cpc	r15, r1
     312:	41 f0       	breq	.+16     	; 0x324 <__floatundisf+0x13c>
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e0       	ldi	r27, 0x00	; 0
     31c:	88 2a       	or	r8, r24
     31e:	99 2a       	or	r9, r25
     320:	aa 2a       	or	r10, r26
     322:	bb 2a       	or	r11, r27
     324:	90 e2       	ldi	r25, 0x20	; 32
     326:	49 16       	cp	r4, r25
     328:	51 04       	cpc	r5, r1
     32a:	61 04       	cpc	r6, r1
     32c:	71 04       	cpc	r7, r1
     32e:	59 f4       	brne	.+22     	; 0x346 <__floatundisf+0x15e>
     330:	0f 2e       	mov	r0, r31
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	ef 2e       	mov	r14, r31
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	ff 2e       	mov	r15, r31
     33a:	f0 e8       	ldi	r31, 0x80	; 128
     33c:	0f 2f       	mov	r16, r31
     33e:	ff e4       	ldi	r31, 0x4F	; 79
     340:	1f 2f       	mov	r17, r31
     342:	f0 2d       	mov	r31, r0
     344:	21 c0       	rjmp	.+66     	; 0x388 <__floatundisf+0x1a0>
     346:	af e1       	ldi	r26, 0x1F	; 31
     348:	4a 16       	cp	r4, r26
     34a:	51 04       	cpc	r5, r1
     34c:	61 04       	cpc	r6, r1
     34e:	71 04       	cpc	r7, r1
     350:	59 f4       	brne	.+22     	; 0x368 <__floatundisf+0x180>
     352:	0f 2e       	mov	r0, r31
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	ef 2e       	mov	r14, r31
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	ff 2e       	mov	r15, r31
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	0f 2f       	mov	r16, r31
     360:	ff e4       	ldi	r31, 0x4F	; 79
     362:	1f 2f       	mov	r17, r31
     364:	f0 2d       	mov	r31, r0
     366:	10 c0       	rjmp	.+32     	; 0x388 <__floatundisf+0x1a0>
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	09 80       	ldd	r0, Y+1	; 0x01
     372:	04 c0       	rjmp	.+8      	; 0x37c <__floatundisf+0x194>
     374:	66 0f       	add	r22, r22
     376:	77 1f       	adc	r23, r23
     378:	88 1f       	adc	r24, r24
     37a:	99 1f       	adc	r25, r25
     37c:	0a 94       	dec	r0
     37e:	d2 f7       	brpl	.-12     	; 0x374 <__floatundisf+0x18c>
     380:	0e 94 b0 05 	call	0xb60	; 0xb60 <__floatsisf>
     384:	7b 01       	movw	r14, r22
     386:	8c 01       	movw	r16, r24
     388:	c5 01       	movw	r24, r10
     38a:	b4 01       	movw	r22, r8
     38c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
     390:	a8 01       	movw	r20, r16
     392:	97 01       	movw	r18, r14
     394:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
     398:	22 96       	adiw	r28, 0x02	; 2
     39a:	e2 e1       	ldi	r30, 0x12	; 18
     39c:	0c 94 c7 1e 	jmp	0x3d8e	; 0x3d8e <__epilogue_restores__>

000003a0 <_fpadd_parts>:
     3a0:	a0 e0       	ldi	r26, 0x00	; 0
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	e6 ed       	ldi	r30, 0xD6	; 214
     3a6:	f1 e0       	ldi	r31, 0x01	; 1
     3a8:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__prologue_saves__>
     3ac:	dc 01       	movw	r26, r24
     3ae:	2b 01       	movw	r4, r22
     3b0:	fa 01       	movw	r30, r20
     3b2:	9c 91       	ld	r25, X
     3b4:	92 30       	cpi	r25, 0x02	; 2
     3b6:	08 f4       	brcc	.+2      	; 0x3ba <_fpadd_parts+0x1a>
     3b8:	39 c1       	rjmp	.+626    	; 0x62c <_fpadd_parts+0x28c>
     3ba:	eb 01       	movw	r28, r22
     3bc:	88 81       	ld	r24, Y
     3be:	82 30       	cpi	r24, 0x02	; 2
     3c0:	08 f4       	brcc	.+2      	; 0x3c4 <_fpadd_parts+0x24>
     3c2:	33 c1       	rjmp	.+614    	; 0x62a <_fpadd_parts+0x28a>
     3c4:	94 30       	cpi	r25, 0x04	; 4
     3c6:	69 f4       	brne	.+26     	; 0x3e2 <_fpadd_parts+0x42>
     3c8:	84 30       	cpi	r24, 0x04	; 4
     3ca:	09 f0       	breq	.+2      	; 0x3ce <_fpadd_parts+0x2e>
     3cc:	2f c1       	rjmp	.+606    	; 0x62c <_fpadd_parts+0x28c>
     3ce:	11 96       	adiw	r26, 0x01	; 1
     3d0:	9c 91       	ld	r25, X
     3d2:	11 97       	sbiw	r26, 0x01	; 1
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	98 17       	cp	r25, r24
     3d8:	09 f4       	brne	.+2      	; 0x3dc <_fpadd_parts+0x3c>
     3da:	28 c1       	rjmp	.+592    	; 0x62c <_fpadd_parts+0x28c>
     3dc:	a0 e6       	ldi	r26, 0x60	; 96
     3de:	b0 e0       	ldi	r27, 0x00	; 0
     3e0:	25 c1       	rjmp	.+586    	; 0x62c <_fpadd_parts+0x28c>
     3e2:	84 30       	cpi	r24, 0x04	; 4
     3e4:	09 f4       	brne	.+2      	; 0x3e8 <_fpadd_parts+0x48>
     3e6:	21 c1       	rjmp	.+578    	; 0x62a <_fpadd_parts+0x28a>
     3e8:	82 30       	cpi	r24, 0x02	; 2
     3ea:	a9 f4       	brne	.+42     	; 0x416 <_fpadd_parts+0x76>
     3ec:	92 30       	cpi	r25, 0x02	; 2
     3ee:	09 f0       	breq	.+2      	; 0x3f2 <_fpadd_parts+0x52>
     3f0:	1d c1       	rjmp	.+570    	; 0x62c <_fpadd_parts+0x28c>
     3f2:	9a 01       	movw	r18, r20
     3f4:	ad 01       	movw	r20, r26
     3f6:	88 e0       	ldi	r24, 0x08	; 8
     3f8:	ea 01       	movw	r28, r20
     3fa:	09 90       	ld	r0, Y+
     3fc:	ae 01       	movw	r20, r28
     3fe:	e9 01       	movw	r28, r18
     400:	09 92       	st	Y+, r0
     402:	9e 01       	movw	r18, r28
     404:	81 50       	subi	r24, 0x01	; 1
     406:	c1 f7       	brne	.-16     	; 0x3f8 <_fpadd_parts+0x58>
     408:	e2 01       	movw	r28, r4
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	11 96       	adiw	r26, 0x01	; 1
     40e:	9c 91       	ld	r25, X
     410:	89 23       	and	r24, r25
     412:	81 83       	std	Z+1, r24	; 0x01
     414:	08 c1       	rjmp	.+528    	; 0x626 <_fpadd_parts+0x286>
     416:	92 30       	cpi	r25, 0x02	; 2
     418:	09 f4       	brne	.+2      	; 0x41c <_fpadd_parts+0x7c>
     41a:	07 c1       	rjmp	.+526    	; 0x62a <_fpadd_parts+0x28a>
     41c:	12 96       	adiw	r26, 0x02	; 2
     41e:	2d 90       	ld	r2, X+
     420:	3c 90       	ld	r3, X
     422:	13 97       	sbiw	r26, 0x03	; 3
     424:	eb 01       	movw	r28, r22
     426:	8a 81       	ldd	r24, Y+2	; 0x02
     428:	9b 81       	ldd	r25, Y+3	; 0x03
     42a:	14 96       	adiw	r26, 0x04	; 4
     42c:	ad 90       	ld	r10, X+
     42e:	bd 90       	ld	r11, X+
     430:	cd 90       	ld	r12, X+
     432:	dc 90       	ld	r13, X
     434:	17 97       	sbiw	r26, 0x07	; 7
     436:	ec 80       	ldd	r14, Y+4	; 0x04
     438:	fd 80       	ldd	r15, Y+5	; 0x05
     43a:	0e 81       	ldd	r16, Y+6	; 0x06
     43c:	1f 81       	ldd	r17, Y+7	; 0x07
     43e:	91 01       	movw	r18, r2
     440:	28 1b       	sub	r18, r24
     442:	39 0b       	sbc	r19, r25
     444:	b9 01       	movw	r22, r18
     446:	37 ff       	sbrs	r19, 7
     448:	04 c0       	rjmp	.+8      	; 0x452 <_fpadd_parts+0xb2>
     44a:	66 27       	eor	r22, r22
     44c:	77 27       	eor	r23, r23
     44e:	62 1b       	sub	r22, r18
     450:	73 0b       	sbc	r23, r19
     452:	60 32       	cpi	r22, 0x20	; 32
     454:	71 05       	cpc	r23, r1
     456:	0c f0       	brlt	.+2      	; 0x45a <_fpadd_parts+0xba>
     458:	61 c0       	rjmp	.+194    	; 0x51c <_fpadd_parts+0x17c>
     45a:	12 16       	cp	r1, r18
     45c:	13 06       	cpc	r1, r19
     45e:	6c f5       	brge	.+90     	; 0x4ba <_fpadd_parts+0x11a>
     460:	37 01       	movw	r6, r14
     462:	48 01       	movw	r8, r16
     464:	06 2e       	mov	r0, r22
     466:	04 c0       	rjmp	.+8      	; 0x470 <_fpadd_parts+0xd0>
     468:	96 94       	lsr	r9
     46a:	87 94       	ror	r8
     46c:	77 94       	ror	r7
     46e:	67 94       	ror	r6
     470:	0a 94       	dec	r0
     472:	d2 f7       	brpl	.-12     	; 0x468 <_fpadd_parts+0xc8>
     474:	21 e0       	ldi	r18, 0x01	; 1
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	40 e0       	ldi	r20, 0x00	; 0
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	04 c0       	rjmp	.+8      	; 0x486 <_fpadd_parts+0xe6>
     47e:	22 0f       	add	r18, r18
     480:	33 1f       	adc	r19, r19
     482:	44 1f       	adc	r20, r20
     484:	55 1f       	adc	r21, r21
     486:	6a 95       	dec	r22
     488:	d2 f7       	brpl	.-12     	; 0x47e <_fpadd_parts+0xde>
     48a:	21 50       	subi	r18, 0x01	; 1
     48c:	30 40       	sbci	r19, 0x00	; 0
     48e:	40 40       	sbci	r20, 0x00	; 0
     490:	50 40       	sbci	r21, 0x00	; 0
     492:	2e 21       	and	r18, r14
     494:	3f 21       	and	r19, r15
     496:	40 23       	and	r20, r16
     498:	51 23       	and	r21, r17
     49a:	21 15       	cp	r18, r1
     49c:	31 05       	cpc	r19, r1
     49e:	41 05       	cpc	r20, r1
     4a0:	51 05       	cpc	r21, r1
     4a2:	21 f0       	breq	.+8      	; 0x4ac <_fpadd_parts+0x10c>
     4a4:	21 e0       	ldi	r18, 0x01	; 1
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	79 01       	movw	r14, r18
     4ae:	8a 01       	movw	r16, r20
     4b0:	e6 28       	or	r14, r6
     4b2:	f7 28       	or	r15, r7
     4b4:	08 29       	or	r16, r8
     4b6:	19 29       	or	r17, r9
     4b8:	3c c0       	rjmp	.+120    	; 0x532 <_fpadd_parts+0x192>
     4ba:	23 2b       	or	r18, r19
     4bc:	d1 f1       	breq	.+116    	; 0x532 <_fpadd_parts+0x192>
     4be:	26 0e       	add	r2, r22
     4c0:	37 1e       	adc	r3, r23
     4c2:	35 01       	movw	r6, r10
     4c4:	46 01       	movw	r8, r12
     4c6:	06 2e       	mov	r0, r22
     4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <_fpadd_parts+0x132>
     4ca:	96 94       	lsr	r9
     4cc:	87 94       	ror	r8
     4ce:	77 94       	ror	r7
     4d0:	67 94       	ror	r6
     4d2:	0a 94       	dec	r0
     4d4:	d2 f7       	brpl	.-12     	; 0x4ca <_fpadd_parts+0x12a>
     4d6:	21 e0       	ldi	r18, 0x01	; 1
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	04 c0       	rjmp	.+8      	; 0x4e8 <_fpadd_parts+0x148>
     4e0:	22 0f       	add	r18, r18
     4e2:	33 1f       	adc	r19, r19
     4e4:	44 1f       	adc	r20, r20
     4e6:	55 1f       	adc	r21, r21
     4e8:	6a 95       	dec	r22
     4ea:	d2 f7       	brpl	.-12     	; 0x4e0 <_fpadd_parts+0x140>
     4ec:	21 50       	subi	r18, 0x01	; 1
     4ee:	30 40       	sbci	r19, 0x00	; 0
     4f0:	40 40       	sbci	r20, 0x00	; 0
     4f2:	50 40       	sbci	r21, 0x00	; 0
     4f4:	2a 21       	and	r18, r10
     4f6:	3b 21       	and	r19, r11
     4f8:	4c 21       	and	r20, r12
     4fa:	5d 21       	and	r21, r13
     4fc:	21 15       	cp	r18, r1
     4fe:	31 05       	cpc	r19, r1
     500:	41 05       	cpc	r20, r1
     502:	51 05       	cpc	r21, r1
     504:	21 f0       	breq	.+8      	; 0x50e <_fpadd_parts+0x16e>
     506:	21 e0       	ldi	r18, 0x01	; 1
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	59 01       	movw	r10, r18
     510:	6a 01       	movw	r12, r20
     512:	a6 28       	or	r10, r6
     514:	b7 28       	or	r11, r7
     516:	c8 28       	or	r12, r8
     518:	d9 28       	or	r13, r9
     51a:	0b c0       	rjmp	.+22     	; 0x532 <_fpadd_parts+0x192>
     51c:	82 15       	cp	r24, r2
     51e:	93 05       	cpc	r25, r3
     520:	2c f0       	brlt	.+10     	; 0x52c <_fpadd_parts+0x18c>
     522:	1c 01       	movw	r2, r24
     524:	aa 24       	eor	r10, r10
     526:	bb 24       	eor	r11, r11
     528:	65 01       	movw	r12, r10
     52a:	03 c0       	rjmp	.+6      	; 0x532 <_fpadd_parts+0x192>
     52c:	ee 24       	eor	r14, r14
     52e:	ff 24       	eor	r15, r15
     530:	87 01       	movw	r16, r14
     532:	11 96       	adiw	r26, 0x01	; 1
     534:	9c 91       	ld	r25, X
     536:	d2 01       	movw	r26, r4
     538:	11 96       	adiw	r26, 0x01	; 1
     53a:	8c 91       	ld	r24, X
     53c:	98 17       	cp	r25, r24
     53e:	09 f4       	brne	.+2      	; 0x542 <_fpadd_parts+0x1a2>
     540:	45 c0       	rjmp	.+138    	; 0x5cc <_fpadd_parts+0x22c>
     542:	99 23       	and	r25, r25
     544:	39 f0       	breq	.+14     	; 0x554 <_fpadd_parts+0x1b4>
     546:	a8 01       	movw	r20, r16
     548:	97 01       	movw	r18, r14
     54a:	2a 19       	sub	r18, r10
     54c:	3b 09       	sbc	r19, r11
     54e:	4c 09       	sbc	r20, r12
     550:	5d 09       	sbc	r21, r13
     552:	06 c0       	rjmp	.+12     	; 0x560 <_fpadd_parts+0x1c0>
     554:	a6 01       	movw	r20, r12
     556:	95 01       	movw	r18, r10
     558:	2e 19       	sub	r18, r14
     55a:	3f 09       	sbc	r19, r15
     55c:	40 0b       	sbc	r20, r16
     55e:	51 0b       	sbc	r21, r17
     560:	57 fd       	sbrc	r21, 7
     562:	08 c0       	rjmp	.+16     	; 0x574 <_fpadd_parts+0x1d4>
     564:	11 82       	std	Z+1, r1	; 0x01
     566:	33 82       	std	Z+3, r3	; 0x03
     568:	22 82       	std	Z+2, r2	; 0x02
     56a:	24 83       	std	Z+4, r18	; 0x04
     56c:	35 83       	std	Z+5, r19	; 0x05
     56e:	46 83       	std	Z+6, r20	; 0x06
     570:	57 83       	std	Z+7, r21	; 0x07
     572:	1d c0       	rjmp	.+58     	; 0x5ae <_fpadd_parts+0x20e>
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	81 83       	std	Z+1, r24	; 0x01
     578:	33 82       	std	Z+3, r3	; 0x03
     57a:	22 82       	std	Z+2, r2	; 0x02
     57c:	88 27       	eor	r24, r24
     57e:	99 27       	eor	r25, r25
     580:	dc 01       	movw	r26, r24
     582:	82 1b       	sub	r24, r18
     584:	93 0b       	sbc	r25, r19
     586:	a4 0b       	sbc	r26, r20
     588:	b5 0b       	sbc	r27, r21
     58a:	84 83       	std	Z+4, r24	; 0x04
     58c:	95 83       	std	Z+5, r25	; 0x05
     58e:	a6 83       	std	Z+6, r26	; 0x06
     590:	b7 83       	std	Z+7, r27	; 0x07
     592:	0d c0       	rjmp	.+26     	; 0x5ae <_fpadd_parts+0x20e>
     594:	22 0f       	add	r18, r18
     596:	33 1f       	adc	r19, r19
     598:	44 1f       	adc	r20, r20
     59a:	55 1f       	adc	r21, r21
     59c:	24 83       	std	Z+4, r18	; 0x04
     59e:	35 83       	std	Z+5, r19	; 0x05
     5a0:	46 83       	std	Z+6, r20	; 0x06
     5a2:	57 83       	std	Z+7, r21	; 0x07
     5a4:	82 81       	ldd	r24, Z+2	; 0x02
     5a6:	93 81       	ldd	r25, Z+3	; 0x03
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	93 83       	std	Z+3, r25	; 0x03
     5ac:	82 83       	std	Z+2, r24	; 0x02
     5ae:	24 81       	ldd	r18, Z+4	; 0x04
     5b0:	35 81       	ldd	r19, Z+5	; 0x05
     5b2:	46 81       	ldd	r20, Z+6	; 0x06
     5b4:	57 81       	ldd	r21, Z+7	; 0x07
     5b6:	da 01       	movw	r26, r20
     5b8:	c9 01       	movw	r24, r18
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	a1 09       	sbc	r26, r1
     5be:	b1 09       	sbc	r27, r1
     5c0:	8f 5f       	subi	r24, 0xFF	; 255
     5c2:	9f 4f       	sbci	r25, 0xFF	; 255
     5c4:	af 4f       	sbci	r26, 0xFF	; 255
     5c6:	bf 43       	sbci	r27, 0x3F	; 63
     5c8:	28 f3       	brcs	.-54     	; 0x594 <_fpadd_parts+0x1f4>
     5ca:	0b c0       	rjmp	.+22     	; 0x5e2 <_fpadd_parts+0x242>
     5cc:	91 83       	std	Z+1, r25	; 0x01
     5ce:	33 82       	std	Z+3, r3	; 0x03
     5d0:	22 82       	std	Z+2, r2	; 0x02
     5d2:	ea 0c       	add	r14, r10
     5d4:	fb 1c       	adc	r15, r11
     5d6:	0c 1d       	adc	r16, r12
     5d8:	1d 1d       	adc	r17, r13
     5da:	e4 82       	std	Z+4, r14	; 0x04
     5dc:	f5 82       	std	Z+5, r15	; 0x05
     5de:	06 83       	std	Z+6, r16	; 0x06
     5e0:	17 83       	std	Z+7, r17	; 0x07
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	80 83       	st	Z, r24
     5e6:	24 81       	ldd	r18, Z+4	; 0x04
     5e8:	35 81       	ldd	r19, Z+5	; 0x05
     5ea:	46 81       	ldd	r20, Z+6	; 0x06
     5ec:	57 81       	ldd	r21, Z+7	; 0x07
     5ee:	57 ff       	sbrs	r21, 7
     5f0:	1a c0       	rjmp	.+52     	; 0x626 <_fpadd_parts+0x286>
     5f2:	c9 01       	movw	r24, r18
     5f4:	aa 27       	eor	r26, r26
     5f6:	97 fd       	sbrc	r25, 7
     5f8:	a0 95       	com	r26
     5fa:	ba 2f       	mov	r27, r26
     5fc:	81 70       	andi	r24, 0x01	; 1
     5fe:	90 70       	andi	r25, 0x00	; 0
     600:	a0 70       	andi	r26, 0x00	; 0
     602:	b0 70       	andi	r27, 0x00	; 0
     604:	56 95       	lsr	r21
     606:	47 95       	ror	r20
     608:	37 95       	ror	r19
     60a:	27 95       	ror	r18
     60c:	82 2b       	or	r24, r18
     60e:	93 2b       	or	r25, r19
     610:	a4 2b       	or	r26, r20
     612:	b5 2b       	or	r27, r21
     614:	84 83       	std	Z+4, r24	; 0x04
     616:	95 83       	std	Z+5, r25	; 0x05
     618:	a6 83       	std	Z+6, r26	; 0x06
     61a:	b7 83       	std	Z+7, r27	; 0x07
     61c:	82 81       	ldd	r24, Z+2	; 0x02
     61e:	93 81       	ldd	r25, Z+3	; 0x03
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	93 83       	std	Z+3, r25	; 0x03
     624:	82 83       	std	Z+2, r24	; 0x02
     626:	df 01       	movw	r26, r30
     628:	01 c0       	rjmp	.+2      	; 0x62c <_fpadd_parts+0x28c>
     62a:	d2 01       	movw	r26, r4
     62c:	cd 01       	movw	r24, r26
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	e2 e1       	ldi	r30, 0x12	; 18
     634:	0c 94 c7 1e 	jmp	0x3d8e	; 0x3d8e <__epilogue_restores__>

00000638 <__subsf3>:
     638:	a0 e2       	ldi	r26, 0x20	; 32
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	e2 e2       	ldi	r30, 0x22	; 34
     63e:	f3 e0       	ldi	r31, 0x03	; 3
     640:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__prologue_saves__+0x18>
     644:	69 83       	std	Y+1, r22	; 0x01
     646:	7a 83       	std	Y+2, r23	; 0x02
     648:	8b 83       	std	Y+3, r24	; 0x03
     64a:	9c 83       	std	Y+4, r25	; 0x04
     64c:	2d 83       	std	Y+5, r18	; 0x05
     64e:	3e 83       	std	Y+6, r19	; 0x06
     650:	4f 83       	std	Y+7, r20	; 0x07
     652:	58 87       	std	Y+8, r21	; 0x08
     654:	e9 e0       	ldi	r30, 0x09	; 9
     656:	ee 2e       	mov	r14, r30
     658:	f1 2c       	mov	r15, r1
     65a:	ec 0e       	add	r14, r28
     65c:	fd 1e       	adc	r15, r29
     65e:	ce 01       	movw	r24, r28
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	b7 01       	movw	r22, r14
     664:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     668:	8e 01       	movw	r16, r28
     66a:	0f 5e       	subi	r16, 0xEF	; 239
     66c:	1f 4f       	sbci	r17, 0xFF	; 255
     66e:	ce 01       	movw	r24, r28
     670:	05 96       	adiw	r24, 0x05	; 5
     672:	b8 01       	movw	r22, r16
     674:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     678:	8a 89       	ldd	r24, Y+18	; 0x12
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	89 27       	eor	r24, r25
     67e:	8a 8b       	std	Y+18, r24	; 0x12
     680:	c7 01       	movw	r24, r14
     682:	b8 01       	movw	r22, r16
     684:	ae 01       	movw	r20, r28
     686:	47 5e       	subi	r20, 0xE7	; 231
     688:	5f 4f       	sbci	r21, 0xFF	; 255
     68a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_fpadd_parts>
     68e:	0e 94 a9 07 	call	0xf52	; 0xf52 <__pack_f>
     692:	a0 96       	adiw	r28, 0x20	; 32
     694:	e6 e0       	ldi	r30, 0x06	; 6
     696:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <__epilogue_restores__+0x18>

0000069a <__addsf3>:
     69a:	a0 e2       	ldi	r26, 0x20	; 32
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	e3 e5       	ldi	r30, 0x53	; 83
     6a0:	f3 e0       	ldi	r31, 0x03	; 3
     6a2:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__prologue_saves__+0x18>
     6a6:	69 83       	std	Y+1, r22	; 0x01
     6a8:	7a 83       	std	Y+2, r23	; 0x02
     6aa:	8b 83       	std	Y+3, r24	; 0x03
     6ac:	9c 83       	std	Y+4, r25	; 0x04
     6ae:	2d 83       	std	Y+5, r18	; 0x05
     6b0:	3e 83       	std	Y+6, r19	; 0x06
     6b2:	4f 83       	std	Y+7, r20	; 0x07
     6b4:	58 87       	std	Y+8, r21	; 0x08
     6b6:	f9 e0       	ldi	r31, 0x09	; 9
     6b8:	ef 2e       	mov	r14, r31
     6ba:	f1 2c       	mov	r15, r1
     6bc:	ec 0e       	add	r14, r28
     6be:	fd 1e       	adc	r15, r29
     6c0:	ce 01       	movw	r24, r28
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	b7 01       	movw	r22, r14
     6c6:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     6ca:	8e 01       	movw	r16, r28
     6cc:	0f 5e       	subi	r16, 0xEF	; 239
     6ce:	1f 4f       	sbci	r17, 0xFF	; 255
     6d0:	ce 01       	movw	r24, r28
     6d2:	05 96       	adiw	r24, 0x05	; 5
     6d4:	b8 01       	movw	r22, r16
     6d6:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     6da:	c7 01       	movw	r24, r14
     6dc:	b8 01       	movw	r22, r16
     6de:	ae 01       	movw	r20, r28
     6e0:	47 5e       	subi	r20, 0xE7	; 231
     6e2:	5f 4f       	sbci	r21, 0xFF	; 255
     6e4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_fpadd_parts>
     6e8:	0e 94 a9 07 	call	0xf52	; 0xf52 <__pack_f>
     6ec:	a0 96       	adiw	r28, 0x20	; 32
     6ee:	e6 e0       	ldi	r30, 0x06	; 6
     6f0:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <__epilogue_restores__+0x18>

000006f4 <__mulsf3>:
     6f4:	a0 e2       	ldi	r26, 0x20	; 32
     6f6:	b0 e0       	ldi	r27, 0x00	; 0
     6f8:	e0 e8       	ldi	r30, 0x80	; 128
     6fa:	f3 e0       	ldi	r31, 0x03	; 3
     6fc:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__prologue_saves__>
     700:	69 83       	std	Y+1, r22	; 0x01
     702:	7a 83       	std	Y+2, r23	; 0x02
     704:	8b 83       	std	Y+3, r24	; 0x03
     706:	9c 83       	std	Y+4, r25	; 0x04
     708:	2d 83       	std	Y+5, r18	; 0x05
     70a:	3e 83       	std	Y+6, r19	; 0x06
     70c:	4f 83       	std	Y+7, r20	; 0x07
     70e:	58 87       	std	Y+8, r21	; 0x08
     710:	ce 01       	movw	r24, r28
     712:	01 96       	adiw	r24, 0x01	; 1
     714:	be 01       	movw	r22, r28
     716:	67 5f       	subi	r22, 0xF7	; 247
     718:	7f 4f       	sbci	r23, 0xFF	; 255
     71a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     71e:	ce 01       	movw	r24, r28
     720:	05 96       	adiw	r24, 0x05	; 5
     722:	be 01       	movw	r22, r28
     724:	6f 5e       	subi	r22, 0xEF	; 239
     726:	7f 4f       	sbci	r23, 0xFF	; 255
     728:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     72c:	99 85       	ldd	r25, Y+9	; 0x09
     72e:	92 30       	cpi	r25, 0x02	; 2
     730:	88 f0       	brcs	.+34     	; 0x754 <__mulsf3+0x60>
     732:	89 89       	ldd	r24, Y+17	; 0x11
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	c8 f0       	brcs	.+50     	; 0x76a <__mulsf3+0x76>
     738:	94 30       	cpi	r25, 0x04	; 4
     73a:	19 f4       	brne	.+6      	; 0x742 <__mulsf3+0x4e>
     73c:	82 30       	cpi	r24, 0x02	; 2
     73e:	51 f4       	brne	.+20     	; 0x754 <__mulsf3+0x60>
     740:	04 c0       	rjmp	.+8      	; 0x74a <__mulsf3+0x56>
     742:	84 30       	cpi	r24, 0x04	; 4
     744:	29 f4       	brne	.+10     	; 0x750 <__mulsf3+0x5c>
     746:	92 30       	cpi	r25, 0x02	; 2
     748:	81 f4       	brne	.+32     	; 0x76a <__mulsf3+0x76>
     74a:	80 e6       	ldi	r24, 0x60	; 96
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	c6 c0       	rjmp	.+396    	; 0x8dc <__stack+0x7d>
     750:	92 30       	cpi	r25, 0x02	; 2
     752:	49 f4       	brne	.+18     	; 0x766 <__mulsf3+0x72>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	9a 85       	ldd	r25, Y+10	; 0x0a
     758:	8a 89       	ldd	r24, Y+18	; 0x12
     75a:	98 13       	cpse	r25, r24
     75c:	21 e0       	ldi	r18, 0x01	; 1
     75e:	2a 87       	std	Y+10, r18	; 0x0a
     760:	ce 01       	movw	r24, r28
     762:	09 96       	adiw	r24, 0x09	; 9
     764:	bb c0       	rjmp	.+374    	; 0x8dc <__stack+0x7d>
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	49 f4       	brne	.+18     	; 0x77c <__mulsf3+0x88>
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	9a 85       	ldd	r25, Y+10	; 0x0a
     76e:	8a 89       	ldd	r24, Y+18	; 0x12
     770:	98 13       	cpse	r25, r24
     772:	21 e0       	ldi	r18, 0x01	; 1
     774:	2a 8b       	std	Y+18, r18	; 0x12
     776:	ce 01       	movw	r24, r28
     778:	41 96       	adiw	r24, 0x11	; 17
     77a:	b0 c0       	rjmp	.+352    	; 0x8dc <__stack+0x7d>
     77c:	2d 84       	ldd	r2, Y+13	; 0x0d
     77e:	3e 84       	ldd	r3, Y+14	; 0x0e
     780:	4f 84       	ldd	r4, Y+15	; 0x0f
     782:	58 88       	ldd	r5, Y+16	; 0x10
     784:	6d 88       	ldd	r6, Y+21	; 0x15
     786:	7e 88       	ldd	r7, Y+22	; 0x16
     788:	8f 88       	ldd	r8, Y+23	; 0x17
     78a:	98 8c       	ldd	r9, Y+24	; 0x18
     78c:	ee 24       	eor	r14, r14
     78e:	ff 24       	eor	r15, r15
     790:	87 01       	movw	r16, r14
     792:	aa 24       	eor	r10, r10
     794:	bb 24       	eor	r11, r11
     796:	65 01       	movw	r12, r10
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	e0 e0       	ldi	r30, 0x00	; 0
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	c1 01       	movw	r24, r2
     7a6:	81 70       	andi	r24, 0x01	; 1
     7a8:	90 70       	andi	r25, 0x00	; 0
     7aa:	89 2b       	or	r24, r25
     7ac:	e9 f0       	breq	.+58     	; 0x7e8 <__mulsf3+0xf4>
     7ae:	e6 0c       	add	r14, r6
     7b0:	f7 1c       	adc	r15, r7
     7b2:	08 1d       	adc	r16, r8
     7b4:	19 1d       	adc	r17, r9
     7b6:	9a 01       	movw	r18, r20
     7b8:	ab 01       	movw	r20, r22
     7ba:	2a 0d       	add	r18, r10
     7bc:	3b 1d       	adc	r19, r11
     7be:	4c 1d       	adc	r20, r12
     7c0:	5d 1d       	adc	r21, r13
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	a0 e0       	ldi	r26, 0x00	; 0
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	e6 14       	cp	r14, r6
     7cc:	f7 04       	cpc	r15, r7
     7ce:	08 05       	cpc	r16, r8
     7d0:	19 05       	cpc	r17, r9
     7d2:	20 f4       	brcc	.+8      	; 0x7dc <__mulsf3+0xe8>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	a0 e0       	ldi	r26, 0x00	; 0
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	ba 01       	movw	r22, r20
     7de:	a9 01       	movw	r20, r18
     7e0:	48 0f       	add	r20, r24
     7e2:	59 1f       	adc	r21, r25
     7e4:	6a 1f       	adc	r22, r26
     7e6:	7b 1f       	adc	r23, r27
     7e8:	aa 0c       	add	r10, r10
     7ea:	bb 1c       	adc	r11, r11
     7ec:	cc 1c       	adc	r12, r12
     7ee:	dd 1c       	adc	r13, r13
     7f0:	97 fe       	sbrs	r9, 7
     7f2:	08 c0       	rjmp	.+16     	; 0x804 <__mulsf3+0x110>
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	a0 e0       	ldi	r26, 0x00	; 0
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
     7fc:	a8 2a       	or	r10, r24
     7fe:	b9 2a       	or	r11, r25
     800:	ca 2a       	or	r12, r26
     802:	db 2a       	or	r13, r27
     804:	31 96       	adiw	r30, 0x01	; 1
     806:	e0 32       	cpi	r30, 0x20	; 32
     808:	f1 05       	cpc	r31, r1
     80a:	49 f0       	breq	.+18     	; 0x81e <__mulsf3+0x12a>
     80c:	66 0c       	add	r6, r6
     80e:	77 1c       	adc	r7, r7
     810:	88 1c       	adc	r8, r8
     812:	99 1c       	adc	r9, r9
     814:	56 94       	lsr	r5
     816:	47 94       	ror	r4
     818:	37 94       	ror	r3
     81a:	27 94       	ror	r2
     81c:	c3 cf       	rjmp	.-122    	; 0x7a4 <__mulsf3+0xb0>
     81e:	fa 85       	ldd	r31, Y+10	; 0x0a
     820:	ea 89       	ldd	r30, Y+18	; 0x12
     822:	2b 89       	ldd	r18, Y+19	; 0x13
     824:	3c 89       	ldd	r19, Y+20	; 0x14
     826:	8b 85       	ldd	r24, Y+11	; 0x0b
     828:	9c 85       	ldd	r25, Y+12	; 0x0c
     82a:	28 0f       	add	r18, r24
     82c:	39 1f       	adc	r19, r25
     82e:	2e 5f       	subi	r18, 0xFE	; 254
     830:	3f 4f       	sbci	r19, 0xFF	; 255
     832:	17 c0       	rjmp	.+46     	; 0x862 <__stack+0x3>
     834:	ca 01       	movw	r24, r20
     836:	81 70       	andi	r24, 0x01	; 1
     838:	90 70       	andi	r25, 0x00	; 0
     83a:	89 2b       	or	r24, r25
     83c:	61 f0       	breq	.+24     	; 0x856 <__mulsf3+0x162>
     83e:	16 95       	lsr	r17
     840:	07 95       	ror	r16
     842:	f7 94       	ror	r15
     844:	e7 94       	ror	r14
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	a0 e0       	ldi	r26, 0x00	; 0
     84c:	b0 e8       	ldi	r27, 0x80	; 128
     84e:	e8 2a       	or	r14, r24
     850:	f9 2a       	or	r15, r25
     852:	0a 2b       	or	r16, r26
     854:	1b 2b       	or	r17, r27
     856:	76 95       	lsr	r23
     858:	67 95       	ror	r22
     85a:	57 95       	ror	r21
     85c:	47 95       	ror	r20
     85e:	2f 5f       	subi	r18, 0xFF	; 255
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	77 fd       	sbrc	r23, 7
     864:	e7 cf       	rjmp	.-50     	; 0x834 <__mulsf3+0x140>
     866:	0c c0       	rjmp	.+24     	; 0x880 <__stack+0x21>
     868:	44 0f       	add	r20, r20
     86a:	55 1f       	adc	r21, r21
     86c:	66 1f       	adc	r22, r22
     86e:	77 1f       	adc	r23, r23
     870:	17 fd       	sbrc	r17, 7
     872:	41 60       	ori	r20, 0x01	; 1
     874:	ee 0c       	add	r14, r14
     876:	ff 1c       	adc	r15, r15
     878:	00 1f       	adc	r16, r16
     87a:	11 1f       	adc	r17, r17
     87c:	21 50       	subi	r18, 0x01	; 1
     87e:	30 40       	sbci	r19, 0x00	; 0
     880:	40 30       	cpi	r20, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	59 07       	cpc	r21, r25
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	69 07       	cpc	r22, r25
     88a:	90 e4       	ldi	r25, 0x40	; 64
     88c:	79 07       	cpc	r23, r25
     88e:	60 f3       	brcs	.-40     	; 0x868 <__stack+0x9>
     890:	2b 8f       	std	Y+27, r18	; 0x1b
     892:	3c 8f       	std	Y+28, r19	; 0x1c
     894:	db 01       	movw	r26, r22
     896:	ca 01       	movw	r24, r20
     898:	8f 77       	andi	r24, 0x7F	; 127
     89a:	90 70       	andi	r25, 0x00	; 0
     89c:	a0 70       	andi	r26, 0x00	; 0
     89e:	b0 70       	andi	r27, 0x00	; 0
     8a0:	80 34       	cpi	r24, 0x40	; 64
     8a2:	91 05       	cpc	r25, r1
     8a4:	a1 05       	cpc	r26, r1
     8a6:	b1 05       	cpc	r27, r1
     8a8:	61 f4       	brne	.+24     	; 0x8c2 <__stack+0x63>
     8aa:	47 fd       	sbrc	r20, 7
     8ac:	0a c0       	rjmp	.+20     	; 0x8c2 <__stack+0x63>
     8ae:	e1 14       	cp	r14, r1
     8b0:	f1 04       	cpc	r15, r1
     8b2:	01 05       	cpc	r16, r1
     8b4:	11 05       	cpc	r17, r1
     8b6:	29 f0       	breq	.+10     	; 0x8c2 <__stack+0x63>
     8b8:	40 5c       	subi	r20, 0xC0	; 192
     8ba:	5f 4f       	sbci	r21, 0xFF	; 255
     8bc:	6f 4f       	sbci	r22, 0xFF	; 255
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	40 78       	andi	r20, 0x80	; 128
     8c2:	1a 8e       	std	Y+26, r1	; 0x1a
     8c4:	fe 17       	cp	r31, r30
     8c6:	11 f0       	breq	.+4      	; 0x8cc <__stack+0x6d>
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	8a 8f       	std	Y+26, r24	; 0x1a
     8cc:	4d 8f       	std	Y+29, r20	; 0x1d
     8ce:	5e 8f       	std	Y+30, r21	; 0x1e
     8d0:	6f 8f       	std	Y+31, r22	; 0x1f
     8d2:	78 a3       	std	Y+32, r23	; 0x20
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	89 8f       	std	Y+25, r24	; 0x19
     8d8:	ce 01       	movw	r24, r28
     8da:	49 96       	adiw	r24, 0x19	; 25
     8dc:	0e 94 a9 07 	call	0xf52	; 0xf52 <__pack_f>
     8e0:	a0 96       	adiw	r28, 0x20	; 32
     8e2:	e2 e1       	ldi	r30, 0x12	; 18
     8e4:	0c 94 c7 1e 	jmp	0x3d8e	; 0x3d8e <__epilogue_restores__>

000008e8 <__divsf3>:
     8e8:	a8 e1       	ldi	r26, 0x18	; 24
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	ea e7       	ldi	r30, 0x7A	; 122
     8ee:	f4 e0       	ldi	r31, 0x04	; 4
     8f0:	0c 94 b3 1e 	jmp	0x3d66	; 0x3d66 <__prologue_saves__+0x10>
     8f4:	69 83       	std	Y+1, r22	; 0x01
     8f6:	7a 83       	std	Y+2, r23	; 0x02
     8f8:	8b 83       	std	Y+3, r24	; 0x03
     8fa:	9c 83       	std	Y+4, r25	; 0x04
     8fc:	2d 83       	std	Y+5, r18	; 0x05
     8fe:	3e 83       	std	Y+6, r19	; 0x06
     900:	4f 83       	std	Y+7, r20	; 0x07
     902:	58 87       	std	Y+8, r21	; 0x08
     904:	b9 e0       	ldi	r27, 0x09	; 9
     906:	eb 2e       	mov	r14, r27
     908:	f1 2c       	mov	r15, r1
     90a:	ec 0e       	add	r14, r28
     90c:	fd 1e       	adc	r15, r29
     90e:	ce 01       	movw	r24, r28
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	b7 01       	movw	r22, r14
     914:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     918:	8e 01       	movw	r16, r28
     91a:	0f 5e       	subi	r16, 0xEF	; 239
     91c:	1f 4f       	sbci	r17, 0xFF	; 255
     91e:	ce 01       	movw	r24, r28
     920:	05 96       	adiw	r24, 0x05	; 5
     922:	b8 01       	movw	r22, r16
     924:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     928:	29 85       	ldd	r18, Y+9	; 0x09
     92a:	22 30       	cpi	r18, 0x02	; 2
     92c:	08 f4       	brcc	.+2      	; 0x930 <__divsf3+0x48>
     92e:	7e c0       	rjmp	.+252    	; 0xa2c <__divsf3+0x144>
     930:	39 89       	ldd	r19, Y+17	; 0x11
     932:	32 30       	cpi	r19, 0x02	; 2
     934:	10 f4       	brcc	.+4      	; 0x93a <__divsf3+0x52>
     936:	b8 01       	movw	r22, r16
     938:	7c c0       	rjmp	.+248    	; 0xa32 <__divsf3+0x14a>
     93a:	8a 85       	ldd	r24, Y+10	; 0x0a
     93c:	9a 89       	ldd	r25, Y+18	; 0x12
     93e:	89 27       	eor	r24, r25
     940:	8a 87       	std	Y+10, r24	; 0x0a
     942:	24 30       	cpi	r18, 0x04	; 4
     944:	11 f0       	breq	.+4      	; 0x94a <__divsf3+0x62>
     946:	22 30       	cpi	r18, 0x02	; 2
     948:	31 f4       	brne	.+12     	; 0x956 <__divsf3+0x6e>
     94a:	23 17       	cp	r18, r19
     94c:	09 f0       	breq	.+2      	; 0x950 <__divsf3+0x68>
     94e:	6e c0       	rjmp	.+220    	; 0xa2c <__divsf3+0x144>
     950:	60 e6       	ldi	r22, 0x60	; 96
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	6e c0       	rjmp	.+220    	; 0xa32 <__divsf3+0x14a>
     956:	34 30       	cpi	r19, 0x04	; 4
     958:	39 f4       	brne	.+14     	; 0x968 <__divsf3+0x80>
     95a:	1d 86       	std	Y+13, r1	; 0x0d
     95c:	1e 86       	std	Y+14, r1	; 0x0e
     95e:	1f 86       	std	Y+15, r1	; 0x0f
     960:	18 8a       	std	Y+16, r1	; 0x10
     962:	1c 86       	std	Y+12, r1	; 0x0c
     964:	1b 86       	std	Y+11, r1	; 0x0b
     966:	04 c0       	rjmp	.+8      	; 0x970 <__divsf3+0x88>
     968:	32 30       	cpi	r19, 0x02	; 2
     96a:	21 f4       	brne	.+8      	; 0x974 <__divsf3+0x8c>
     96c:	84 e0       	ldi	r24, 0x04	; 4
     96e:	89 87       	std	Y+9, r24	; 0x09
     970:	b7 01       	movw	r22, r14
     972:	5f c0       	rjmp	.+190    	; 0xa32 <__divsf3+0x14a>
     974:	2b 85       	ldd	r18, Y+11	; 0x0b
     976:	3c 85       	ldd	r19, Y+12	; 0x0c
     978:	8b 89       	ldd	r24, Y+19	; 0x13
     97a:	9c 89       	ldd	r25, Y+20	; 0x14
     97c:	28 1b       	sub	r18, r24
     97e:	39 0b       	sbc	r19, r25
     980:	3c 87       	std	Y+12, r19	; 0x0c
     982:	2b 87       	std	Y+11, r18	; 0x0b
     984:	ed 84       	ldd	r14, Y+13	; 0x0d
     986:	fe 84       	ldd	r15, Y+14	; 0x0e
     988:	0f 85       	ldd	r16, Y+15	; 0x0f
     98a:	18 89       	ldd	r17, Y+16	; 0x10
     98c:	ad 88       	ldd	r10, Y+21	; 0x15
     98e:	be 88       	ldd	r11, Y+22	; 0x16
     990:	cf 88       	ldd	r12, Y+23	; 0x17
     992:	d8 8c       	ldd	r13, Y+24	; 0x18
     994:	ea 14       	cp	r14, r10
     996:	fb 04       	cpc	r15, r11
     998:	0c 05       	cpc	r16, r12
     99a:	1d 05       	cpc	r17, r13
     99c:	40 f4       	brcc	.+16     	; 0x9ae <__divsf3+0xc6>
     99e:	ee 0c       	add	r14, r14
     9a0:	ff 1c       	adc	r15, r15
     9a2:	00 1f       	adc	r16, r16
     9a4:	11 1f       	adc	r17, r17
     9a6:	21 50       	subi	r18, 0x01	; 1
     9a8:	30 40       	sbci	r19, 0x00	; 0
     9aa:	3c 87       	std	Y+12, r19	; 0x0c
     9ac:	2b 87       	std	Y+11, r18	; 0x0b
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	a0 e0       	ldi	r26, 0x00	; 0
     9bc:	b0 e4       	ldi	r27, 0x40	; 64
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	ea 14       	cp	r14, r10
     9c4:	fb 04       	cpc	r15, r11
     9c6:	0c 05       	cpc	r16, r12
     9c8:	1d 05       	cpc	r17, r13
     9ca:	40 f0       	brcs	.+16     	; 0x9dc <__divsf3+0xf4>
     9cc:	28 2b       	or	r18, r24
     9ce:	39 2b       	or	r19, r25
     9d0:	4a 2b       	or	r20, r26
     9d2:	5b 2b       	or	r21, r27
     9d4:	ea 18       	sub	r14, r10
     9d6:	fb 08       	sbc	r15, r11
     9d8:	0c 09       	sbc	r16, r12
     9da:	1d 09       	sbc	r17, r13
     9dc:	b6 95       	lsr	r27
     9de:	a7 95       	ror	r26
     9e0:	97 95       	ror	r25
     9e2:	87 95       	ror	r24
     9e4:	ee 0c       	add	r14, r14
     9e6:	ff 1c       	adc	r15, r15
     9e8:	00 1f       	adc	r16, r16
     9ea:	11 1f       	adc	r17, r17
     9ec:	6f 5f       	subi	r22, 0xFF	; 255
     9ee:	7f 4f       	sbci	r23, 0xFF	; 255
     9f0:	6f 31       	cpi	r22, 0x1F	; 31
     9f2:	71 05       	cpc	r23, r1
     9f4:	31 f7       	brne	.-52     	; 0x9c2 <__divsf3+0xda>
     9f6:	da 01       	movw	r26, r20
     9f8:	c9 01       	movw	r24, r18
     9fa:	8f 77       	andi	r24, 0x7F	; 127
     9fc:	90 70       	andi	r25, 0x00	; 0
     9fe:	a0 70       	andi	r26, 0x00	; 0
     a00:	b0 70       	andi	r27, 0x00	; 0
     a02:	80 34       	cpi	r24, 0x40	; 64
     a04:	91 05       	cpc	r25, r1
     a06:	a1 05       	cpc	r26, r1
     a08:	b1 05       	cpc	r27, r1
     a0a:	61 f4       	brne	.+24     	; 0xa24 <__divsf3+0x13c>
     a0c:	27 fd       	sbrc	r18, 7
     a0e:	0a c0       	rjmp	.+20     	; 0xa24 <__divsf3+0x13c>
     a10:	e1 14       	cp	r14, r1
     a12:	f1 04       	cpc	r15, r1
     a14:	01 05       	cpc	r16, r1
     a16:	11 05       	cpc	r17, r1
     a18:	29 f0       	breq	.+10     	; 0xa24 <__divsf3+0x13c>
     a1a:	20 5c       	subi	r18, 0xC0	; 192
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	4f 4f       	sbci	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	20 78       	andi	r18, 0x80	; 128
     a24:	2d 87       	std	Y+13, r18	; 0x0d
     a26:	3e 87       	std	Y+14, r19	; 0x0e
     a28:	4f 87       	std	Y+15, r20	; 0x0f
     a2a:	58 8b       	std	Y+16, r21	; 0x10
     a2c:	be 01       	movw	r22, r28
     a2e:	67 5f       	subi	r22, 0xF7	; 247
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	cb 01       	movw	r24, r22
     a34:	0e 94 a9 07 	call	0xf52	; 0xf52 <__pack_f>
     a38:	68 96       	adiw	r28, 0x18	; 24
     a3a:	ea e0       	ldi	r30, 0x0A	; 10
     a3c:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <__epilogue_restores__+0x10>

00000a40 <__gtsf2>:
     a40:	a8 e1       	ldi	r26, 0x18	; 24
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	e6 e2       	ldi	r30, 0x26	; 38
     a46:	f5 e0       	ldi	r31, 0x05	; 5
     a48:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__prologue_saves__+0x18>
     a4c:	69 83       	std	Y+1, r22	; 0x01
     a4e:	7a 83       	std	Y+2, r23	; 0x02
     a50:	8b 83       	std	Y+3, r24	; 0x03
     a52:	9c 83       	std	Y+4, r25	; 0x04
     a54:	2d 83       	std	Y+5, r18	; 0x05
     a56:	3e 83       	std	Y+6, r19	; 0x06
     a58:	4f 83       	std	Y+7, r20	; 0x07
     a5a:	58 87       	std	Y+8, r21	; 0x08
     a5c:	89 e0       	ldi	r24, 0x09	; 9
     a5e:	e8 2e       	mov	r14, r24
     a60:	f1 2c       	mov	r15, r1
     a62:	ec 0e       	add	r14, r28
     a64:	fd 1e       	adc	r15, r29
     a66:	ce 01       	movw	r24, r28
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	b7 01       	movw	r22, r14
     a6c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     a70:	8e 01       	movw	r16, r28
     a72:	0f 5e       	subi	r16, 0xEF	; 239
     a74:	1f 4f       	sbci	r17, 0xFF	; 255
     a76:	ce 01       	movw	r24, r28
     a78:	05 96       	adiw	r24, 0x05	; 5
     a7a:	b8 01       	movw	r22, r16
     a7c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     a80:	89 85       	ldd	r24, Y+9	; 0x09
     a82:	82 30       	cpi	r24, 0x02	; 2
     a84:	40 f0       	brcs	.+16     	; 0xa96 <__gtsf2+0x56>
     a86:	89 89       	ldd	r24, Y+17	; 0x11
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	28 f0       	brcs	.+10     	; 0xa96 <__gtsf2+0x56>
     a8c:	c7 01       	movw	r24, r14
     a8e:	b8 01       	movw	r22, r16
     a90:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fpcmp_parts_f>
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <__gtsf2+0x58>
     a96:	8f ef       	ldi	r24, 0xFF	; 255
     a98:	68 96       	adiw	r28, 0x18	; 24
     a9a:	e6 e0       	ldi	r30, 0x06	; 6
     a9c:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <__epilogue_restores__+0x18>

00000aa0 <__gesf2>:
     aa0:	a8 e1       	ldi	r26, 0x18	; 24
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	e6 e5       	ldi	r30, 0x56	; 86
     aa6:	f5 e0       	ldi	r31, 0x05	; 5
     aa8:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__prologue_saves__+0x18>
     aac:	69 83       	std	Y+1, r22	; 0x01
     aae:	7a 83       	std	Y+2, r23	; 0x02
     ab0:	8b 83       	std	Y+3, r24	; 0x03
     ab2:	9c 83       	std	Y+4, r25	; 0x04
     ab4:	2d 83       	std	Y+5, r18	; 0x05
     ab6:	3e 83       	std	Y+6, r19	; 0x06
     ab8:	4f 83       	std	Y+7, r20	; 0x07
     aba:	58 87       	std	Y+8, r21	; 0x08
     abc:	89 e0       	ldi	r24, 0x09	; 9
     abe:	e8 2e       	mov	r14, r24
     ac0:	f1 2c       	mov	r15, r1
     ac2:	ec 0e       	add	r14, r28
     ac4:	fd 1e       	adc	r15, r29
     ac6:	ce 01       	movw	r24, r28
     ac8:	01 96       	adiw	r24, 0x01	; 1
     aca:	b7 01       	movw	r22, r14
     acc:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     ad0:	8e 01       	movw	r16, r28
     ad2:	0f 5e       	subi	r16, 0xEF	; 239
     ad4:	1f 4f       	sbci	r17, 0xFF	; 255
     ad6:	ce 01       	movw	r24, r28
     ad8:	05 96       	adiw	r24, 0x05	; 5
     ada:	b8 01       	movw	r22, r16
     adc:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     ae0:	89 85       	ldd	r24, Y+9	; 0x09
     ae2:	82 30       	cpi	r24, 0x02	; 2
     ae4:	40 f0       	brcs	.+16     	; 0xaf6 <__gesf2+0x56>
     ae6:	89 89       	ldd	r24, Y+17	; 0x11
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	28 f0       	brcs	.+10     	; 0xaf6 <__gesf2+0x56>
     aec:	c7 01       	movw	r24, r14
     aee:	b8 01       	movw	r22, r16
     af0:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fpcmp_parts_f>
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <__gesf2+0x58>
     af6:	8f ef       	ldi	r24, 0xFF	; 255
     af8:	68 96       	adiw	r28, 0x18	; 24
     afa:	e6 e0       	ldi	r30, 0x06	; 6
     afc:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <__epilogue_restores__+0x18>

00000b00 <__ltsf2>:
     b00:	a8 e1       	ldi	r26, 0x18	; 24
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	e6 e8       	ldi	r30, 0x86	; 134
     b06:	f5 e0       	ldi	r31, 0x05	; 5
     b08:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__prologue_saves__+0x18>
     b0c:	69 83       	std	Y+1, r22	; 0x01
     b0e:	7a 83       	std	Y+2, r23	; 0x02
     b10:	8b 83       	std	Y+3, r24	; 0x03
     b12:	9c 83       	std	Y+4, r25	; 0x04
     b14:	2d 83       	std	Y+5, r18	; 0x05
     b16:	3e 83       	std	Y+6, r19	; 0x06
     b18:	4f 83       	std	Y+7, r20	; 0x07
     b1a:	58 87       	std	Y+8, r21	; 0x08
     b1c:	89 e0       	ldi	r24, 0x09	; 9
     b1e:	e8 2e       	mov	r14, r24
     b20:	f1 2c       	mov	r15, r1
     b22:	ec 0e       	add	r14, r28
     b24:	fd 1e       	adc	r15, r29
     b26:	ce 01       	movw	r24, r28
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	b7 01       	movw	r22, r14
     b2c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     b30:	8e 01       	movw	r16, r28
     b32:	0f 5e       	subi	r16, 0xEF	; 239
     b34:	1f 4f       	sbci	r17, 0xFF	; 255
     b36:	ce 01       	movw	r24, r28
     b38:	05 96       	adiw	r24, 0x05	; 5
     b3a:	b8 01       	movw	r22, r16
     b3c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     b40:	89 85       	ldd	r24, Y+9	; 0x09
     b42:	82 30       	cpi	r24, 0x02	; 2
     b44:	40 f0       	brcs	.+16     	; 0xb56 <__ltsf2+0x56>
     b46:	89 89       	ldd	r24, Y+17	; 0x11
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	28 f0       	brcs	.+10     	; 0xb56 <__ltsf2+0x56>
     b4c:	c7 01       	movw	r24, r14
     b4e:	b8 01       	movw	r22, r16
     b50:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fpcmp_parts_f>
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <__ltsf2+0x58>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	68 96       	adiw	r28, 0x18	; 24
     b5a:	e6 e0       	ldi	r30, 0x06	; 6
     b5c:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <__epilogue_restores__+0x18>

00000b60 <__floatsisf>:
     b60:	a8 e0       	ldi	r26, 0x08	; 8
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e6 eb       	ldi	r30, 0xB6	; 182
     b66:	f5 e0       	ldi	r31, 0x05	; 5
     b68:	0c 94 b4 1e 	jmp	0x3d68	; 0x3d68 <__prologue_saves__+0x12>
     b6c:	9b 01       	movw	r18, r22
     b6e:	ac 01       	movw	r20, r24
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	89 83       	std	Y+1, r24	; 0x01
     b74:	da 01       	movw	r26, r20
     b76:	c9 01       	movw	r24, r18
     b78:	88 27       	eor	r24, r24
     b7a:	b7 fd       	sbrc	r27, 7
     b7c:	83 95       	inc	r24
     b7e:	99 27       	eor	r25, r25
     b80:	aa 27       	eor	r26, r26
     b82:	bb 27       	eor	r27, r27
     b84:	b8 2e       	mov	r11, r24
     b86:	21 15       	cp	r18, r1
     b88:	31 05       	cpc	r19, r1
     b8a:	41 05       	cpc	r20, r1
     b8c:	51 05       	cpc	r21, r1
     b8e:	19 f4       	brne	.+6      	; 0xb96 <__floatsisf+0x36>
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	3a c0       	rjmp	.+116    	; 0xc0a <__floatsisf+0xaa>
     b96:	88 23       	and	r24, r24
     b98:	a9 f0       	breq	.+42     	; 0xbc4 <__floatsisf+0x64>
     b9a:	20 30       	cpi	r18, 0x00	; 0
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	38 07       	cpc	r19, r24
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	48 07       	cpc	r20, r24
     ba4:	80 e8       	ldi	r24, 0x80	; 128
     ba6:	58 07       	cpc	r21, r24
     ba8:	29 f4       	brne	.+10     	; 0xbb4 <__floatsisf+0x54>
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	9f ec       	ldi	r25, 0xCF	; 207
     bb2:	30 c0       	rjmp	.+96     	; 0xc14 <__floatsisf+0xb4>
     bb4:	ee 24       	eor	r14, r14
     bb6:	ff 24       	eor	r15, r15
     bb8:	87 01       	movw	r16, r14
     bba:	e2 1a       	sub	r14, r18
     bbc:	f3 0a       	sbc	r15, r19
     bbe:	04 0b       	sbc	r16, r20
     bc0:	15 0b       	sbc	r17, r21
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <__floatsisf+0x68>
     bc4:	79 01       	movw	r14, r18
     bc6:	8a 01       	movw	r16, r20
     bc8:	8e e1       	ldi	r24, 0x1E	; 30
     bca:	c8 2e       	mov	r12, r24
     bcc:	d1 2c       	mov	r13, r1
     bce:	dc 82       	std	Y+4, r13	; 0x04
     bd0:	cb 82       	std	Y+3, r12	; 0x03
     bd2:	ed 82       	std	Y+5, r14	; 0x05
     bd4:	fe 82       	std	Y+6, r15	; 0x06
     bd6:	0f 83       	std	Y+7, r16	; 0x07
     bd8:	18 87       	std	Y+8, r17	; 0x08
     bda:	c8 01       	movw	r24, r16
     bdc:	b7 01       	movw	r22, r14
     bde:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__clzsi2>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	18 16       	cp	r1, r24
     be6:	19 06       	cpc	r1, r25
     be8:	84 f4       	brge	.+32     	; 0xc0a <__floatsisf+0xaa>
     bea:	08 2e       	mov	r0, r24
     bec:	04 c0       	rjmp	.+8      	; 0xbf6 <__floatsisf+0x96>
     bee:	ee 0c       	add	r14, r14
     bf0:	ff 1c       	adc	r15, r15
     bf2:	00 1f       	adc	r16, r16
     bf4:	11 1f       	adc	r17, r17
     bf6:	0a 94       	dec	r0
     bf8:	d2 f7       	brpl	.-12     	; 0xbee <__floatsisf+0x8e>
     bfa:	ed 82       	std	Y+5, r14	; 0x05
     bfc:	fe 82       	std	Y+6, r15	; 0x06
     bfe:	0f 83       	std	Y+7, r16	; 0x07
     c00:	18 87       	std	Y+8, r17	; 0x08
     c02:	c8 1a       	sub	r12, r24
     c04:	d9 0a       	sbc	r13, r25
     c06:	dc 82       	std	Y+4, r13	; 0x04
     c08:	cb 82       	std	Y+3, r12	; 0x03
     c0a:	ba 82       	std	Y+2, r11	; 0x02
     c0c:	ce 01       	movw	r24, r28
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	0e 94 a9 07 	call	0xf52	; 0xf52 <__pack_f>
     c14:	28 96       	adiw	r28, 0x08	; 8
     c16:	e9 e0       	ldi	r30, 0x09	; 9
     c18:	0c 94 d0 1e 	jmp	0x3da0	; 0x3da0 <__epilogue_restores__+0x12>

00000c1c <__fixsfsi>:
     c1c:	ac e0       	ldi	r26, 0x0C	; 12
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e4 e1       	ldi	r30, 0x14	; 20
     c22:	f6 e0       	ldi	r31, 0x06	; 6
     c24:	0c 94 bb 1e 	jmp	0x3d76	; 0x3d76 <__prologue_saves__+0x20>
     c28:	69 83       	std	Y+1, r22	; 0x01
     c2a:	7a 83       	std	Y+2, r23	; 0x02
     c2c:	8b 83       	std	Y+3, r24	; 0x03
     c2e:	9c 83       	std	Y+4, r25	; 0x04
     c30:	ce 01       	movw	r24, r28
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	be 01       	movw	r22, r28
     c36:	6b 5f       	subi	r22, 0xFB	; 251
     c38:	7f 4f       	sbci	r23, 0xFF	; 255
     c3a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__unpack_f>
     c3e:	8d 81       	ldd	r24, Y+5	; 0x05
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	61 f1       	breq	.+88     	; 0xc9c <__fixsfsi+0x80>
     c44:	82 30       	cpi	r24, 0x02	; 2
     c46:	50 f1       	brcs	.+84     	; 0xc9c <__fixsfsi+0x80>
     c48:	84 30       	cpi	r24, 0x04	; 4
     c4a:	21 f4       	brne	.+8      	; 0xc54 <__fixsfsi+0x38>
     c4c:	8e 81       	ldd	r24, Y+6	; 0x06
     c4e:	88 23       	and	r24, r24
     c50:	51 f1       	breq	.+84     	; 0xca6 <__fixsfsi+0x8a>
     c52:	2e c0       	rjmp	.+92     	; 0xcb0 <__fixsfsi+0x94>
     c54:	2f 81       	ldd	r18, Y+7	; 0x07
     c56:	38 85       	ldd	r19, Y+8	; 0x08
     c58:	37 fd       	sbrc	r19, 7
     c5a:	20 c0       	rjmp	.+64     	; 0xc9c <__fixsfsi+0x80>
     c5c:	6e 81       	ldd	r22, Y+6	; 0x06
     c5e:	2f 31       	cpi	r18, 0x1F	; 31
     c60:	31 05       	cpc	r19, r1
     c62:	1c f0       	brlt	.+6      	; 0xc6a <__fixsfsi+0x4e>
     c64:	66 23       	and	r22, r22
     c66:	f9 f0       	breq	.+62     	; 0xca6 <__fixsfsi+0x8a>
     c68:	23 c0       	rjmp	.+70     	; 0xcb0 <__fixsfsi+0x94>
     c6a:	8e e1       	ldi	r24, 0x1E	; 30
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	82 1b       	sub	r24, r18
     c70:	93 0b       	sbc	r25, r19
     c72:	29 85       	ldd	r18, Y+9	; 0x09
     c74:	3a 85       	ldd	r19, Y+10	; 0x0a
     c76:	4b 85       	ldd	r20, Y+11	; 0x0b
     c78:	5c 85       	ldd	r21, Y+12	; 0x0c
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__fixsfsi+0x68>
     c7c:	56 95       	lsr	r21
     c7e:	47 95       	ror	r20
     c80:	37 95       	ror	r19
     c82:	27 95       	ror	r18
     c84:	8a 95       	dec	r24
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__fixsfsi+0x60>
     c88:	66 23       	and	r22, r22
     c8a:	b1 f0       	breq	.+44     	; 0xcb8 <__fixsfsi+0x9c>
     c8c:	50 95       	com	r21
     c8e:	40 95       	com	r20
     c90:	30 95       	com	r19
     c92:	21 95       	neg	r18
     c94:	3f 4f       	sbci	r19, 0xFF	; 255
     c96:	4f 4f       	sbci	r20, 0xFF	; 255
     c98:	5f 4f       	sbci	r21, 0xFF	; 255
     c9a:	0e c0       	rjmp	.+28     	; 0xcb8 <__fixsfsi+0x9c>
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	09 c0       	rjmp	.+18     	; 0xcb8 <__fixsfsi+0x9c>
     ca6:	2f ef       	ldi	r18, 0xFF	; 255
     ca8:	3f ef       	ldi	r19, 0xFF	; 255
     caa:	4f ef       	ldi	r20, 0xFF	; 255
     cac:	5f e7       	ldi	r21, 0x7F	; 127
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <__fixsfsi+0x9c>
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	50 e8       	ldi	r21, 0x80	; 128
     cb8:	b9 01       	movw	r22, r18
     cba:	ca 01       	movw	r24, r20
     cbc:	2c 96       	adiw	r28, 0x0c	; 12
     cbe:	e2 e0       	ldi	r30, 0x02	; 2
     cc0:	0c 94 d7 1e 	jmp	0x3dae	; 0x3dae <__epilogue_restores__+0x20>

00000cc4 <__floatunsisf>:
     cc4:	a8 e0       	ldi	r26, 0x08	; 8
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e8 e6       	ldi	r30, 0x68	; 104
     cca:	f6 e0       	ldi	r31, 0x06	; 6
     ccc:	0c 94 b3 1e 	jmp	0x3d66	; 0x3d66 <__prologue_saves__+0x10>
     cd0:	7b 01       	movw	r14, r22
     cd2:	8c 01       	movw	r16, r24
     cd4:	61 15       	cp	r22, r1
     cd6:	71 05       	cpc	r23, r1
     cd8:	81 05       	cpc	r24, r1
     cda:	91 05       	cpc	r25, r1
     cdc:	19 f4       	brne	.+6      	; 0xce4 <__floatunsisf+0x20>
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	60 c0       	rjmp	.+192    	; 0xda4 <__floatunsisf+0xe0>
     ce4:	83 e0       	ldi	r24, 0x03	; 3
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	8e e1       	ldi	r24, 0x1E	; 30
     cea:	c8 2e       	mov	r12, r24
     cec:	d1 2c       	mov	r13, r1
     cee:	dc 82       	std	Y+4, r13	; 0x04
     cf0:	cb 82       	std	Y+3, r12	; 0x03
     cf2:	ed 82       	std	Y+5, r14	; 0x05
     cf4:	fe 82       	std	Y+6, r15	; 0x06
     cf6:	0f 83       	std	Y+7, r16	; 0x07
     cf8:	18 87       	std	Y+8, r17	; 0x08
     cfa:	c8 01       	movw	r24, r16
     cfc:	b7 01       	movw	r22, r14
     cfe:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__clzsi2>
     d02:	fc 01       	movw	r30, r24
     d04:	31 97       	sbiw	r30, 0x01	; 1
     d06:	f7 ff       	sbrs	r31, 7
     d08:	3b c0       	rjmp	.+118    	; 0xd80 <__floatunsisf+0xbc>
     d0a:	22 27       	eor	r18, r18
     d0c:	33 27       	eor	r19, r19
     d0e:	2e 1b       	sub	r18, r30
     d10:	3f 0b       	sbc	r19, r31
     d12:	57 01       	movw	r10, r14
     d14:	68 01       	movw	r12, r16
     d16:	02 2e       	mov	r0, r18
     d18:	04 c0       	rjmp	.+8      	; 0xd22 <__floatunsisf+0x5e>
     d1a:	d6 94       	lsr	r13
     d1c:	c7 94       	ror	r12
     d1e:	b7 94       	ror	r11
     d20:	a7 94       	ror	r10
     d22:	0a 94       	dec	r0
     d24:	d2 f7       	brpl	.-12     	; 0xd1a <__floatunsisf+0x56>
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	a0 e0       	ldi	r26, 0x00	; 0
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	04 c0       	rjmp	.+8      	; 0xd40 <__floatunsisf+0x7c>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	aa 1f       	adc	r26, r26
     d3e:	bb 1f       	adc	r27, r27
     d40:	2a 95       	dec	r18
     d42:	d2 f7       	brpl	.-12     	; 0xd38 <__floatunsisf+0x74>
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	a1 09       	sbc	r26, r1
     d48:	b1 09       	sbc	r27, r1
     d4a:	8e 21       	and	r24, r14
     d4c:	9f 21       	and	r25, r15
     d4e:	a0 23       	and	r26, r16
     d50:	b1 23       	and	r27, r17
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	a1 05       	cpc	r26, r1
     d56:	b1 05       	cpc	r27, r1
     d58:	21 f0       	breq	.+8      	; 0xd62 <__floatunsisf+0x9e>
     d5a:	41 e0       	ldi	r20, 0x01	; 1
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	4a 29       	or	r20, r10
     d64:	5b 29       	or	r21, r11
     d66:	6c 29       	or	r22, r12
     d68:	7d 29       	or	r23, r13
     d6a:	4d 83       	std	Y+5, r20	; 0x05
     d6c:	5e 83       	std	Y+6, r21	; 0x06
     d6e:	6f 83       	std	Y+7, r22	; 0x07
     d70:	78 87       	std	Y+8, r23	; 0x08
     d72:	8e e1       	ldi	r24, 0x1E	; 30
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	8e 1b       	sub	r24, r30
     d78:	9f 0b       	sbc	r25, r31
     d7a:	9c 83       	std	Y+4, r25	; 0x04
     d7c:	8b 83       	std	Y+3, r24	; 0x03
     d7e:	12 c0       	rjmp	.+36     	; 0xda4 <__floatunsisf+0xe0>
     d80:	30 97       	sbiw	r30, 0x00	; 0
     d82:	81 f0       	breq	.+32     	; 0xda4 <__floatunsisf+0xe0>
     d84:	0e 2e       	mov	r0, r30
     d86:	04 c0       	rjmp	.+8      	; 0xd90 <__floatunsisf+0xcc>
     d88:	ee 0c       	add	r14, r14
     d8a:	ff 1c       	adc	r15, r15
     d8c:	00 1f       	adc	r16, r16
     d8e:	11 1f       	adc	r17, r17
     d90:	0a 94       	dec	r0
     d92:	d2 f7       	brpl	.-12     	; 0xd88 <__floatunsisf+0xc4>
     d94:	ed 82       	std	Y+5, r14	; 0x05
     d96:	fe 82       	std	Y+6, r15	; 0x06
     d98:	0f 83       	std	Y+7, r16	; 0x07
     d9a:	18 87       	std	Y+8, r17	; 0x08
     d9c:	ce 1a       	sub	r12, r30
     d9e:	df 0a       	sbc	r13, r31
     da0:	dc 82       	std	Y+4, r13	; 0x04
     da2:	cb 82       	std	Y+3, r12	; 0x03
     da4:	1a 82       	std	Y+2, r1	; 0x02
     da6:	ce 01       	movw	r24, r28
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	0e 94 a9 07 	call	0xf52	; 0xf52 <__pack_f>
     dae:	28 96       	adiw	r28, 0x08	; 8
     db0:	ea e0       	ldi	r30, 0x0A	; 10
     db2:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <__epilogue_restores__+0x10>

00000db6 <__lshrdi3>:
     db6:	ef 92       	push	r14
     db8:	ff 92       	push	r15
     dba:	0f 93       	push	r16
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	60 97       	sbiw	r28, 0x10	; 16
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	a8 2f       	mov	r26, r24
     dd2:	00 23       	and	r16, r16
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <__lshrdi3+0x22>
     dd6:	61 c0       	rjmp	.+194    	; 0xe9a <__lshrdi3+0xe4>
     dd8:	7e 01       	movw	r14, r28
     dda:	08 94       	sec
     ddc:	e1 1c       	adc	r14, r1
     dde:	f1 1c       	adc	r15, r1
     de0:	88 e0       	ldi	r24, 0x08	; 8
     de2:	f7 01       	movw	r30, r14
     de4:	11 92       	st	Z+, r1
     de6:	8a 95       	dec	r24
     de8:	e9 f7       	brne	.-6      	; 0xde4 <__lshrdi3+0x2e>
     dea:	29 83       	std	Y+1, r18	; 0x01
     dec:	3a 83       	std	Y+2, r19	; 0x02
     dee:	4b 83       	std	Y+3, r20	; 0x03
     df0:	5c 83       	std	Y+4, r21	; 0x04
     df2:	6d 83       	std	Y+5, r22	; 0x05
     df4:	7e 83       	std	Y+6, r23	; 0x06
     df6:	af 83       	std	Y+7, r26	; 0x07
     df8:	98 87       	std	Y+8, r25	; 0x08
     dfa:	80 e2       	ldi	r24, 0x20	; 32
     dfc:	80 1b       	sub	r24, r16
     dfe:	e8 2f       	mov	r30, r24
     e00:	ff 27       	eor	r31, r31
     e02:	e7 fd       	sbrc	r30, 7
     e04:	f0 95       	com	r31
     e06:	4d 81       	ldd	r20, Y+5	; 0x05
     e08:	5e 81       	ldd	r21, Y+6	; 0x06
     e0a:	6f 81       	ldd	r22, Y+7	; 0x07
     e0c:	78 85       	ldd	r23, Y+8	; 0x08
     e0e:	18 16       	cp	r1, r24
     e10:	84 f0       	brlt	.+32     	; 0xe32 <__lshrdi3+0x7c>
     e12:	1d 86       	std	Y+13, r1	; 0x0d
     e14:	1e 86       	std	Y+14, r1	; 0x0e
     e16:	1f 86       	std	Y+15, r1	; 0x0f
     e18:	18 8a       	std	Y+16, r1	; 0x10
     e1a:	88 27       	eor	r24, r24
     e1c:	99 27       	eor	r25, r25
     e1e:	8e 1b       	sub	r24, r30
     e20:	9f 0b       	sbc	r25, r31
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <__lshrdi3+0x76>
     e24:	76 95       	lsr	r23
     e26:	67 95       	ror	r22
     e28:	57 95       	ror	r21
     e2a:	47 95       	ror	r20
     e2c:	8a 95       	dec	r24
     e2e:	d2 f7       	brpl	.-12     	; 0xe24 <__lshrdi3+0x6e>
     e30:	28 c0       	rjmp	.+80     	; 0xe82 <__lshrdi3+0xcc>
     e32:	20 2f       	mov	r18, r16
     e34:	33 27       	eor	r19, r19
     e36:	27 fd       	sbrc	r18, 7
     e38:	30 95       	com	r19
     e3a:	db 01       	movw	r26, r22
     e3c:	ca 01       	movw	r24, r20
     e3e:	02 2e       	mov	r0, r18
     e40:	04 c0       	rjmp	.+8      	; 0xe4a <__lshrdi3+0x94>
     e42:	b6 95       	lsr	r27
     e44:	a7 95       	ror	r26
     e46:	97 95       	ror	r25
     e48:	87 95       	ror	r24
     e4a:	0a 94       	dec	r0
     e4c:	d2 f7       	brpl	.-12     	; 0xe42 <__lshrdi3+0x8c>
     e4e:	8d 87       	std	Y+13, r24	; 0x0d
     e50:	9e 87       	std	Y+14, r25	; 0x0e
     e52:	af 87       	std	Y+15, r26	; 0x0f
     e54:	b8 8b       	std	Y+16, r27	; 0x10
     e56:	04 c0       	rjmp	.+8      	; 0xe60 <__lshrdi3+0xaa>
     e58:	44 0f       	add	r20, r20
     e5a:	55 1f       	adc	r21, r21
     e5c:	66 1f       	adc	r22, r22
     e5e:	77 1f       	adc	r23, r23
     e60:	ea 95       	dec	r30
     e62:	d2 f7       	brpl	.-12     	; 0xe58 <__lshrdi3+0xa2>
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	9a 81       	ldd	r25, Y+2	; 0x02
     e68:	ab 81       	ldd	r26, Y+3	; 0x03
     e6a:	bc 81       	ldd	r27, Y+4	; 0x04
     e6c:	04 c0       	rjmp	.+8      	; 0xe76 <__lshrdi3+0xc0>
     e6e:	b6 95       	lsr	r27
     e70:	a7 95       	ror	r26
     e72:	97 95       	ror	r25
     e74:	87 95       	ror	r24
     e76:	2a 95       	dec	r18
     e78:	d2 f7       	brpl	.-12     	; 0xe6e <__lshrdi3+0xb8>
     e7a:	48 2b       	or	r20, r24
     e7c:	59 2b       	or	r21, r25
     e7e:	6a 2b       	or	r22, r26
     e80:	7b 2b       	or	r23, r27
     e82:	49 87       	std	Y+9, r20	; 0x09
     e84:	5a 87       	std	Y+10, r21	; 0x0a
     e86:	6b 87       	std	Y+11, r22	; 0x0b
     e88:	7c 87       	std	Y+12, r23	; 0x0c
     e8a:	29 85       	ldd	r18, Y+9	; 0x09
     e8c:	3a 85       	ldd	r19, Y+10	; 0x0a
     e8e:	4b 85       	ldd	r20, Y+11	; 0x0b
     e90:	5c 85       	ldd	r21, Y+12	; 0x0c
     e92:	6d 85       	ldd	r22, Y+13	; 0x0d
     e94:	7e 85       	ldd	r23, Y+14	; 0x0e
     e96:	af 85       	ldd	r26, Y+15	; 0x0f
     e98:	98 89       	ldd	r25, Y+16	; 0x10
     e9a:	8a 2f       	mov	r24, r26
     e9c:	60 96       	adiw	r28, 0x10	; 16
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	0f 91       	pop	r16
     eae:	ff 90       	pop	r15
     eb0:	ef 90       	pop	r14
     eb2:	08 95       	ret

00000eb4 <__clzsi2>:
     eb4:	ef 92       	push	r14
     eb6:	ff 92       	push	r15
     eb8:	0f 93       	push	r16
     eba:	1f 93       	push	r17
     ebc:	7b 01       	movw	r14, r22
     ebe:	8c 01       	movw	r16, r24
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	e8 16       	cp	r14, r24
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	f8 06       	cpc	r15, r24
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	08 07       	cpc	r16, r24
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	18 07       	cpc	r17, r24
     ed0:	88 f4       	brcc	.+34     	; 0xef4 <__clzsi2+0x40>
     ed2:	8f ef       	ldi	r24, 0xFF	; 255
     ed4:	e8 16       	cp	r14, r24
     ed6:	f1 04       	cpc	r15, r1
     ed8:	01 05       	cpc	r16, r1
     eda:	11 05       	cpc	r17, r1
     edc:	31 f0       	breq	.+12     	; 0xeea <__clzsi2+0x36>
     ede:	28 f0       	brcs	.+10     	; 0xeea <__clzsi2+0x36>
     ee0:	88 e0       	ldi	r24, 0x08	; 8
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	a0 e0       	ldi	r26, 0x00	; 0
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	17 c0       	rjmp	.+46     	; 0xf18 <__clzsi2+0x64>
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	a0 e0       	ldi	r26, 0x00	; 0
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	12 c0       	rjmp	.+36     	; 0xf18 <__clzsi2+0x64>
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	e8 16       	cp	r14, r24
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	f8 06       	cpc	r15, r24
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	08 07       	cpc	r16, r24
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	18 07       	cpc	r17, r24
     f04:	28 f0       	brcs	.+10     	; 0xf10 <__clzsi2+0x5c>
     f06:	88 e1       	ldi	r24, 0x18	; 24
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	a0 e0       	ldi	r26, 0x00	; 0
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	04 c0       	rjmp	.+8      	; 0xf18 <__clzsi2+0x64>
     f10:	80 e1       	ldi	r24, 0x10	; 16
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	a0 e0       	ldi	r26, 0x00	; 0
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	20 e2       	ldi	r18, 0x20	; 32
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	28 1b       	sub	r18, r24
     f22:	39 0b       	sbc	r19, r25
     f24:	4a 0b       	sbc	r20, r26
     f26:	5b 0b       	sbc	r21, r27
     f28:	04 c0       	rjmp	.+8      	; 0xf32 <__clzsi2+0x7e>
     f2a:	16 95       	lsr	r17
     f2c:	07 95       	ror	r16
     f2e:	f7 94       	ror	r15
     f30:	e7 94       	ror	r14
     f32:	8a 95       	dec	r24
     f34:	d2 f7       	brpl	.-12     	; 0xf2a <__clzsi2+0x76>
     f36:	f7 01       	movw	r30, r14
     f38:	e8 59       	subi	r30, 0x98	; 152
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	80 81       	ld	r24, Z
     f3e:	28 1b       	sub	r18, r24
     f40:	31 09       	sbc	r19, r1
     f42:	41 09       	sbc	r20, r1
     f44:	51 09       	sbc	r21, r1
     f46:	c9 01       	movw	r24, r18
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	ff 90       	pop	r15
     f4e:	ef 90       	pop	r14
     f50:	08 95       	ret

00000f52 <__pack_f>:
     f52:	df 92       	push	r13
     f54:	ef 92       	push	r14
     f56:	ff 92       	push	r15
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	fc 01       	movw	r30, r24
     f5e:	e4 80       	ldd	r14, Z+4	; 0x04
     f60:	f5 80       	ldd	r15, Z+5	; 0x05
     f62:	06 81       	ldd	r16, Z+6	; 0x06
     f64:	17 81       	ldd	r17, Z+7	; 0x07
     f66:	d1 80       	ldd	r13, Z+1	; 0x01
     f68:	80 81       	ld	r24, Z
     f6a:	82 30       	cpi	r24, 0x02	; 2
     f6c:	48 f4       	brcc	.+18     	; 0xf80 <__pack_f+0x2e>
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	a0 e1       	ldi	r26, 0x10	; 16
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e8 2a       	or	r14, r24
     f78:	f9 2a       	or	r15, r25
     f7a:	0a 2b       	or	r16, r26
     f7c:	1b 2b       	or	r17, r27
     f7e:	a5 c0       	rjmp	.+330    	; 0x10ca <__pack_f+0x178>
     f80:	84 30       	cpi	r24, 0x04	; 4
     f82:	09 f4       	brne	.+2      	; 0xf86 <__pack_f+0x34>
     f84:	9f c0       	rjmp	.+318    	; 0x10c4 <__pack_f+0x172>
     f86:	82 30       	cpi	r24, 0x02	; 2
     f88:	21 f4       	brne	.+8      	; 0xf92 <__pack_f+0x40>
     f8a:	ee 24       	eor	r14, r14
     f8c:	ff 24       	eor	r15, r15
     f8e:	87 01       	movw	r16, r14
     f90:	05 c0       	rjmp	.+10     	; 0xf9c <__pack_f+0x4a>
     f92:	e1 14       	cp	r14, r1
     f94:	f1 04       	cpc	r15, r1
     f96:	01 05       	cpc	r16, r1
     f98:	11 05       	cpc	r17, r1
     f9a:	19 f4       	brne	.+6      	; 0xfa2 <__pack_f+0x50>
     f9c:	e0 e0       	ldi	r30, 0x00	; 0
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	96 c0       	rjmp	.+300    	; 0x10ce <__pack_f+0x17c>
     fa2:	62 81       	ldd	r22, Z+2	; 0x02
     fa4:	73 81       	ldd	r23, Z+3	; 0x03
     fa6:	9f ef       	ldi	r25, 0xFF	; 255
     fa8:	62 38       	cpi	r22, 0x82	; 130
     faa:	79 07       	cpc	r23, r25
     fac:	0c f0       	brlt	.+2      	; 0xfb0 <__pack_f+0x5e>
     fae:	5b c0       	rjmp	.+182    	; 0x1066 <__pack_f+0x114>
     fb0:	22 e8       	ldi	r18, 0x82	; 130
     fb2:	3f ef       	ldi	r19, 0xFF	; 255
     fb4:	26 1b       	sub	r18, r22
     fb6:	37 0b       	sbc	r19, r23
     fb8:	2a 31       	cpi	r18, 0x1A	; 26
     fba:	31 05       	cpc	r19, r1
     fbc:	2c f0       	brlt	.+10     	; 0xfc8 <__pack_f+0x76>
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	2a c0       	rjmp	.+84     	; 0x101c <__pack_f+0xca>
     fc8:	b8 01       	movw	r22, r16
     fca:	a7 01       	movw	r20, r14
     fcc:	02 2e       	mov	r0, r18
     fce:	04 c0       	rjmp	.+8      	; 0xfd8 <__pack_f+0x86>
     fd0:	76 95       	lsr	r23
     fd2:	67 95       	ror	r22
     fd4:	57 95       	ror	r21
     fd6:	47 95       	ror	r20
     fd8:	0a 94       	dec	r0
     fda:	d2 f7       	brpl	.-12     	; 0xfd0 <__pack_f+0x7e>
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	a0 e0       	ldi	r26, 0x00	; 0
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	04 c0       	rjmp	.+8      	; 0xfee <__pack_f+0x9c>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	aa 1f       	adc	r26, r26
     fec:	bb 1f       	adc	r27, r27
     fee:	2a 95       	dec	r18
     ff0:	d2 f7       	brpl	.-12     	; 0xfe6 <__pack_f+0x94>
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	a1 09       	sbc	r26, r1
     ff6:	b1 09       	sbc	r27, r1
     ff8:	8e 21       	and	r24, r14
     ffa:	9f 21       	and	r25, r15
     ffc:	a0 23       	and	r26, r16
     ffe:	b1 23       	and	r27, r17
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	a1 05       	cpc	r26, r1
    1004:	b1 05       	cpc	r27, r1
    1006:	21 f0       	breq	.+8      	; 0x1010 <__pack_f+0xbe>
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a0 e0       	ldi	r26, 0x00	; 0
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	9a 01       	movw	r18, r20
    1012:	ab 01       	movw	r20, r22
    1014:	28 2b       	or	r18, r24
    1016:	39 2b       	or	r19, r25
    1018:	4a 2b       	or	r20, r26
    101a:	5b 2b       	or	r21, r27
    101c:	da 01       	movw	r26, r20
    101e:	c9 01       	movw	r24, r18
    1020:	8f 77       	andi	r24, 0x7F	; 127
    1022:	90 70       	andi	r25, 0x00	; 0
    1024:	a0 70       	andi	r26, 0x00	; 0
    1026:	b0 70       	andi	r27, 0x00	; 0
    1028:	80 34       	cpi	r24, 0x40	; 64
    102a:	91 05       	cpc	r25, r1
    102c:	a1 05       	cpc	r26, r1
    102e:	b1 05       	cpc	r27, r1
    1030:	39 f4       	brne	.+14     	; 0x1040 <__pack_f+0xee>
    1032:	27 ff       	sbrs	r18, 7
    1034:	09 c0       	rjmp	.+18     	; 0x1048 <__pack_f+0xf6>
    1036:	20 5c       	subi	r18, 0xC0	; 192
    1038:	3f 4f       	sbci	r19, 0xFF	; 255
    103a:	4f 4f       	sbci	r20, 0xFF	; 255
    103c:	5f 4f       	sbci	r21, 0xFF	; 255
    103e:	04 c0       	rjmp	.+8      	; 0x1048 <__pack_f+0xf6>
    1040:	21 5c       	subi	r18, 0xC1	; 193
    1042:	3f 4f       	sbci	r19, 0xFF	; 255
    1044:	4f 4f       	sbci	r20, 0xFF	; 255
    1046:	5f 4f       	sbci	r21, 0xFF	; 255
    1048:	e0 e0       	ldi	r30, 0x00	; 0
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	20 30       	cpi	r18, 0x00	; 0
    104e:	a0 e0       	ldi	r26, 0x00	; 0
    1050:	3a 07       	cpc	r19, r26
    1052:	a0 e0       	ldi	r26, 0x00	; 0
    1054:	4a 07       	cpc	r20, r26
    1056:	a0 e4       	ldi	r26, 0x40	; 64
    1058:	5a 07       	cpc	r21, r26
    105a:	10 f0       	brcs	.+4      	; 0x1060 <__pack_f+0x10e>
    105c:	e1 e0       	ldi	r30, 0x01	; 1
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	79 01       	movw	r14, r18
    1062:	8a 01       	movw	r16, r20
    1064:	27 c0       	rjmp	.+78     	; 0x10b4 <__pack_f+0x162>
    1066:	60 38       	cpi	r22, 0x80	; 128
    1068:	71 05       	cpc	r23, r1
    106a:	64 f5       	brge	.+88     	; 0x10c4 <__pack_f+0x172>
    106c:	fb 01       	movw	r30, r22
    106e:	e1 58       	subi	r30, 0x81	; 129
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	d8 01       	movw	r26, r16
    1074:	c7 01       	movw	r24, r14
    1076:	8f 77       	andi	r24, 0x7F	; 127
    1078:	90 70       	andi	r25, 0x00	; 0
    107a:	a0 70       	andi	r26, 0x00	; 0
    107c:	b0 70       	andi	r27, 0x00	; 0
    107e:	80 34       	cpi	r24, 0x40	; 64
    1080:	91 05       	cpc	r25, r1
    1082:	a1 05       	cpc	r26, r1
    1084:	b1 05       	cpc	r27, r1
    1086:	39 f4       	brne	.+14     	; 0x1096 <__pack_f+0x144>
    1088:	e7 fe       	sbrs	r14, 7
    108a:	0d c0       	rjmp	.+26     	; 0x10a6 <__pack_f+0x154>
    108c:	80 e4       	ldi	r24, 0x40	; 64
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	a0 e0       	ldi	r26, 0x00	; 0
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	04 c0       	rjmp	.+8      	; 0x109e <__pack_f+0x14c>
    1096:	8f e3       	ldi	r24, 0x3F	; 63
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	a0 e0       	ldi	r26, 0x00	; 0
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e8 0e       	add	r14, r24
    10a0:	f9 1e       	adc	r15, r25
    10a2:	0a 1f       	adc	r16, r26
    10a4:	1b 1f       	adc	r17, r27
    10a6:	17 ff       	sbrs	r17, 7
    10a8:	05 c0       	rjmp	.+10     	; 0x10b4 <__pack_f+0x162>
    10aa:	16 95       	lsr	r17
    10ac:	07 95       	ror	r16
    10ae:	f7 94       	ror	r15
    10b0:	e7 94       	ror	r14
    10b2:	31 96       	adiw	r30, 0x01	; 1
    10b4:	87 e0       	ldi	r24, 0x07	; 7
    10b6:	16 95       	lsr	r17
    10b8:	07 95       	ror	r16
    10ba:	f7 94       	ror	r15
    10bc:	e7 94       	ror	r14
    10be:	8a 95       	dec	r24
    10c0:	d1 f7       	brne	.-12     	; 0x10b6 <__pack_f+0x164>
    10c2:	05 c0       	rjmp	.+10     	; 0x10ce <__pack_f+0x17c>
    10c4:	ee 24       	eor	r14, r14
    10c6:	ff 24       	eor	r15, r15
    10c8:	87 01       	movw	r16, r14
    10ca:	ef ef       	ldi	r30, 0xFF	; 255
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	6e 2f       	mov	r22, r30
    10d0:	67 95       	ror	r22
    10d2:	66 27       	eor	r22, r22
    10d4:	67 95       	ror	r22
    10d6:	90 2f       	mov	r25, r16
    10d8:	9f 77       	andi	r25, 0x7F	; 127
    10da:	d7 94       	ror	r13
    10dc:	dd 24       	eor	r13, r13
    10de:	d7 94       	ror	r13
    10e0:	8e 2f       	mov	r24, r30
    10e2:	86 95       	lsr	r24
    10e4:	49 2f       	mov	r20, r25
    10e6:	46 2b       	or	r20, r22
    10e8:	58 2f       	mov	r21, r24
    10ea:	5d 29       	or	r21, r13
    10ec:	b7 01       	movw	r22, r14
    10ee:	ca 01       	movw	r24, r20
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	ff 90       	pop	r15
    10f6:	ef 90       	pop	r14
    10f8:	df 90       	pop	r13
    10fa:	08 95       	ret

000010fc <__unpack_f>:
    10fc:	fc 01       	movw	r30, r24
    10fe:	db 01       	movw	r26, r22
    1100:	40 81       	ld	r20, Z
    1102:	51 81       	ldd	r21, Z+1	; 0x01
    1104:	22 81       	ldd	r18, Z+2	; 0x02
    1106:	62 2f       	mov	r22, r18
    1108:	6f 77       	andi	r22, 0x7F	; 127
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	22 1f       	adc	r18, r18
    110e:	22 27       	eor	r18, r18
    1110:	22 1f       	adc	r18, r18
    1112:	93 81       	ldd	r25, Z+3	; 0x03
    1114:	89 2f       	mov	r24, r25
    1116:	88 0f       	add	r24, r24
    1118:	82 2b       	or	r24, r18
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	99 1f       	adc	r25, r25
    1120:	99 27       	eor	r25, r25
    1122:	99 1f       	adc	r25, r25
    1124:	11 96       	adiw	r26, 0x01	; 1
    1126:	9c 93       	st	X, r25
    1128:	11 97       	sbiw	r26, 0x01	; 1
    112a:	21 15       	cp	r18, r1
    112c:	31 05       	cpc	r19, r1
    112e:	a9 f5       	brne	.+106    	; 0x119a <__unpack_f+0x9e>
    1130:	41 15       	cp	r20, r1
    1132:	51 05       	cpc	r21, r1
    1134:	61 05       	cpc	r22, r1
    1136:	71 05       	cpc	r23, r1
    1138:	11 f4       	brne	.+4      	; 0x113e <__unpack_f+0x42>
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	37 c0       	rjmp	.+110    	; 0x11ac <__unpack_f+0xb0>
    113e:	82 e8       	ldi	r24, 0x82	; 130
    1140:	9f ef       	ldi	r25, 0xFF	; 255
    1142:	13 96       	adiw	r26, 0x03	; 3
    1144:	9c 93       	st	X, r25
    1146:	8e 93       	st	-X, r24
    1148:	12 97       	sbiw	r26, 0x02	; 2
    114a:	9a 01       	movw	r18, r20
    114c:	ab 01       	movw	r20, r22
    114e:	67 e0       	ldi	r22, 0x07	; 7
    1150:	22 0f       	add	r18, r18
    1152:	33 1f       	adc	r19, r19
    1154:	44 1f       	adc	r20, r20
    1156:	55 1f       	adc	r21, r21
    1158:	6a 95       	dec	r22
    115a:	d1 f7       	brne	.-12     	; 0x1150 <__unpack_f+0x54>
    115c:	83 e0       	ldi	r24, 0x03	; 3
    115e:	8c 93       	st	X, r24
    1160:	0d c0       	rjmp	.+26     	; 0x117c <__unpack_f+0x80>
    1162:	22 0f       	add	r18, r18
    1164:	33 1f       	adc	r19, r19
    1166:	44 1f       	adc	r20, r20
    1168:	55 1f       	adc	r21, r21
    116a:	12 96       	adiw	r26, 0x02	; 2
    116c:	8d 91       	ld	r24, X+
    116e:	9c 91       	ld	r25, X
    1170:	13 97       	sbiw	r26, 0x03	; 3
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	13 96       	adiw	r26, 0x03	; 3
    1176:	9c 93       	st	X, r25
    1178:	8e 93       	st	-X, r24
    117a:	12 97       	sbiw	r26, 0x02	; 2
    117c:	20 30       	cpi	r18, 0x00	; 0
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	38 07       	cpc	r19, r24
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	48 07       	cpc	r20, r24
    1186:	80 e4       	ldi	r24, 0x40	; 64
    1188:	58 07       	cpc	r21, r24
    118a:	58 f3       	brcs	.-42     	; 0x1162 <__unpack_f+0x66>
    118c:	14 96       	adiw	r26, 0x04	; 4
    118e:	2d 93       	st	X+, r18
    1190:	3d 93       	st	X+, r19
    1192:	4d 93       	st	X+, r20
    1194:	5c 93       	st	X, r21
    1196:	17 97       	sbiw	r26, 0x07	; 7
    1198:	08 95       	ret
    119a:	2f 3f       	cpi	r18, 0xFF	; 255
    119c:	31 05       	cpc	r19, r1
    119e:	79 f4       	brne	.+30     	; 0x11be <__unpack_f+0xc2>
    11a0:	41 15       	cp	r20, r1
    11a2:	51 05       	cpc	r21, r1
    11a4:	61 05       	cpc	r22, r1
    11a6:	71 05       	cpc	r23, r1
    11a8:	19 f4       	brne	.+6      	; 0x11b0 <__unpack_f+0xb4>
    11aa:	84 e0       	ldi	r24, 0x04	; 4
    11ac:	8c 93       	st	X, r24
    11ae:	08 95       	ret
    11b0:	64 ff       	sbrs	r22, 4
    11b2:	03 c0       	rjmp	.+6      	; 0x11ba <__unpack_f+0xbe>
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	8c 93       	st	X, r24
    11b8:	12 c0       	rjmp	.+36     	; 0x11de <__unpack_f+0xe2>
    11ba:	1c 92       	st	X, r1
    11bc:	10 c0       	rjmp	.+32     	; 0x11de <__unpack_f+0xe2>
    11be:	2f 57       	subi	r18, 0x7F	; 127
    11c0:	30 40       	sbci	r19, 0x00	; 0
    11c2:	13 96       	adiw	r26, 0x03	; 3
    11c4:	3c 93       	st	X, r19
    11c6:	2e 93       	st	-X, r18
    11c8:	12 97       	sbiw	r26, 0x02	; 2
    11ca:	83 e0       	ldi	r24, 0x03	; 3
    11cc:	8c 93       	st	X, r24
    11ce:	87 e0       	ldi	r24, 0x07	; 7
    11d0:	44 0f       	add	r20, r20
    11d2:	55 1f       	adc	r21, r21
    11d4:	66 1f       	adc	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	8a 95       	dec	r24
    11da:	d1 f7       	brne	.-12     	; 0x11d0 <__unpack_f+0xd4>
    11dc:	70 64       	ori	r23, 0x40	; 64
    11de:	14 96       	adiw	r26, 0x04	; 4
    11e0:	4d 93       	st	X+, r20
    11e2:	5d 93       	st	X+, r21
    11e4:	6d 93       	st	X+, r22
    11e6:	7c 93       	st	X, r23
    11e8:	17 97       	sbiw	r26, 0x07	; 7
    11ea:	08 95       	ret

000011ec <__fpcmp_parts_f>:
    11ec:	1f 93       	push	r17
    11ee:	dc 01       	movw	r26, r24
    11f0:	fb 01       	movw	r30, r22
    11f2:	9c 91       	ld	r25, X
    11f4:	92 30       	cpi	r25, 0x02	; 2
    11f6:	08 f4       	brcc	.+2      	; 0x11fa <__fpcmp_parts_f+0xe>
    11f8:	47 c0       	rjmp	.+142    	; 0x1288 <__fpcmp_parts_f+0x9c>
    11fa:	80 81       	ld	r24, Z
    11fc:	82 30       	cpi	r24, 0x02	; 2
    11fe:	08 f4       	brcc	.+2      	; 0x1202 <__fpcmp_parts_f+0x16>
    1200:	43 c0       	rjmp	.+134    	; 0x1288 <__fpcmp_parts_f+0x9c>
    1202:	94 30       	cpi	r25, 0x04	; 4
    1204:	51 f4       	brne	.+20     	; 0x121a <__fpcmp_parts_f+0x2e>
    1206:	11 96       	adiw	r26, 0x01	; 1
    1208:	1c 91       	ld	r17, X
    120a:	84 30       	cpi	r24, 0x04	; 4
    120c:	99 f5       	brne	.+102    	; 0x1274 <__fpcmp_parts_f+0x88>
    120e:	81 81       	ldd	r24, Z+1	; 0x01
    1210:	68 2f       	mov	r22, r24
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	61 1b       	sub	r22, r17
    1216:	71 09       	sbc	r23, r1
    1218:	3f c0       	rjmp	.+126    	; 0x1298 <__fpcmp_parts_f+0xac>
    121a:	84 30       	cpi	r24, 0x04	; 4
    121c:	21 f0       	breq	.+8      	; 0x1226 <__fpcmp_parts_f+0x3a>
    121e:	92 30       	cpi	r25, 0x02	; 2
    1220:	31 f4       	brne	.+12     	; 0x122e <__fpcmp_parts_f+0x42>
    1222:	82 30       	cpi	r24, 0x02	; 2
    1224:	b9 f1       	breq	.+110    	; 0x1294 <__fpcmp_parts_f+0xa8>
    1226:	81 81       	ldd	r24, Z+1	; 0x01
    1228:	88 23       	and	r24, r24
    122a:	89 f1       	breq	.+98     	; 0x128e <__fpcmp_parts_f+0xa2>
    122c:	2d c0       	rjmp	.+90     	; 0x1288 <__fpcmp_parts_f+0x9c>
    122e:	11 96       	adiw	r26, 0x01	; 1
    1230:	1c 91       	ld	r17, X
    1232:	11 97       	sbiw	r26, 0x01	; 1
    1234:	82 30       	cpi	r24, 0x02	; 2
    1236:	f1 f0       	breq	.+60     	; 0x1274 <__fpcmp_parts_f+0x88>
    1238:	81 81       	ldd	r24, Z+1	; 0x01
    123a:	18 17       	cp	r17, r24
    123c:	d9 f4       	brne	.+54     	; 0x1274 <__fpcmp_parts_f+0x88>
    123e:	12 96       	adiw	r26, 0x02	; 2
    1240:	2d 91       	ld	r18, X+
    1242:	3c 91       	ld	r19, X
    1244:	13 97       	sbiw	r26, 0x03	; 3
    1246:	82 81       	ldd	r24, Z+2	; 0x02
    1248:	93 81       	ldd	r25, Z+3	; 0x03
    124a:	82 17       	cp	r24, r18
    124c:	93 07       	cpc	r25, r19
    124e:	94 f0       	brlt	.+36     	; 0x1274 <__fpcmp_parts_f+0x88>
    1250:	28 17       	cp	r18, r24
    1252:	39 07       	cpc	r19, r25
    1254:	bc f0       	brlt	.+46     	; 0x1284 <__fpcmp_parts_f+0x98>
    1256:	14 96       	adiw	r26, 0x04	; 4
    1258:	8d 91       	ld	r24, X+
    125a:	9d 91       	ld	r25, X+
    125c:	0d 90       	ld	r0, X+
    125e:	bc 91       	ld	r27, X
    1260:	a0 2d       	mov	r26, r0
    1262:	24 81       	ldd	r18, Z+4	; 0x04
    1264:	35 81       	ldd	r19, Z+5	; 0x05
    1266:	46 81       	ldd	r20, Z+6	; 0x06
    1268:	57 81       	ldd	r21, Z+7	; 0x07
    126a:	28 17       	cp	r18, r24
    126c:	39 07       	cpc	r19, r25
    126e:	4a 07       	cpc	r20, r26
    1270:	5b 07       	cpc	r21, r27
    1272:	18 f4       	brcc	.+6      	; 0x127a <__fpcmp_parts_f+0x8e>
    1274:	11 23       	and	r17, r17
    1276:	41 f0       	breq	.+16     	; 0x1288 <__fpcmp_parts_f+0x9c>
    1278:	0a c0       	rjmp	.+20     	; 0x128e <__fpcmp_parts_f+0xa2>
    127a:	82 17       	cp	r24, r18
    127c:	93 07       	cpc	r25, r19
    127e:	a4 07       	cpc	r26, r20
    1280:	b5 07       	cpc	r27, r21
    1282:	40 f4       	brcc	.+16     	; 0x1294 <__fpcmp_parts_f+0xa8>
    1284:	11 23       	and	r17, r17
    1286:	19 f0       	breq	.+6      	; 0x128e <__fpcmp_parts_f+0xa2>
    1288:	61 e0       	ldi	r22, 0x01	; 1
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	05 c0       	rjmp	.+10     	; 0x1298 <__fpcmp_parts_f+0xac>
    128e:	6f ef       	ldi	r22, 0xFF	; 255
    1290:	7f ef       	ldi	r23, 0xFF	; 255
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <__fpcmp_parts_f+0xac>
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	cb 01       	movw	r24, r22
    129a:	1f 91       	pop	r17
    129c:	08 95       	ret

0000129e <DIO_VidSetPinDirection>:
#include "../Serivecs_driver/BIT_MATH.h"

/* Lower Layer Interface Files*/
#include"DIO_private.h"

void DIO_VidSetPinDirection (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Dir ) {
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	27 97       	sbiw	r28, 0x07	; 7
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	6a 83       	std	Y+2, r22	; 0x02
    12b6:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Dir ){
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <DIO_VidSetPinDirection+0x22>
    12be:	6f c0       	rjmp	.+222    	; 0x139e <DIO_VidSetPinDirection+0x100>
		switch (Copy_U8Port){
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	3f 83       	std	Y+7, r19	; 0x07
    12c8:	2e 83       	std	Y+6, r18	; 0x06
    12ca:	8e 81       	ldd	r24, Y+6	; 0x06
    12cc:	9f 81       	ldd	r25, Y+7	; 0x07
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	91 05       	cpc	r25, r1
    12d2:	49 f1       	breq	.+82     	; 0x1326 <DIO_VidSetPinDirection+0x88>
    12d4:	2e 81       	ldd	r18, Y+6	; 0x06
    12d6:	3f 81       	ldd	r19, Y+7	; 0x07
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	31 05       	cpc	r19, r1
    12dc:	2c f4       	brge	.+10     	; 0x12e8 <DIO_VidSetPinDirection+0x4a>
    12de:	8e 81       	ldd	r24, Y+6	; 0x06
    12e0:	9f 81       	ldd	r25, Y+7	; 0x07
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	61 f0       	breq	.+24     	; 0x12fe <DIO_VidSetPinDirection+0x60>
    12e6:	d2 c0       	rjmp	.+420    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
    12e8:	2e 81       	ldd	r18, Y+6	; 0x06
    12ea:	3f 81       	ldd	r19, Y+7	; 0x07
    12ec:	22 30       	cpi	r18, 0x02	; 2
    12ee:	31 05       	cpc	r19, r1
    12f0:	71 f1       	breq	.+92     	; 0x134e <DIO_VidSetPinDirection+0xb0>
    12f2:	8e 81       	ldd	r24, Y+6	; 0x06
    12f4:	9f 81       	ldd	r25, Y+7	; 0x07
    12f6:	83 30       	cpi	r24, 0x03	; 3
    12f8:	91 05       	cpc	r25, r1
    12fa:	e9 f1       	breq	.+122    	; 0x1376 <DIO_VidSetPinDirection+0xd8>
    12fc:	c7 c0       	rjmp	.+398    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    SET_BIT(DDRA,Copy_U8Pin);
    12fe:	aa e3       	ldi	r26, 0x3A	; 58
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	ea e3       	ldi	r30, 0x3A	; 58
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_VidSetPinDirection+0x7e>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_VidSetPinDirection+0x7a>
    1320:	84 2b       	or	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	b3 c0       	rjmp	.+358    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(DDRB,Copy_U8Pin);
    1326:	a7 e3       	ldi	r26, 0x37	; 55
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e7 e3       	ldi	r30, 0x37	; 55
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_VidSetPinDirection+0xa6>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_VidSetPinDirection+0xa2>
    1348:	84 2b       	or	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	9f c0       	rjmp	.+318    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(DDRC,Copy_U8Pin);
    134e:	a4 e3       	ldi	r26, 0x34	; 52
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e4 e3       	ldi	r30, 0x34	; 52
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_VidSetPinDirection+0xce>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <DIO_VidSetPinDirection+0xca>
    1370:	84 2b       	or	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	8b c0       	rjmp	.+278    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(DDRD,Copy_U8Pin);
    1376:	a1 e3       	ldi	r26, 0x31	; 49
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e1 e3       	ldi	r30, 0x31	; 49
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <DIO_VidSetPinDirection+0xf6>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <DIO_VidSetPinDirection+0xf2>
    1398:	84 2b       	or	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	77 c0       	rjmp	.+238    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Dir ) {
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	88 23       	and	r24, r24
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <DIO_VidSetPinDirection+0x108>
    13a4:	73 c0       	rjmp	.+230    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
		switch (Copy_U8Port){
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	3d 83       	std	Y+5, r19	; 0x05
    13ae:	2c 83       	std	Y+4, r18	; 0x04
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	9d 81       	ldd	r25, Y+5	; 0x05
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	91 05       	cpc	r25, r1
    13b8:	59 f1       	breq	.+86     	; 0x1410 <DIO_VidSetPinDirection+0x172>
    13ba:	2c 81       	ldd	r18, Y+4	; 0x04
    13bc:	3d 81       	ldd	r19, Y+5	; 0x05
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	31 05       	cpc	r19, r1
    13c2:	2c f4       	brge	.+10     	; 0x13ce <DIO_VidSetPinDirection+0x130>
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	9d 81       	ldd	r25, Y+5	; 0x05
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	69 f0       	breq	.+26     	; 0x13e6 <DIO_VidSetPinDirection+0x148>
    13cc:	5f c0       	rjmp	.+190    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
    13ce:	2c 81       	ldd	r18, Y+4	; 0x04
    13d0:	3d 81       	ldd	r19, Y+5	; 0x05
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	89 f1       	breq	.+98     	; 0x143a <DIO_VidSetPinDirection+0x19c>
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	9d 81       	ldd	r25, Y+5	; 0x05
    13dc:	83 30       	cpi	r24, 0x03	; 3
    13de:	91 05       	cpc	r25, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <DIO_VidSetPinDirection+0x146>
    13e2:	40 c0       	rjmp	.+128    	; 0x1464 <DIO_VidSetPinDirection+0x1c6>
    13e4:	53 c0       	rjmp	.+166    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    CLR_BIT(DDRA,Copy_U8Pin);
    13e6:	aa e3       	ldi	r26, 0x3A	; 58
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	ea e3       	ldi	r30, 0x3A	; 58
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 2e       	mov	r0, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_VidSetPinDirection+0x166>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	0a 94       	dec	r0
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_VidSetPinDirection+0x162>
    1408:	80 95       	com	r24
    140a:	84 23       	and	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	3e c0       	rjmp	.+124    	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(DDRB,Copy_U8Pin);
    1410:	a7 e3       	ldi	r26, 0x37	; 55
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e7 e3       	ldi	r30, 0x37	; 55
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_VidSetPinDirection+0x190>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_VidSetPinDirection+0x18c>
    1432:	80 95       	com	r24
    1434:	84 23       	and	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	29 c0       	rjmp	.+82     	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(DDRC,Copy_U8Pin);
    143a:	a4 e3       	ldi	r26, 0x34	; 52
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e4 e3       	ldi	r30, 0x34	; 52
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_VidSetPinDirection+0x1ba>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_VidSetPinDirection+0x1b6>
    145c:	80 95       	com	r24
    145e:	84 23       	and	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	14 c0       	rjmp	.+40     	; 0x148c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(DDRD,Copy_U8Pin);
    1464:	a1 e3       	ldi	r26, 0x31	; 49
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e1 e3       	ldi	r30, 0x31	; 49
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_VidSetPinDirection+0x1e4>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_VidSetPinDirection+0x1e0>
    1486:	80 95       	com	r24
    1488:	84 23       	and	r24, r20
    148a:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if 
}//end FUNC DIO_VidSetPinDirection
    148c:	27 96       	adiw	r28, 0x07	; 7
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection (u8 Copy_U8Port , u8 Copy_U8Dir ) {
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <DIO_VidSetPortDirection+0x6>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <DIO_VidSetPortDirection+0x8>
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	3c 83       	std	Y+4, r19	; 0x04
    14b6:	2b 83       	std	Y+3, r18	; 0x03
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	91 05       	cpc	r25, r1
    14c0:	d1 f0       	breq	.+52     	; 0x14f6 <DIO_VidSetPortDirection+0x58>
    14c2:	2b 81       	ldd	r18, Y+3	; 0x03
    14c4:	3c 81       	ldd	r19, Y+4	; 0x04
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	31 05       	cpc	r19, r1
    14ca:	2c f4       	brge	.+10     	; 0x14d6 <DIO_VidSetPortDirection+0x38>
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	9c 81       	ldd	r25, Y+4	; 0x04
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	61 f0       	breq	.+24     	; 0x14ec <DIO_VidSetPortDirection+0x4e>
    14d4:	1e c0       	rjmp	.+60     	; 0x1512 <DIO_VidSetPortDirection+0x74>
    14d6:	2b 81       	ldd	r18, Y+3	; 0x03
    14d8:	3c 81       	ldd	r19, Y+4	; 0x04
    14da:	22 30       	cpi	r18, 0x02	; 2
    14dc:	31 05       	cpc	r19, r1
    14de:	81 f0       	breq	.+32     	; 0x1500 <DIO_VidSetPortDirection+0x62>
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	83 30       	cpi	r24, 0x03	; 3
    14e6:	91 05       	cpc	r25, r1
    14e8:	81 f0       	breq	.+32     	; 0x150a <DIO_VidSetPortDirection+0x6c>
    14ea:	13 c0       	rjmp	.+38     	; 0x1512 <DIO_VidSetPortDirection+0x74>
		case 0 : 
			DDRA = Copy_U8Dir ;
    14ec:	ea e3       	ldi	r30, 0x3A	; 58
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	80 83       	st	Z, r24
    14f4:	0e c0       	rjmp	.+28     	; 0x1512 <DIO_VidSetPortDirection+0x74>
			break ;  
		case 1 : 
			DDRB = Copy_U8Dir ;
    14f6:	e7 e3       	ldi	r30, 0x37	; 55
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	80 83       	st	Z, r24
    14fe:	09 c0       	rjmp	.+18     	; 0x1512 <DIO_VidSetPortDirection+0x74>
			break ;			
		case 2 : 
			DDRC = Copy_U8Dir ;
    1500:	e4 e3       	ldi	r30, 0x34	; 52
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	80 83       	st	Z, r24
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <DIO_VidSetPortDirection+0x74>
			break ;  
		case 3 : 
			DDRD = Copy_U8Dir ;
    150a:	e1 e3       	ldi	r30, 0x31	; 49
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	80 83       	st	Z, r24
			break ; 
		}//end switch
}// end FUNC DIO_VidSetPortDirection
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Val ) {
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	27 97       	sbiw	r28, 0x07	; 7
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	6a 83       	std	Y+2, r22	; 0x02
    1538:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Val ){
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	09 f0       	breq	.+2      	; 0x1542 <DIO_VidSetPinValue+0x22>
    1540:	6f c0       	rjmp	.+222    	; 0x1620 <DIO_VidSetPinValue+0x100>
		switch (Copy_U8Port){
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	3f 83       	std	Y+7, r19	; 0x07
    154a:	2e 83       	std	Y+6, r18	; 0x06
    154c:	8e 81       	ldd	r24, Y+6	; 0x06
    154e:	9f 81       	ldd	r25, Y+7	; 0x07
    1550:	81 30       	cpi	r24, 0x01	; 1
    1552:	91 05       	cpc	r25, r1
    1554:	49 f1       	breq	.+82     	; 0x15a8 <DIO_VidSetPinValue+0x88>
    1556:	2e 81       	ldd	r18, Y+6	; 0x06
    1558:	3f 81       	ldd	r19, Y+7	; 0x07
    155a:	22 30       	cpi	r18, 0x02	; 2
    155c:	31 05       	cpc	r19, r1
    155e:	2c f4       	brge	.+10     	; 0x156a <DIO_VidSetPinValue+0x4a>
    1560:	8e 81       	ldd	r24, Y+6	; 0x06
    1562:	9f 81       	ldd	r25, Y+7	; 0x07
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	61 f0       	breq	.+24     	; 0x1580 <DIO_VidSetPinValue+0x60>
    1568:	d2 c0       	rjmp	.+420    	; 0x170e <DIO_VidSetPinValue+0x1ee>
    156a:	2e 81       	ldd	r18, Y+6	; 0x06
    156c:	3f 81       	ldd	r19, Y+7	; 0x07
    156e:	22 30       	cpi	r18, 0x02	; 2
    1570:	31 05       	cpc	r19, r1
    1572:	71 f1       	breq	.+92     	; 0x15d0 <DIO_VidSetPinValue+0xb0>
    1574:	8e 81       	ldd	r24, Y+6	; 0x06
    1576:	9f 81       	ldd	r25, Y+7	; 0x07
    1578:	83 30       	cpi	r24, 0x03	; 3
    157a:	91 05       	cpc	r25, r1
    157c:	e9 f1       	breq	.+122    	; 0x15f8 <DIO_VidSetPinValue+0xd8>
    157e:	c7 c0       	rjmp	.+398    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    SET_BIT(PORTA,Copy_U8Pin);
    1580:	ab e3       	ldi	r26, 0x3B	; 59
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	eb e3       	ldi	r30, 0x3B	; 59
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <DIO_VidSetPinValue+0x7e>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <DIO_VidSetPinValue+0x7a>
    15a2:	84 2b       	or	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	b3 c0       	rjmp	.+358    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(PORTB,Copy_U8Pin);
    15a8:	a8 e3       	ldi	r26, 0x38	; 56
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e8 e3       	ldi	r30, 0x38	; 56
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <DIO_VidSetPinValue+0xa6>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <DIO_VidSetPinValue+0xa2>
    15ca:	84 2b       	or	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	9f c0       	rjmp	.+318    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(PORTC,Copy_U8Pin);
    15d0:	a5 e3       	ldi	r26, 0x35	; 53
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e5 e3       	ldi	r30, 0x35	; 53
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <DIO_VidSetPinValue+0xce>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <DIO_VidSetPinValue+0xca>
    15f2:	84 2b       	or	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	8b c0       	rjmp	.+278    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(PORTD,Copy_U8Pin);
    15f8:	a2 e3       	ldi	r26, 0x32	; 50
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e2 e3       	ldi	r30, 0x32	; 50
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <DIO_VidSetPinValue+0xf6>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <DIO_VidSetPinValue+0xf2>
    161a:	84 2b       	or	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	77 c0       	rjmp	.+238    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Val){
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	88 23       	and	r24, r24
    1624:	09 f0       	breq	.+2      	; 0x1628 <DIO_VidSetPinValue+0x108>
    1626:	73 c0       	rjmp	.+230    	; 0x170e <DIO_VidSetPinValue+0x1ee>
		switch (Copy_U8Port){
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	3d 83       	std	Y+5, r19	; 0x05
    1630:	2c 83       	std	Y+4, r18	; 0x04
    1632:	8c 81       	ldd	r24, Y+4	; 0x04
    1634:	9d 81       	ldd	r25, Y+5	; 0x05
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	91 05       	cpc	r25, r1
    163a:	59 f1       	breq	.+86     	; 0x1692 <DIO_VidSetPinValue+0x172>
    163c:	2c 81       	ldd	r18, Y+4	; 0x04
    163e:	3d 81       	ldd	r19, Y+5	; 0x05
    1640:	22 30       	cpi	r18, 0x02	; 2
    1642:	31 05       	cpc	r19, r1
    1644:	2c f4       	brge	.+10     	; 0x1650 <DIO_VidSetPinValue+0x130>
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
    1648:	9d 81       	ldd	r25, Y+5	; 0x05
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	69 f0       	breq	.+26     	; 0x1668 <DIO_VidSetPinValue+0x148>
    164e:	5f c0       	rjmp	.+190    	; 0x170e <DIO_VidSetPinValue+0x1ee>
    1650:	2c 81       	ldd	r18, Y+4	; 0x04
    1652:	3d 81       	ldd	r19, Y+5	; 0x05
    1654:	22 30       	cpi	r18, 0x02	; 2
    1656:	31 05       	cpc	r19, r1
    1658:	89 f1       	breq	.+98     	; 0x16bc <DIO_VidSetPinValue+0x19c>
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	9d 81       	ldd	r25, Y+5	; 0x05
    165e:	83 30       	cpi	r24, 0x03	; 3
    1660:	91 05       	cpc	r25, r1
    1662:	09 f4       	brne	.+2      	; 0x1666 <DIO_VidSetPinValue+0x146>
    1664:	40 c0       	rjmp	.+128    	; 0x16e6 <DIO_VidSetPinValue+0x1c6>
    1666:	53 c0       	rjmp	.+166    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    CLR_BIT(PORTA,Copy_U8Pin);
    1668:	ab e3       	ldi	r26, 0x3B	; 59
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	eb e3       	ldi	r30, 0x3B	; 59
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 2e       	mov	r0, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <DIO_VidSetPinValue+0x166>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <DIO_VidSetPinValue+0x162>
    168a:	80 95       	com	r24
    168c:	84 23       	and	r24, r20
    168e:	8c 93       	st	X, r24
    1690:	3e c0       	rjmp	.+124    	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(PORTB,Copy_U8Pin);
    1692:	a8 e3       	ldi	r26, 0x38	; 56
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e8 e3       	ldi	r30, 0x38	; 56
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_VidSetPinValue+0x190>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_VidSetPinValue+0x18c>
    16b4:	80 95       	com	r24
    16b6:	84 23       	and	r24, r20
    16b8:	8c 93       	st	X, r24
    16ba:	29 c0       	rjmp	.+82     	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(PORTC,Copy_U8Pin);
    16bc:	a5 e3       	ldi	r26, 0x35	; 53
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e5 e3       	ldi	r30, 0x35	; 53
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <DIO_VidSetPinValue+0x1ba>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <DIO_VidSetPinValue+0x1b6>
    16de:	80 95       	com	r24
    16e0:	84 23       	and	r24, r20
    16e2:	8c 93       	st	X, r24
    16e4:	14 c0       	rjmp	.+40     	; 0x170e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(PORTD,Copy_U8Pin);
    16e6:	a2 e3       	ldi	r26, 0x32	; 50
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e2 e3       	ldi	r30, 0x32	; 50
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	48 2f       	mov	r20, r24
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	02 2e       	mov	r0, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <DIO_VidSetPinValue+0x1e4>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	0a 94       	dec	r0
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <DIO_VidSetPinValue+0x1e0>
    1708:	80 95       	com	r24
    170a:	84 23       	and	r24, r20
    170c:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if
}// end FUNC DIO_VidSetPinValue
    170e:	27 96       	adiw	r28, 0x07	; 7
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue (u8 Copy_U8Port , u8 Copy_U8Val ) {
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	00 d0       	rcall	.+0      	; 0x1726 <DIO_VidSetPortValue+0x6>
    1726:	00 d0       	rcall	.+0      	; 0x1728 <DIO_VidSetPortValue+0x8>
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	3c 83       	std	Y+4, r19	; 0x04
    1738:	2b 83       	std	Y+3, r18	; 0x03
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	91 05       	cpc	r25, r1
    1742:	d1 f0       	breq	.+52     	; 0x1778 <DIO_VidSetPortValue+0x58>
    1744:	2b 81       	ldd	r18, Y+3	; 0x03
    1746:	3c 81       	ldd	r19, Y+4	; 0x04
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	31 05       	cpc	r19, r1
    174c:	2c f4       	brge	.+10     	; 0x1758 <DIO_VidSetPortValue+0x38>
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	61 f0       	breq	.+24     	; 0x176e <DIO_VidSetPortValue+0x4e>
    1756:	1e c0       	rjmp	.+60     	; 0x1794 <DIO_VidSetPortValue+0x74>
    1758:	2b 81       	ldd	r18, Y+3	; 0x03
    175a:	3c 81       	ldd	r19, Y+4	; 0x04
    175c:	22 30       	cpi	r18, 0x02	; 2
    175e:	31 05       	cpc	r19, r1
    1760:	81 f0       	breq	.+32     	; 0x1782 <DIO_VidSetPortValue+0x62>
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	9c 81       	ldd	r25, Y+4	; 0x04
    1766:	83 30       	cpi	r24, 0x03	; 3
    1768:	91 05       	cpc	r25, r1
    176a:	81 f0       	breq	.+32     	; 0x178c <DIO_VidSetPortValue+0x6c>
    176c:	13 c0       	rjmp	.+38     	; 0x1794 <DIO_VidSetPortValue+0x74>
		case 0 : 
			PORTA = Copy_U8Val ;
    176e:	eb e3       	ldi	r30, 0x3B	; 59
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	80 83       	st	Z, r24
    1776:	0e c0       	rjmp	.+28     	; 0x1794 <DIO_VidSetPortValue+0x74>
			break ;  
		case 1 : 
			PORTB = Copy_U8Val ;
    1778:	e8 e3       	ldi	r30, 0x38	; 56
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	80 83       	st	Z, r24
    1780:	09 c0       	rjmp	.+18     	; 0x1794 <DIO_VidSetPortValue+0x74>
			break ;			
		case 2 : 
			PORTC = Copy_U8Val ;
    1782:	e5 e3       	ldi	r30, 0x35	; 53
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	80 83       	st	Z, r24
    178a:	04 c0       	rjmp	.+8      	; 0x1794 <DIO_VidSetPortValue+0x74>
			break ;  
		case 3 : 
			PORTD = Copy_U8Val ;
    178c:	e2 e3       	ldi	r30, 0x32	; 50
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	80 83       	st	Z, r24
			break ; 
		}//end switch
}//end FUNC DIO_VidSetPortValue
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <DIO_VidTogglePinValue>:
void DIO_VidTogglePinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <DIO_VidTogglePinValue+0x6>
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <DIO_VidTogglePinValue+0x8>
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	3c 83       	std	Y+4, r19	; 0x04
    17ba:	2b 83       	std	Y+3, r18	; 0x03
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	9c 81       	ldd	r25, Y+4	; 0x04
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	91 05       	cpc	r25, r1
    17c4:	49 f1       	breq	.+82     	; 0x1818 <DIO_VidTogglePinValue+0x76>
    17c6:	2b 81       	ldd	r18, Y+3	; 0x03
    17c8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	31 05       	cpc	r19, r1
    17ce:	2c f4       	brge	.+10     	; 0x17da <DIO_VidTogglePinValue+0x38>
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	61 f0       	breq	.+24     	; 0x17f0 <DIO_VidTogglePinValue+0x4e>
    17d8:	5a c0       	rjmp	.+180    	; 0x188e <DIO_VidTogglePinValue+0xec>
    17da:	2b 81       	ldd	r18, Y+3	; 0x03
    17dc:	3c 81       	ldd	r19, Y+4	; 0x04
    17de:	22 30       	cpi	r18, 0x02	; 2
    17e0:	31 05       	cpc	r19, r1
    17e2:	71 f1       	breq	.+92     	; 0x1840 <DIO_VidTogglePinValue+0x9e>
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	9c 81       	ldd	r25, Y+4	; 0x04
    17e8:	83 30       	cpi	r24, 0x03	; 3
    17ea:	91 05       	cpc	r25, r1
    17ec:	e9 f1       	breq	.+122    	; 0x1868 <DIO_VidTogglePinValue+0xc6>
    17ee:	4f c0       	rjmp	.+158    	; 0x188e <DIO_VidTogglePinValue+0xec>
		case 0 : 
		    TOGGLE_BIT( PORTA , Copy_U8Pin ) ;
    17f0:	ab e3       	ldi	r26, 0x3B	; 59
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	eb e3       	ldi	r30, 0x3B	; 59
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 2e       	mov	r0, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <DIO_VidTogglePinValue+0x6c>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <DIO_VidTogglePinValue+0x68>
    1812:	84 27       	eor	r24, r20
    1814:	8c 93       	st	X, r24
    1816:	3b c0       	rjmp	.+118    	; 0x188e <DIO_VidTogglePinValue+0xec>
			break ;  
		case 1 : 
			TOGGLE_BIT( PORTB , Copy_U8Pin ) ;
    1818:	a8 e3       	ldi	r26, 0x38	; 56
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e8 e3       	ldi	r30, 0x38	; 56
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	48 2f       	mov	r20, r24
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	02 2e       	mov	r0, r18
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <DIO_VidTogglePinValue+0x94>
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	0a 94       	dec	r0
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <DIO_VidTogglePinValue+0x90>
    183a:	84 27       	eor	r24, r20
    183c:	8c 93       	st	X, r24
    183e:	27 c0       	rjmp	.+78     	; 0x188e <DIO_VidTogglePinValue+0xec>
			break ;			
		case 2 : 
			TOGGLE_BIT( PORTC , Copy_U8Pin ) ;
    1840:	a5 e3       	ldi	r26, 0x35	; 53
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e5 e3       	ldi	r30, 0x35	; 53
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	48 2f       	mov	r20, r24
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	02 2e       	mov	r0, r18
    1858:	02 c0       	rjmp	.+4      	; 0x185e <DIO_VidTogglePinValue+0xbc>
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	0a 94       	dec	r0
    1860:	e2 f7       	brpl	.-8      	; 0x185a <DIO_VidTogglePinValue+0xb8>
    1862:	84 27       	eor	r24, r20
    1864:	8c 93       	st	X, r24
    1866:	13 c0       	rjmp	.+38     	; 0x188e <DIO_VidTogglePinValue+0xec>
			break ;  
		case 3 : 
			TOGGLE_BIT( PORTD , Copy_U8Pin ) ;
    1868:	a2 e3       	ldi	r26, 0x32	; 50
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e2 e3       	ldi	r30, 0x32	; 50
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	48 2f       	mov	r20, r24
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	02 2e       	mov	r0, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <DIO_VidTogglePinValue+0xe4>
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	0a 94       	dec	r0
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <DIO_VidTogglePinValue+0xe0>
    188a:	84 27       	eor	r24, r20
    188c:	8c 93       	st	X, r24
			break ; 
	}//end switch
}//end FUNC DIO_VidTogglePinValue
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <DIO_U8GetPinValue>:
u8 DIO_U8GetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <DIO_U8GetPinValue+0x6>
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <DIO_U8GetPinValue+0x8>
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <DIO_U8GetPinValue+0xa>
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3d 83       	std	Y+5, r19	; 0x05
    18b6:	2c 83       	std	Y+4, r18	; 0x04
    18b8:	4c 81       	ldd	r20, Y+4	; 0x04
    18ba:	5d 81       	ldd	r21, Y+5	; 0x05
    18bc:	41 30       	cpi	r20, 0x01	; 1
    18be:	51 05       	cpc	r21, r1
    18c0:	b1 f1       	breq	.+108    	; 0x192e <DIO_U8GetPinValue+0x92>
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	9d 81       	ldd	r25, Y+5	; 0x05
    18c6:	82 30       	cpi	r24, 0x02	; 2
    18c8:	91 05       	cpc	r25, r1
    18ca:	34 f4       	brge	.+12     	; 0x18d8 <DIO_U8GetPinValue+0x3c>
    18cc:	2c 81       	ldd	r18, Y+4	; 0x04
    18ce:	3d 81       	ldd	r19, Y+5	; 0x05
    18d0:	21 15       	cp	r18, r1
    18d2:	31 05       	cpc	r19, r1
    18d4:	71 f0       	breq	.+28     	; 0x18f2 <DIO_U8GetPinValue+0x56>
    18d6:	85 c0       	rjmp	.+266    	; 0x19e2 <DIO_U8GetPinValue+0x146>
    18d8:	4c 81       	ldd	r20, Y+4	; 0x04
    18da:	5d 81       	ldd	r21, Y+5	; 0x05
    18dc:	42 30       	cpi	r20, 0x02	; 2
    18de:	51 05       	cpc	r21, r1
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <DIO_U8GetPinValue+0x48>
    18e2:	43 c0       	rjmp	.+134    	; 0x196a <DIO_U8GetPinValue+0xce>
    18e4:	8c 81       	ldd	r24, Y+4	; 0x04
    18e6:	9d 81       	ldd	r25, Y+5	; 0x05
    18e8:	83 30       	cpi	r24, 0x03	; 3
    18ea:	91 05       	cpc	r25, r1
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <DIO_U8GetPinValue+0x54>
    18ee:	5b c0       	rjmp	.+182    	; 0x19a6 <DIO_U8GetPinValue+0x10a>
    18f0:	78 c0       	rjmp	.+240    	; 0x19e2 <DIO_U8GetPinValue+0x146>
		case 0 : 
		   return GET_BIT( PINA , Copy_U8Pin ) ;
    18f2:	e9 e3       	ldi	r30, 0x39	; 57
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	48 2f       	mov	r20, r24
    18fa:	50 e0       	ldi	r21, 0x00	; 0
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 c0       	rjmp	.+4      	; 0x190c <DIO_U8GetPinValue+0x70>
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	2a 95       	dec	r18
    190e:	e2 f7       	brpl	.-8      	; 0x1908 <DIO_U8GetPinValue+0x6c>
    1910:	9a 01       	movw	r18, r20
    1912:	28 23       	and	r18, r24
    1914:	39 23       	and	r19, r25
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	88 2f       	mov	r24, r24
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	a9 01       	movw	r20, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <DIO_U8GetPinValue+0x88>
    1920:	55 95       	asr	r21
    1922:	47 95       	ror	r20
    1924:	8a 95       	dec	r24
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <DIO_U8GetPinValue+0x84>
    1928:	ca 01       	movw	r24, r20
    192a:	8b 83       	std	Y+3, r24	; 0x03
    192c:	5b c0       	rjmp	.+182    	; 0x19e4 <DIO_U8GetPinValue+0x148>
		case 1 : 
			return GET_BIT( PINB , Copy_U8Pin ) ;
    192e:	e6 e3       	ldi	r30, 0x36	; 54
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	50 e0       	ldi	r21, 0x00	; 0
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <DIO_U8GetPinValue+0xac>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	2a 95       	dec	r18
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <DIO_U8GetPinValue+0xa8>
    194c:	9a 01       	movw	r18, r20
    194e:	28 23       	and	r18, r24
    1950:	39 23       	and	r19, r25
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	88 2f       	mov	r24, r24
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	a9 01       	movw	r20, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_U8GetPinValue+0xc4>
    195c:	55 95       	asr	r21
    195e:	47 95       	ror	r20
    1960:	8a 95       	dec	r24
    1962:	e2 f7       	brpl	.-8      	; 0x195c <DIO_U8GetPinValue+0xc0>
    1964:	ca 01       	movw	r24, r20
    1966:	8b 83       	std	Y+3, r24	; 0x03
    1968:	3d c0       	rjmp	.+122    	; 0x19e4 <DIO_U8GetPinValue+0x148>
		case 2 : 
			return GET_BIT( PINC , Copy_U8Pin ) ;
    196a:	e3 e3       	ldi	r30, 0x33	; 51
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	48 2f       	mov	r20, r24
    1972:	50 e0       	ldi	r21, 0x00	; 0
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <DIO_U8GetPinValue+0xe8>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	2a 95       	dec	r18
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <DIO_U8GetPinValue+0xe4>
    1988:	9a 01       	movw	r18, r20
    198a:	28 23       	and	r18, r24
    198c:	39 23       	and	r19, r25
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	88 2f       	mov	r24, r24
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a9 01       	movw	r20, r18
    1996:	02 c0       	rjmp	.+4      	; 0x199c <DIO_U8GetPinValue+0x100>
    1998:	55 95       	asr	r21
    199a:	47 95       	ror	r20
    199c:	8a 95       	dec	r24
    199e:	e2 f7       	brpl	.-8      	; 0x1998 <DIO_U8GetPinValue+0xfc>
    19a0:	ca 01       	movw	r24, r20
    19a2:	8b 83       	std	Y+3, r24	; 0x03
    19a4:	1f c0       	rjmp	.+62     	; 0x19e4 <DIO_U8GetPinValue+0x148>
		case 3 : 
			return GET_BIT( PIND , Copy_U8Pin ) ;
    19a6:	e0 e3       	ldi	r30, 0x30	; 48
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	48 2f       	mov	r20, r24
    19ae:	50 e0       	ldi	r21, 0x00	; 0
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <DIO_U8GetPinValue+0x124>
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	2a 95       	dec	r18
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <DIO_U8GetPinValue+0x120>
    19c4:	9a 01       	movw	r18, r20
    19c6:	28 23       	and	r18, r24
    19c8:	39 23       	and	r19, r25
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	88 2f       	mov	r24, r24
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	a9 01       	movw	r20, r18
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <DIO_U8GetPinValue+0x13c>
    19d4:	55 95       	asr	r21
    19d6:	47 95       	ror	r20
    19d8:	8a 95       	dec	r24
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <DIO_U8GetPinValue+0x138>
    19dc:	ca 01       	movw	r24, r20
    19de:	8b 83       	std	Y+3, r24	; 0x03
    19e0:	01 c0       	rjmp	.+2      	; 0x19e4 <DIO_U8GetPinValue+0x148>
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <DIO_U8GetPinValue+0x14c>
	}//end switch	
}//end FUNC DIO_VidU8PinValue 
    19e4:	5b 81       	ldd	r21, Y+3	; 0x03
    19e6:	5e 83       	std	Y+6, r21	; 0x06
    19e8:	8e 81       	ldd	r24, Y+6	; 0x06
    19ea:	26 96       	adiw	r28, 0x06	; 6
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <GIE_VidEnable>:
#include "../Serivecs_driver/BIT_MATH.h"
#include "DIO_interface.h"
#include "INTERRUPT_Interface.h"
#include "INTERRUPT_private.h"

void GIE_VidEnable (void){
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
	//to enable general interrupt
	SET_BIT(SREG,I_BIT);
    1a04:	af e5       	ldi	r26, 0x5F	; 95
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	ef e5       	ldi	r30, 0x5F	; 95
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	80 68       	ori	r24, 0x80	; 128
    1a10:	8c 93       	st	X, r24
}
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <GIE_VidDisable>:

void GIE_VidDisable (void){
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
	//to disable general interrupt
	CLR_BIT(SREG,I_BIT);
    1a20:	af e5       	ldi	r26, 0x5F	; 95
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	ef e5       	ldi	r30, 0x5F	; 95
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	8f 77       	andi	r24, 0x7F	; 127
    1a2c:	8c 93       	st	X, r24
}
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <TIMER_VidSetCallBack>:
static u16 PRE_SCALAR_TIMER2 ;
static f32 T_OV_TIMER2  ;
static f32 NUM_OV_TIMER2 ;
static f32 PRE_LOAD_TIMER2 ;

void TIMER_VidSetCallBack (u8 Copy_NumOfINT , void (*ptr)(void)){
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <TIMER_VidSetCallBack+0x6>
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <TIMER_VidSetCallBack+0x8>
    1a3c:	0f 92       	push	r0
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	89 83       	std	Y+1, r24	; 0x01
    1a44:	7b 83       	std	Y+3, r23	; 0x03
    1a46:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_NumOfINT){
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	3d 83       	std	Y+5, r19	; 0x05
    1a50:	2c 83       	std	Y+4, r18	; 0x04
    1a52:	8c 81       	ldd	r24, Y+4	; 0x04
    1a54:	9d 81       	ldd	r25, Y+5	; 0x05
    1a56:	81 30       	cpi	r24, 0x01	; 1
    1a58:	91 05       	cpc	r25, r1
    1a5a:	81 f0       	breq	.+32     	; 0x1a7c <TIMER_VidSetCallBack+0x48>
    1a5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a60:	22 30       	cpi	r18, 0x02	; 2
    1a62:	31 05       	cpc	r19, r1
    1a64:	91 f0       	breq	.+36     	; 0x1a8a <TIMER_VidSetCallBack+0x56>
    1a66:	8c 81       	ldd	r24, Y+4	; 0x04
    1a68:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	a1 f4       	brne	.+40     	; 0x1a96 <TIMER_VidSetCallBack+0x62>
	case 0 :TIMER0_PFUNC = ptr ;            break ;
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	9b 81       	ldd	r25, Y+3	; 0x03
    1a72:	90 93 69 01 	sts	0x0169, r25
    1a76:	80 93 68 01 	sts	0x0168, r24
    1a7a:	0d c0       	rjmp	.+26     	; 0x1a96 <TIMER_VidSetCallBack+0x62>
	case 1 :TIMER1_PFUNC = ptr ;             break ;
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a80:	90 93 6b 01 	sts	0x016B, r25
    1a84:	80 93 6a 01 	sts	0x016A, r24
    1a88:	06 c0       	rjmp	.+12     	; 0x1a96 <TIMER_VidSetCallBack+0x62>
	case 2 :TIMER2_PFUNC = ptr ;             break ;
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8e:	90 93 6d 01 	sts	0x016D, r25
    1a92:	80 93 6c 01 	sts	0x016C, r24
	}
}
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <TIMER0_VidInitialize>:




/*******************To initialize OV or COMPARE or FAST_PWM mode***************************************/
void TIMER0_VidInitialize (void) {
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62

#if TIMER0_MODE == OV
	/*   overflow mode , to clear FOC0 and register
	     to enable interrupt , when rising flag jump to ISR     */
	TCCR0 = 0 ;
    1aae:	e3 e5       	ldi	r30, 0x53	; 83
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	10 82       	st	Z, r1
	SET_BIT(TIMSK,TOIE0);
    1ab4:	a9 e5       	ldi	r26, 0x59	; 89
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e9 e5       	ldi	r30, 0x59	; 89
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	81 60       	ori	r24, 0x01	; 1
    1ac0:	8c 93       	st	X, r24
#if PRE_TYPE_TIMER0 == NO_PRE
	CLR_BIT(TCCR0,CS02);
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS00);
#elif PRE_TYPE_TIMER0 == PRE_8
	CLR_BIT(TCCR0,CS02);
    1ac2:	a3 e5       	ldi	r26, 0x53	; 83
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e3 e5       	ldi	r30, 0x53	; 83
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	8b 7f       	andi	r24, 0xFB	; 251
    1ace:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    1ad0:	a3 e5       	ldi	r26, 0x53	; 83
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e3 e5       	ldi	r30, 0x53	; 83
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	82 60       	ori	r24, 0x02	; 2
    1adc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS00);
    1ade:	a3 e5       	ldi	r26, 0x53	; 83
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e3 e5       	ldi	r30, 0x53	; 83
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	8e 7f       	andi	r24, 0xFE	; 254
    1aea:	8c 93       	st	X, r24
	PRE_SCALAR_TIMER0 = 8 ;
    1aec:	88 e0       	ldi	r24, 0x08	; 8
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	90 93 7b 01 	sts	0x017B, r25
    1af4:	80 93 7a 01 	sts	0x017A, r24
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS00);
	PRE_SCALAR_TIMER0 = 1024 ;
#endif

}//end FUNC TIMER_VidInitialize
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <TIMER0_Set_Time_S>:

/******************** The part that use to count time  *************************/
//to check that you don't use OV or COMPARE mode
#if TIMER0_MODE == OV

void TIMER0_Set_Time_S (u8 Copy_U8Time){
    1afe:	6f 92       	push	r6
    1b00:	7f 92       	push	r7
    1b02:	8f 92       	push	r8
    1b04:	9f 92       	push	r9
    1b06:	af 92       	push	r10
    1b08:	bf 92       	push	r11
    1b0a:	cf 92       	push	r12
    1b0c:	df 92       	push	r13
    1b0e:	ef 92       	push	r14
    1b10:	ff 92       	push	r15
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	cf 54       	subi	r28, 0x4F	; 79
    1b20:	d0 40       	sbci	r29, 0x00	; 0
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	89 83       	std	Y+1, r24	; 0x01
	DESIRED_TIME_TIMER0 = (u64)Copy_U8Time*1000 ;                                    //time in ms
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	08 2f       	mov	r16, r24
    1b32:	10 e0       	ldi	r17, 0x00	; 0
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e0       	ldi	r20, 0x00	; 0
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	0a 83       	std	Y+2, r16	; 0x02
    1b42:	1b 83       	std	Y+3, r17	; 0x03
    1b44:	2c 83       	std	Y+4, r18	; 0x04
    1b46:	3d 83       	std	Y+5, r19	; 0x05
    1b48:	4e 83       	std	Y+6, r20	; 0x06
    1b4a:	5f 83       	std	Y+7, r21	; 0x07
    1b4c:	68 87       	std	Y+8, r22	; 0x08
    1b4e:	79 87       	std	Y+9, r23	; 0x09
    1b50:	aa 80       	ldd	r10, Y+2	; 0x02
    1b52:	bb 80       	ldd	r11, Y+3	; 0x03
    1b54:	cc 80       	ldd	r12, Y+4	; 0x04
    1b56:	dd 80       	ldd	r13, Y+5	; 0x05
    1b58:	ee 80       	ldd	r14, Y+6	; 0x06
    1b5a:	ff 80       	ldd	r15, Y+7	; 0x07
    1b5c:	08 85       	ldd	r16, Y+8	; 0x08
    1b5e:	19 85       	ldd	r17, Y+9	; 0x09
    1b60:	2a 2d       	mov	r18, r10
    1b62:	3b 2d       	mov	r19, r11
    1b64:	4c 2d       	mov	r20, r12
    1b66:	5d 2d       	mov	r21, r13
    1b68:	6e 2d       	mov	r22, r14
    1b6a:	7f 2d       	mov	r23, r15
    1b6c:	80 2f       	mov	r24, r16
    1b6e:	91 2f       	mov	r25, r17
    1b70:	02 e0       	ldi	r16, 0x02	; 2
    1b72:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    1b76:	2a 87       	std	Y+10, r18	; 0x0a
    1b78:	3b 87       	std	Y+11, r19	; 0x0b
    1b7a:	4c 87       	std	Y+12, r20	; 0x0c
    1b7c:	5d 87       	std	Y+13, r21	; 0x0d
    1b7e:	6e 87       	std	Y+14, r22	; 0x0e
    1b80:	7f 87       	std	Y+15, r23	; 0x0f
    1b82:	88 8b       	std	Y+16, r24	; 0x10
    1b84:	99 8b       	std	Y+17, r25	; 0x11
    1b86:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b88:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b8a:	4c 85       	ldd	r20, Y+12	; 0x0c
    1b8c:	5d 85       	ldd	r21, Y+13	; 0x0d
    1b8e:	6e 85       	ldd	r22, Y+14	; 0x0e
    1b90:	7f 85       	ldd	r23, Y+15	; 0x0f
    1b92:	88 89       	ldd	r24, Y+16	; 0x10
    1b94:	99 89       	ldd	r25, Y+17	; 0x11
    1b96:	05 e0       	ldi	r16, 0x05	; 5
    1b98:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    1b9c:	2a 8b       	std	Y+18, r18	; 0x12
    1b9e:	3b 8b       	std	Y+19, r19	; 0x13
    1ba0:	4c 8b       	std	Y+20, r20	; 0x14
    1ba2:	5d 8b       	std	Y+21, r21	; 0x15
    1ba4:	6e 8b       	std	Y+22, r22	; 0x16
    1ba6:	7f 8b       	std	Y+23, r23	; 0x17
    1ba8:	88 8f       	std	Y+24, r24	; 0x18
    1baa:	99 8f       	std	Y+25, r25	; 0x19
    1bac:	1a 89       	ldd	r17, Y+18	; 0x12
    1bae:	2a 85       	ldd	r18, Y+10	; 0x0a
    1bb0:	12 1b       	sub	r17, r18
    1bb2:	1a 8f       	std	Y+26, r17	; 0x1a
    1bb4:	31 e0       	ldi	r19, 0x01	; 1
    1bb6:	3a a3       	std	Y+34, r19	; 0x22
    1bb8:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1bba:	5a 89       	ldd	r21, Y+18	; 0x12
    1bbc:	54 17       	cp	r21, r20
    1bbe:	08 f0       	brcs	.+2      	; 0x1bc2 <TIMER0_Set_Time_S+0xc4>
    1bc0:	1a a2       	std	Y+34, r1	; 0x22
    1bc2:	6b 89       	ldd	r22, Y+19	; 0x13
    1bc4:	7b 85       	ldd	r23, Y+11	; 0x0b
    1bc6:	67 1b       	sub	r22, r23
    1bc8:	6b 8f       	std	Y+27, r22	; 0x1b
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	8b a3       	std	Y+35, r24	; 0x23
    1bce:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1bd0:	eb 89       	ldd	r30, Y+19	; 0x13
    1bd2:	e9 17       	cp	r30, r25
    1bd4:	08 f0       	brcs	.+2      	; 0x1bd8 <TIMER0_Set_Time_S+0xda>
    1bd6:	1b a2       	std	Y+35, r1	; 0x23
    1bd8:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1bda:	0a a1       	ldd	r16, Y+34	; 0x22
    1bdc:	f0 1b       	sub	r31, r16
    1bde:	fc a3       	std	Y+36, r31	; 0x24
    1be0:	11 e0       	ldi	r17, 0x01	; 1
    1be2:	1d a3       	std	Y+37, r17	; 0x25
    1be4:	2c a1       	ldd	r18, Y+36	; 0x24
    1be6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1be8:	32 17       	cp	r19, r18
    1bea:	08 f0       	brcs	.+2      	; 0x1bee <TIMER0_Set_Time_S+0xf0>
    1bec:	1d a2       	std	Y+37, r1	; 0x25
    1bee:	4b a1       	ldd	r20, Y+35	; 0x23
    1bf0:	5d a1       	ldd	r21, Y+37	; 0x25
    1bf2:	45 2b       	or	r20, r21
    1bf4:	4b a3       	std	Y+35, r20	; 0x23
    1bf6:	6c a1       	ldd	r22, Y+36	; 0x24
    1bf8:	6b 8f       	std	Y+27, r22	; 0x1b
    1bfa:	7c 89       	ldd	r23, Y+20	; 0x14
    1bfc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bfe:	78 1b       	sub	r23, r24
    1c00:	7c 8f       	std	Y+28, r23	; 0x1c
    1c02:	91 e0       	ldi	r25, 0x01	; 1
    1c04:	9e a3       	std	Y+38, r25	; 0x26
    1c06:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1c08:	fc 89       	ldd	r31, Y+20	; 0x14
    1c0a:	fe 17       	cp	r31, r30
    1c0c:	08 f0       	brcs	.+2      	; 0x1c10 <TIMER0_Set_Time_S+0x112>
    1c0e:	1e a2       	std	Y+38, r1	; 0x26
    1c10:	0c 8d       	ldd	r16, Y+28	; 0x1c
    1c12:	1b a1       	ldd	r17, Y+35	; 0x23
    1c14:	01 1b       	sub	r16, r17
    1c16:	0f a3       	std	Y+39, r16	; 0x27
    1c18:	21 e0       	ldi	r18, 0x01	; 1
    1c1a:	28 a7       	std	Y+40, r18	; 0x28
    1c1c:	3f a1       	ldd	r19, Y+39	; 0x27
    1c1e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1c20:	43 17       	cp	r20, r19
    1c22:	08 f0       	brcs	.+2      	; 0x1c26 <TIMER0_Set_Time_S+0x128>
    1c24:	18 a6       	std	Y+40, r1	; 0x28
    1c26:	5e a1       	ldd	r21, Y+38	; 0x26
    1c28:	68 a5       	ldd	r22, Y+40	; 0x28
    1c2a:	56 2b       	or	r21, r22
    1c2c:	5e a3       	std	Y+38, r21	; 0x26
    1c2e:	7f a1       	ldd	r23, Y+39	; 0x27
    1c30:	7c 8f       	std	Y+28, r23	; 0x1c
    1c32:	8d 89       	ldd	r24, Y+21	; 0x15
    1c34:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c36:	89 1b       	sub	r24, r25
    1c38:	8d 8f       	std	Y+29, r24	; 0x1d
    1c3a:	e1 e0       	ldi	r30, 0x01	; 1
    1c3c:	e9 a7       	std	Y+41, r30	; 0x29
    1c3e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1c40:	0d 89       	ldd	r16, Y+21	; 0x15
    1c42:	0f 17       	cp	r16, r31
    1c44:	08 f0       	brcs	.+2      	; 0x1c48 <TIMER0_Set_Time_S+0x14a>
    1c46:	19 a6       	std	Y+41, r1	; 0x29
    1c48:	1d 8d       	ldd	r17, Y+29	; 0x1d
    1c4a:	2e a1       	ldd	r18, Y+38	; 0x26
    1c4c:	12 1b       	sub	r17, r18
    1c4e:	1a a7       	std	Y+42, r17	; 0x2a
    1c50:	31 e0       	ldi	r19, 0x01	; 1
    1c52:	3b a7       	std	Y+43, r19	; 0x2b
    1c54:	4a a5       	ldd	r20, Y+42	; 0x2a
    1c56:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1c58:	54 17       	cp	r21, r20
    1c5a:	08 f0       	brcs	.+2      	; 0x1c5e <TIMER0_Set_Time_S+0x160>
    1c5c:	1b a6       	std	Y+43, r1	; 0x2b
    1c5e:	69 a5       	ldd	r22, Y+41	; 0x29
    1c60:	7b a5       	ldd	r23, Y+43	; 0x2b
    1c62:	67 2b       	or	r22, r23
    1c64:	69 a7       	std	Y+41, r22	; 0x29
    1c66:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c68:	8d 8f       	std	Y+29, r24	; 0x1d
    1c6a:	9e 89       	ldd	r25, Y+22	; 0x16
    1c6c:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c6e:	9e 1b       	sub	r25, r30
    1c70:	9e 8f       	std	Y+30, r25	; 0x1e
    1c72:	f1 e0       	ldi	r31, 0x01	; 1
    1c74:	fc a7       	std	Y+44, r31	; 0x2c
    1c76:	0e 8d       	ldd	r16, Y+30	; 0x1e
    1c78:	1e 89       	ldd	r17, Y+22	; 0x16
    1c7a:	10 17       	cp	r17, r16
    1c7c:	08 f0       	brcs	.+2      	; 0x1c80 <TIMER0_Set_Time_S+0x182>
    1c7e:	1c a6       	std	Y+44, r1	; 0x2c
    1c80:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1c82:	39 a5       	ldd	r19, Y+41	; 0x29
    1c84:	23 1b       	sub	r18, r19
    1c86:	2d a7       	std	Y+45, r18	; 0x2d
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	4e a7       	std	Y+46, r20	; 0x2e
    1c8c:	5d a5       	ldd	r21, Y+45	; 0x2d
    1c8e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1c90:	65 17       	cp	r22, r21
    1c92:	08 f0       	brcs	.+2      	; 0x1c96 <TIMER0_Set_Time_S+0x198>
    1c94:	1e a6       	std	Y+46, r1	; 0x2e
    1c96:	7c a5       	ldd	r23, Y+44	; 0x2c
    1c98:	8e a5       	ldd	r24, Y+46	; 0x2e
    1c9a:	78 2b       	or	r23, r24
    1c9c:	7c a7       	std	Y+44, r23	; 0x2c
    1c9e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ca0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ca2:	ef 89       	ldd	r30, Y+23	; 0x17
    1ca4:	ff 85       	ldd	r31, Y+15	; 0x0f
    1ca6:	ef 1b       	sub	r30, r31
    1ca8:	ef 8f       	std	Y+31, r30	; 0x1f
    1caa:	01 e0       	ldi	r16, 0x01	; 1
    1cac:	0f a7       	std	Y+47, r16	; 0x2f
    1cae:	1f 8d       	ldd	r17, Y+31	; 0x1f
    1cb0:	2f 89       	ldd	r18, Y+23	; 0x17
    1cb2:	21 17       	cp	r18, r17
    1cb4:	08 f0       	brcs	.+2      	; 0x1cb8 <TIMER0_Set_Time_S+0x1ba>
    1cb6:	1f a6       	std	Y+47, r1	; 0x2f
    1cb8:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1cba:	4c a5       	ldd	r20, Y+44	; 0x2c
    1cbc:	34 1b       	sub	r19, r20
    1cbe:	38 ab       	std	Y+48, r19	; 0x30
    1cc0:	51 e0       	ldi	r21, 0x01	; 1
    1cc2:	59 ab       	std	Y+49, r21	; 0x31
    1cc4:	68 a9       	ldd	r22, Y+48	; 0x30
    1cc6:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1cc8:	76 17       	cp	r23, r22
    1cca:	08 f0       	brcs	.+2      	; 0x1cce <TIMER0_Set_Time_S+0x1d0>
    1ccc:	19 aa       	std	Y+49, r1	; 0x31
    1cce:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd0:	99 a9       	ldd	r25, Y+49	; 0x31
    1cd2:	89 2b       	or	r24, r25
    1cd4:	8f a7       	std	Y+47, r24	; 0x2f
    1cd6:	e8 a9       	ldd	r30, Y+48	; 0x30
    1cd8:	ef 8f       	std	Y+31, r30	; 0x1f
    1cda:	f8 8d       	ldd	r31, Y+24	; 0x18
    1cdc:	08 89       	ldd	r16, Y+16	; 0x10
    1cde:	f0 1b       	sub	r31, r16
    1ce0:	f8 a3       	std	Y+32, r31	; 0x20
    1ce2:	11 e0       	ldi	r17, 0x01	; 1
    1ce4:	1a ab       	std	Y+50, r17	; 0x32
    1ce6:	28 a1       	ldd	r18, Y+32	; 0x20
    1ce8:	38 8d       	ldd	r19, Y+24	; 0x18
    1cea:	32 17       	cp	r19, r18
    1cec:	08 f0       	brcs	.+2      	; 0x1cf0 <TIMER0_Set_Time_S+0x1f2>
    1cee:	1a aa       	std	Y+50, r1	; 0x32
    1cf0:	48 a1       	ldd	r20, Y+32	; 0x20
    1cf2:	5f a5       	ldd	r21, Y+47	; 0x2f
    1cf4:	45 1b       	sub	r20, r21
    1cf6:	4b ab       	std	Y+51, r20	; 0x33
    1cf8:	61 e0       	ldi	r22, 0x01	; 1
    1cfa:	6c ab       	std	Y+52, r22	; 0x34
    1cfc:	7b a9       	ldd	r23, Y+51	; 0x33
    1cfe:	88 a1       	ldd	r24, Y+32	; 0x20
    1d00:	87 17       	cp	r24, r23
    1d02:	08 f0       	brcs	.+2      	; 0x1d06 <TIMER0_Set_Time_S+0x208>
    1d04:	1c aa       	std	Y+52, r1	; 0x34
    1d06:	9a a9       	ldd	r25, Y+50	; 0x32
    1d08:	ec a9       	ldd	r30, Y+52	; 0x34
    1d0a:	9e 2b       	or	r25, r30
    1d0c:	9a ab       	std	Y+50, r25	; 0x32
    1d0e:	fb a9       	ldd	r31, Y+51	; 0x33
    1d10:	f8 a3       	std	Y+32, r31	; 0x20
    1d12:	09 8d       	ldd	r16, Y+25	; 0x19
    1d14:	19 89       	ldd	r17, Y+17	; 0x11
    1d16:	01 1b       	sub	r16, r17
    1d18:	09 a3       	std	Y+33, r16	; 0x21
    1d1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d1c:	2a a9       	ldd	r18, Y+50	; 0x32
    1d1e:	82 1b       	sub	r24, r18
    1d20:	89 a3       	std	Y+33, r24	; 0x21
    1d22:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1d24:	3a 8b       	std	Y+18, r19	; 0x12
    1d26:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1d28:	4b 8b       	std	Y+19, r20	; 0x13
    1d2a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1d2c:	5c 8b       	std	Y+20, r21	; 0x14
    1d2e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d30:	6d 8b       	std	Y+21, r22	; 0x15
    1d32:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1d34:	7e 8b       	std	Y+22, r23	; 0x16
    1d36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d38:	8f 8b       	std	Y+23, r24	; 0x17
    1d3a:	98 a1       	ldd	r25, Y+32	; 0x20
    1d3c:	98 8f       	std	Y+24, r25	; 0x18
    1d3e:	e9 a1       	ldd	r30, Y+33	; 0x21
    1d40:	e9 8f       	std	Y+25, r30	; 0x19
    1d42:	fa 89       	ldd	r31, Y+18	; 0x12
    1d44:	0a 81       	ldd	r16, Y+2	; 0x02
    1d46:	f0 0f       	add	r31, r16
    1d48:	fd ab       	std	Y+53, r31	; 0x35
    1d4a:	11 e0       	ldi	r17, 0x01	; 1
    1d4c:	1d af       	std	Y+61, r17	; 0x3d
    1d4e:	2d a9       	ldd	r18, Y+53	; 0x35
    1d50:	3a 89       	ldd	r19, Y+18	; 0x12
    1d52:	23 17       	cp	r18, r19
    1d54:	08 f0       	brcs	.+2      	; 0x1d58 <TIMER0_Set_Time_S+0x25a>
    1d56:	1d ae       	std	Y+61, r1	; 0x3d
    1d58:	4b 89       	ldd	r20, Y+19	; 0x13
    1d5a:	5b 81       	ldd	r21, Y+3	; 0x03
    1d5c:	45 0f       	add	r20, r21
    1d5e:	4e ab       	std	Y+54, r20	; 0x36
    1d60:	61 e0       	ldi	r22, 0x01	; 1
    1d62:	6e af       	std	Y+62, r22	; 0x3e
    1d64:	7e a9       	ldd	r23, Y+54	; 0x36
    1d66:	8b 89       	ldd	r24, Y+19	; 0x13
    1d68:	78 17       	cp	r23, r24
    1d6a:	08 f0       	brcs	.+2      	; 0x1d6e <TIMER0_Set_Time_S+0x270>
    1d6c:	1e ae       	std	Y+62, r1	; 0x3e
    1d6e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d70:	ee a9       	ldd	r30, Y+54	; 0x36
    1d72:	9e 0f       	add	r25, r30
    1d74:	9f af       	std	Y+63, r25	; 0x3f
    1d76:	f1 e0       	ldi	r31, 0x01	; 1
    1d78:	21 96       	adiw	r28, 0x01	; 1
    1d7a:	ff af       	std	Y+63, r31	; 0x3f
    1d7c:	21 97       	sbiw	r28, 0x01	; 1
    1d7e:	0f ad       	ldd	r16, Y+63	; 0x3f
    1d80:	1e a9       	ldd	r17, Y+54	; 0x36
    1d82:	01 17       	cp	r16, r17
    1d84:	18 f0       	brcs	.+6      	; 0x1d8c <TIMER0_Set_Time_S+0x28e>
    1d86:	21 96       	adiw	r28, 0x01	; 1
    1d88:	1f ae       	std	Y+63, r1	; 0x3f
    1d8a:	21 97       	sbiw	r28, 0x01	; 1
    1d8c:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d8e:	21 96       	adiw	r28, 0x01	; 1
    1d90:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d92:	21 97       	sbiw	r28, 0x01	; 1
    1d94:	23 2b       	or	r18, r19
    1d96:	2e af       	std	Y+62, r18	; 0x3e
    1d98:	4f ad       	ldd	r20, Y+63	; 0x3f
    1d9a:	4e ab       	std	Y+54, r20	; 0x36
    1d9c:	5c 89       	ldd	r21, Y+20	; 0x14
    1d9e:	6c 81       	ldd	r22, Y+4	; 0x04
    1da0:	56 0f       	add	r21, r22
    1da2:	5f ab       	std	Y+55, r21	; 0x37
    1da4:	71 e0       	ldi	r23, 0x01	; 1
    1da6:	22 96       	adiw	r28, 0x02	; 2
    1da8:	7f af       	std	Y+63, r23	; 0x3f
    1daa:	22 97       	sbiw	r28, 0x02	; 2
    1dac:	8f a9       	ldd	r24, Y+55	; 0x37
    1dae:	9c 89       	ldd	r25, Y+20	; 0x14
    1db0:	89 17       	cp	r24, r25
    1db2:	18 f0       	brcs	.+6      	; 0x1dba <TIMER0_Set_Time_S+0x2bc>
    1db4:	22 96       	adiw	r28, 0x02	; 2
    1db6:	1f ae       	std	Y+63, r1	; 0x3f
    1db8:	22 97       	sbiw	r28, 0x02	; 2
    1dba:	ee ad       	ldd	r30, Y+62	; 0x3e
    1dbc:	ff a9       	ldd	r31, Y+55	; 0x37
    1dbe:	ef 0f       	add	r30, r31
    1dc0:	23 96       	adiw	r28, 0x03	; 3
    1dc2:	ef af       	std	Y+63, r30	; 0x3f
    1dc4:	23 97       	sbiw	r28, 0x03	; 3
    1dc6:	01 e0       	ldi	r16, 0x01	; 1
    1dc8:	24 96       	adiw	r28, 0x04	; 4
    1dca:	0f af       	std	Y+63, r16	; 0x3f
    1dcc:	24 97       	sbiw	r28, 0x04	; 4
    1dce:	23 96       	adiw	r28, 0x03	; 3
    1dd0:	1f ad       	ldd	r17, Y+63	; 0x3f
    1dd2:	23 97       	sbiw	r28, 0x03	; 3
    1dd4:	2f a9       	ldd	r18, Y+55	; 0x37
    1dd6:	12 17       	cp	r17, r18
    1dd8:	18 f0       	brcs	.+6      	; 0x1de0 <TIMER0_Set_Time_S+0x2e2>
    1dda:	24 96       	adiw	r28, 0x04	; 4
    1ddc:	1f ae       	std	Y+63, r1	; 0x3f
    1dde:	24 97       	sbiw	r28, 0x04	; 4
    1de0:	22 96       	adiw	r28, 0x02	; 2
    1de2:	3f ad       	ldd	r19, Y+63	; 0x3f
    1de4:	22 97       	sbiw	r28, 0x02	; 2
    1de6:	24 96       	adiw	r28, 0x04	; 4
    1de8:	4f ad       	ldd	r20, Y+63	; 0x3f
    1dea:	24 97       	sbiw	r28, 0x04	; 4
    1dec:	34 2b       	or	r19, r20
    1dee:	22 96       	adiw	r28, 0x02	; 2
    1df0:	3f af       	std	Y+63, r19	; 0x3f
    1df2:	22 97       	sbiw	r28, 0x02	; 2
    1df4:	23 96       	adiw	r28, 0x03	; 3
    1df6:	5f ad       	ldd	r21, Y+63	; 0x3f
    1df8:	23 97       	sbiw	r28, 0x03	; 3
    1dfa:	5f ab       	std	Y+55, r21	; 0x37
    1dfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfe:	7d 81       	ldd	r23, Y+5	; 0x05
    1e00:	67 0f       	add	r22, r23
    1e02:	68 af       	std	Y+56, r22	; 0x38
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	25 96       	adiw	r28, 0x05	; 5
    1e08:	8f af       	std	Y+63, r24	; 0x3f
    1e0a:	25 97       	sbiw	r28, 0x05	; 5
    1e0c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e0e:	ed 89       	ldd	r30, Y+21	; 0x15
    1e10:	9e 17       	cp	r25, r30
    1e12:	18 f0       	brcs	.+6      	; 0x1e1a <TIMER0_Set_Time_S+0x31c>
    1e14:	25 96       	adiw	r28, 0x05	; 5
    1e16:	1f ae       	std	Y+63, r1	; 0x3f
    1e18:	25 97       	sbiw	r28, 0x05	; 5
    1e1a:	22 96       	adiw	r28, 0x02	; 2
    1e1c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e1e:	22 97       	sbiw	r28, 0x02	; 2
    1e20:	08 ad       	ldd	r16, Y+56	; 0x38
    1e22:	f0 0f       	add	r31, r16
    1e24:	26 96       	adiw	r28, 0x06	; 6
    1e26:	ff af       	std	Y+63, r31	; 0x3f
    1e28:	26 97       	sbiw	r28, 0x06	; 6
    1e2a:	11 e0       	ldi	r17, 0x01	; 1
    1e2c:	27 96       	adiw	r28, 0x07	; 7
    1e2e:	1f af       	std	Y+63, r17	; 0x3f
    1e30:	27 97       	sbiw	r28, 0x07	; 7
    1e32:	26 96       	adiw	r28, 0x06	; 6
    1e34:	2f ad       	ldd	r18, Y+63	; 0x3f
    1e36:	26 97       	sbiw	r28, 0x06	; 6
    1e38:	38 ad       	ldd	r19, Y+56	; 0x38
    1e3a:	23 17       	cp	r18, r19
    1e3c:	18 f0       	brcs	.+6      	; 0x1e44 <TIMER0_Set_Time_S+0x346>
    1e3e:	27 96       	adiw	r28, 0x07	; 7
    1e40:	1f ae       	std	Y+63, r1	; 0x3f
    1e42:	27 97       	sbiw	r28, 0x07	; 7
    1e44:	25 96       	adiw	r28, 0x05	; 5
    1e46:	4f ad       	ldd	r20, Y+63	; 0x3f
    1e48:	25 97       	sbiw	r28, 0x05	; 5
    1e4a:	27 96       	adiw	r28, 0x07	; 7
    1e4c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e4e:	27 97       	sbiw	r28, 0x07	; 7
    1e50:	45 2b       	or	r20, r21
    1e52:	25 96       	adiw	r28, 0x05	; 5
    1e54:	4f af       	std	Y+63, r20	; 0x3f
    1e56:	25 97       	sbiw	r28, 0x05	; 5
    1e58:	26 96       	adiw	r28, 0x06	; 6
    1e5a:	6f ad       	ldd	r22, Y+63	; 0x3f
    1e5c:	26 97       	sbiw	r28, 0x06	; 6
    1e5e:	68 af       	std	Y+56, r22	; 0x38
    1e60:	7e 89       	ldd	r23, Y+22	; 0x16
    1e62:	8e 81       	ldd	r24, Y+6	; 0x06
    1e64:	78 0f       	add	r23, r24
    1e66:	79 af       	std	Y+57, r23	; 0x39
    1e68:	91 e0       	ldi	r25, 0x01	; 1
    1e6a:	28 96       	adiw	r28, 0x08	; 8
    1e6c:	9f af       	std	Y+63, r25	; 0x3f
    1e6e:	28 97       	sbiw	r28, 0x08	; 8
    1e70:	e9 ad       	ldd	r30, Y+57	; 0x39
    1e72:	fe 89       	ldd	r31, Y+22	; 0x16
    1e74:	ef 17       	cp	r30, r31
    1e76:	18 f0       	brcs	.+6      	; 0x1e7e <TIMER0_Set_Time_S+0x380>
    1e78:	28 96       	adiw	r28, 0x08	; 8
    1e7a:	1f ae       	std	Y+63, r1	; 0x3f
    1e7c:	28 97       	sbiw	r28, 0x08	; 8
    1e7e:	25 96       	adiw	r28, 0x05	; 5
    1e80:	0f ad       	ldd	r16, Y+63	; 0x3f
    1e82:	25 97       	sbiw	r28, 0x05	; 5
    1e84:	19 ad       	ldd	r17, Y+57	; 0x39
    1e86:	01 0f       	add	r16, r17
    1e88:	29 96       	adiw	r28, 0x09	; 9
    1e8a:	0f af       	std	Y+63, r16	; 0x3f
    1e8c:	29 97       	sbiw	r28, 0x09	; 9
    1e8e:	21 e0       	ldi	r18, 0x01	; 1
    1e90:	2a 96       	adiw	r28, 0x0a	; 10
    1e92:	2f af       	std	Y+63, r18	; 0x3f
    1e94:	2a 97       	sbiw	r28, 0x0a	; 10
    1e96:	29 96       	adiw	r28, 0x09	; 9
    1e98:	3f ad       	ldd	r19, Y+63	; 0x3f
    1e9a:	29 97       	sbiw	r28, 0x09	; 9
    1e9c:	49 ad       	ldd	r20, Y+57	; 0x39
    1e9e:	34 17       	cp	r19, r20
    1ea0:	18 f0       	brcs	.+6      	; 0x1ea8 <TIMER0_Set_Time_S+0x3aa>
    1ea2:	2a 96       	adiw	r28, 0x0a	; 10
    1ea4:	1f ae       	std	Y+63, r1	; 0x3f
    1ea6:	2a 97       	sbiw	r28, 0x0a	; 10
    1ea8:	28 96       	adiw	r28, 0x08	; 8
    1eaa:	5f ad       	ldd	r21, Y+63	; 0x3f
    1eac:	28 97       	sbiw	r28, 0x08	; 8
    1eae:	2a 96       	adiw	r28, 0x0a	; 10
    1eb0:	6f ad       	ldd	r22, Y+63	; 0x3f
    1eb2:	2a 97       	sbiw	r28, 0x0a	; 10
    1eb4:	56 2b       	or	r21, r22
    1eb6:	28 96       	adiw	r28, 0x08	; 8
    1eb8:	5f af       	std	Y+63, r21	; 0x3f
    1eba:	28 97       	sbiw	r28, 0x08	; 8
    1ebc:	29 96       	adiw	r28, 0x09	; 9
    1ebe:	7f ad       	ldd	r23, Y+63	; 0x3f
    1ec0:	29 97       	sbiw	r28, 0x09	; 9
    1ec2:	79 af       	std	Y+57, r23	; 0x39
    1ec4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec8:	89 0f       	add	r24, r25
    1eca:	8a af       	std	Y+58, r24	; 0x3a
    1ecc:	e1 e0       	ldi	r30, 0x01	; 1
    1ece:	2b 96       	adiw	r28, 0x0b	; 11
    1ed0:	ef af       	std	Y+63, r30	; 0x3f
    1ed2:	2b 97       	sbiw	r28, 0x0b	; 11
    1ed4:	fa ad       	ldd	r31, Y+58	; 0x3a
    1ed6:	0f 89       	ldd	r16, Y+23	; 0x17
    1ed8:	f0 17       	cp	r31, r16
    1eda:	18 f0       	brcs	.+6      	; 0x1ee2 <TIMER0_Set_Time_S+0x3e4>
    1edc:	2b 96       	adiw	r28, 0x0b	; 11
    1ede:	1f ae       	std	Y+63, r1	; 0x3f
    1ee0:	2b 97       	sbiw	r28, 0x0b	; 11
    1ee2:	28 96       	adiw	r28, 0x08	; 8
    1ee4:	1f ad       	ldd	r17, Y+63	; 0x3f
    1ee6:	28 97       	sbiw	r28, 0x08	; 8
    1ee8:	2a ad       	ldd	r18, Y+58	; 0x3a
    1eea:	12 0f       	add	r17, r18
    1eec:	2c 96       	adiw	r28, 0x0c	; 12
    1eee:	1f af       	std	Y+63, r17	; 0x3f
    1ef0:	2c 97       	sbiw	r28, 0x0c	; 12
    1ef2:	31 e0       	ldi	r19, 0x01	; 1
    1ef4:	2d 96       	adiw	r28, 0x0d	; 13
    1ef6:	3f af       	std	Y+63, r19	; 0x3f
    1ef8:	2d 97       	sbiw	r28, 0x0d	; 13
    1efa:	2c 96       	adiw	r28, 0x0c	; 12
    1efc:	4f ad       	ldd	r20, Y+63	; 0x3f
    1efe:	2c 97       	sbiw	r28, 0x0c	; 12
    1f00:	5a ad       	ldd	r21, Y+58	; 0x3a
    1f02:	45 17       	cp	r20, r21
    1f04:	18 f0       	brcs	.+6      	; 0x1f0c <TIMER0_Set_Time_S+0x40e>
    1f06:	2d 96       	adiw	r28, 0x0d	; 13
    1f08:	1f ae       	std	Y+63, r1	; 0x3f
    1f0a:	2d 97       	sbiw	r28, 0x0d	; 13
    1f0c:	2b 96       	adiw	r28, 0x0b	; 11
    1f0e:	6f ad       	ldd	r22, Y+63	; 0x3f
    1f10:	2b 97       	sbiw	r28, 0x0b	; 11
    1f12:	2d 96       	adiw	r28, 0x0d	; 13
    1f14:	7f ad       	ldd	r23, Y+63	; 0x3f
    1f16:	2d 97       	sbiw	r28, 0x0d	; 13
    1f18:	67 2b       	or	r22, r23
    1f1a:	2b 96       	adiw	r28, 0x0b	; 11
    1f1c:	6f af       	std	Y+63, r22	; 0x3f
    1f1e:	2b 97       	sbiw	r28, 0x0b	; 11
    1f20:	2c 96       	adiw	r28, 0x0c	; 12
    1f22:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f24:	2c 97       	sbiw	r28, 0x0c	; 12
    1f26:	8a af       	std	Y+58, r24	; 0x3a
    1f28:	98 8d       	ldd	r25, Y+24	; 0x18
    1f2a:	e8 85       	ldd	r30, Y+8	; 0x08
    1f2c:	9e 0f       	add	r25, r30
    1f2e:	9b af       	std	Y+59, r25	; 0x3b
    1f30:	f1 e0       	ldi	r31, 0x01	; 1
    1f32:	2e 96       	adiw	r28, 0x0e	; 14
    1f34:	ff af       	std	Y+63, r31	; 0x3f
    1f36:	2e 97       	sbiw	r28, 0x0e	; 14
    1f38:	0b ad       	ldd	r16, Y+59	; 0x3b
    1f3a:	18 8d       	ldd	r17, Y+24	; 0x18
    1f3c:	01 17       	cp	r16, r17
    1f3e:	18 f0       	brcs	.+6      	; 0x1f46 <TIMER0_Set_Time_S+0x448>
    1f40:	2e 96       	adiw	r28, 0x0e	; 14
    1f42:	1f ae       	std	Y+63, r1	; 0x3f
    1f44:	2e 97       	sbiw	r28, 0x0e	; 14
    1f46:	2b 96       	adiw	r28, 0x0b	; 11
    1f48:	2f ad       	ldd	r18, Y+63	; 0x3f
    1f4a:	2b 97       	sbiw	r28, 0x0b	; 11
    1f4c:	3b ad       	ldd	r19, Y+59	; 0x3b
    1f4e:	23 0f       	add	r18, r19
    1f50:	2f 96       	adiw	r28, 0x0f	; 15
    1f52:	2f af       	std	Y+63, r18	; 0x3f
    1f54:	2f 97       	sbiw	r28, 0x0f	; 15
    1f56:	41 e0       	ldi	r20, 0x01	; 1
    1f58:	60 96       	adiw	r28, 0x10	; 16
    1f5a:	4f af       	std	Y+63, r20	; 0x3f
    1f5c:	60 97       	sbiw	r28, 0x10	; 16
    1f5e:	2f 96       	adiw	r28, 0x0f	; 15
    1f60:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f62:	2f 97       	sbiw	r28, 0x0f	; 15
    1f64:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f66:	56 17       	cp	r21, r22
    1f68:	18 f0       	brcs	.+6      	; 0x1f70 <TIMER0_Set_Time_S+0x472>
    1f6a:	60 96       	adiw	r28, 0x10	; 16
    1f6c:	1f ae       	std	Y+63, r1	; 0x3f
    1f6e:	60 97       	sbiw	r28, 0x10	; 16
    1f70:	2e 96       	adiw	r28, 0x0e	; 14
    1f72:	7f ad       	ldd	r23, Y+63	; 0x3f
    1f74:	2e 97       	sbiw	r28, 0x0e	; 14
    1f76:	60 96       	adiw	r28, 0x10	; 16
    1f78:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f7a:	60 97       	sbiw	r28, 0x10	; 16
    1f7c:	78 2b       	or	r23, r24
    1f7e:	2e 96       	adiw	r28, 0x0e	; 14
    1f80:	7f af       	std	Y+63, r23	; 0x3f
    1f82:	2e 97       	sbiw	r28, 0x0e	; 14
    1f84:	2f 96       	adiw	r28, 0x0f	; 15
    1f86:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f88:	2f 97       	sbiw	r28, 0x0f	; 15
    1f8a:	9b af       	std	Y+59, r25	; 0x3b
    1f8c:	e9 8d       	ldd	r30, Y+25	; 0x19
    1f8e:	f9 85       	ldd	r31, Y+9	; 0x09
    1f90:	ef 0f       	add	r30, r31
    1f92:	ec af       	std	Y+60, r30	; 0x3c
    1f94:	2e 96       	adiw	r28, 0x0e	; 14
    1f96:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f98:	2e 97       	sbiw	r28, 0x0e	; 14
    1f9a:	0c ad       	ldd	r16, Y+60	; 0x3c
    1f9c:	80 0f       	add	r24, r16
    1f9e:	8c af       	std	Y+60, r24	; 0x3c
    1fa0:	1d a9       	ldd	r17, Y+53	; 0x35
    1fa2:	1a 8b       	std	Y+18, r17	; 0x12
    1fa4:	2e a9       	ldd	r18, Y+54	; 0x36
    1fa6:	2b 8b       	std	Y+19, r18	; 0x13
    1fa8:	3f a9       	ldd	r19, Y+55	; 0x37
    1faa:	3c 8b       	std	Y+20, r19	; 0x14
    1fac:	48 ad       	ldd	r20, Y+56	; 0x38
    1fae:	4d 8b       	std	Y+21, r20	; 0x15
    1fb0:	59 ad       	ldd	r21, Y+57	; 0x39
    1fb2:	5e 8b       	std	Y+22, r21	; 0x16
    1fb4:	6a ad       	ldd	r22, Y+58	; 0x3a
    1fb6:	6f 8b       	std	Y+23, r22	; 0x17
    1fb8:	7b ad       	ldd	r23, Y+59	; 0x3b
    1fba:	78 8f       	std	Y+24, r23	; 0x18
    1fbc:	8c ad       	ldd	r24, Y+60	; 0x3c
    1fbe:	89 8f       	std	Y+25, r24	; 0x19
    1fc0:	2a 89       	ldd	r18, Y+18	; 0x12
    1fc2:	3b 89       	ldd	r19, Y+19	; 0x13
    1fc4:	4c 89       	ldd	r20, Y+20	; 0x14
    1fc6:	5d 89       	ldd	r21, Y+21	; 0x15
    1fc8:	6e 89       	ldd	r22, Y+22	; 0x16
    1fca:	7f 89       	ldd	r23, Y+23	; 0x17
    1fcc:	88 8d       	ldd	r24, Y+24	; 0x18
    1fce:	99 8d       	ldd	r25, Y+25	; 0x19
    1fd0:	03 e0       	ldi	r16, 0x03	; 3
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    1fd6:	a2 2e       	mov	r10, r18
    1fd8:	b3 2e       	mov	r11, r19
    1fda:	c4 2e       	mov	r12, r20
    1fdc:	d5 2e       	mov	r13, r21
    1fde:	e6 2e       	mov	r14, r22
    1fe0:	f7 2e       	mov	r15, r23
    1fe2:	08 2f       	mov	r16, r24
    1fe4:	19 2f       	mov	r17, r25
    1fe6:	2a 2d       	mov	r18, r10
    1fe8:	3b 2d       	mov	r19, r11
    1fea:	4c 2d       	mov	r20, r12
    1fec:	5d 2d       	mov	r21, r13
    1fee:	6e 2d       	mov	r22, r14
    1ff0:	7f 2d       	mov	r23, r15
    1ff2:	80 2f       	mov	r24, r16
    1ff4:	91 2f       	mov	r25, r17
    1ff6:	20 93 72 01 	sts	0x0172, r18
    1ffa:	30 93 73 01 	sts	0x0173, r19
    1ffe:	40 93 74 01 	sts	0x0174, r20
    2002:	50 93 75 01 	sts	0x0175, r21
    2006:	60 93 76 01 	sts	0x0176, r22
    200a:	70 93 77 01 	sts	0x0177, r23
    200e:	80 93 78 01 	sts	0x0178, r24
    2012:	90 93 79 01 	sts	0x0179, r25
    T_OV_TIMER0 = (256*(f32)PRE_SCALAR_TIMER0)/8000 ;                                //time in ms
    2016:	80 91 7a 01 	lds	r24, 0x017A
    201a:	90 91 7b 01 	lds	r25, 0x017B
    201e:	cc 01       	movw	r24, r24
    2020:	a0 e0       	ldi	r26, 0x00	; 0
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	bc 01       	movw	r22, r24
    2026:	cd 01       	movw	r24, r26
    2028:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	bc 01       	movw	r22, r24
    2032:	cd 01       	movw	r24, r26
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	53 e4       	ldi	r21, 0x43	; 67
    203c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	4a ef       	ldi	r20, 0xFA	; 250
    204e:	55 e4       	ldi	r21, 0x45	; 69
    2050:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	80 93 7c 01 	sts	0x017C, r24
    205c:	90 93 7d 01 	sts	0x017D, r25
    2060:	a0 93 7e 01 	sts	0x017E, r26
    2064:	b0 93 7f 01 	sts	0x017F, r27
	NUM_OV_TIMER0 = DESIRED_TIME_TIMER0 / T_OV_TIMER0 ;                              //number of overflow wanted in entered if
    2068:	a0 90 72 01 	lds	r10, 0x0172
    206c:	b0 90 73 01 	lds	r11, 0x0173
    2070:	c0 90 74 01 	lds	r12, 0x0174
    2074:	d0 90 75 01 	lds	r13, 0x0175
    2078:	e0 90 76 01 	lds	r14, 0x0176
    207c:	f0 90 77 01 	lds	r15, 0x0177
    2080:	00 91 78 01 	lds	r16, 0x0178
    2084:	10 91 79 01 	lds	r17, 0x0179
    2088:	2a 2d       	mov	r18, r10
    208a:	3b 2d       	mov	r19, r11
    208c:	4c 2d       	mov	r20, r12
    208e:	5d 2d       	mov	r21, r13
    2090:	6e 2d       	mov	r22, r14
    2092:	7f 2d       	mov	r23, r15
    2094:	80 2f       	mov	r24, r16
    2096:	91 2f       	mov	r25, r17
    2098:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	20 91 7c 01 	lds	r18, 0x017C
    20a4:	30 91 7d 01 	lds	r19, 0x017D
    20a8:	40 91 7e 01 	lds	r20, 0x017E
    20ac:	50 91 7f 01 	lds	r21, 0x017F
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	80 93 80 01 	sts	0x0180, r24
    20c0:	90 93 81 01 	sts	0x0181, r25
    20c4:	a0 93 82 01 	sts	0x0182, r26
    20c8:	b0 93 83 01 	sts	0x0183, r27
	PRE_LOAD_TIMER0  = NUM_OV_TIMER0 -( (u32)(DESIRED_TIME_TIMER0 /T_OV_TIMER0) );   //the value which should be in TCNT to make time more accurate
    20cc:	60 90 80 01 	lds	r6, 0x0180
    20d0:	70 90 81 01 	lds	r7, 0x0181
    20d4:	80 90 82 01 	lds	r8, 0x0182
    20d8:	90 90 83 01 	lds	r9, 0x0183
    20dc:	a0 90 72 01 	lds	r10, 0x0172
    20e0:	b0 90 73 01 	lds	r11, 0x0173
    20e4:	c0 90 74 01 	lds	r12, 0x0174
    20e8:	d0 90 75 01 	lds	r13, 0x0175
    20ec:	e0 90 76 01 	lds	r14, 0x0176
    20f0:	f0 90 77 01 	lds	r15, 0x0177
    20f4:	00 91 78 01 	lds	r16, 0x0178
    20f8:	10 91 79 01 	lds	r17, 0x0179
    20fc:	2a 2d       	mov	r18, r10
    20fe:	3b 2d       	mov	r19, r11
    2100:	4c 2d       	mov	r20, r12
    2102:	5d 2d       	mov	r21, r13
    2104:	6e 2d       	mov	r22, r14
    2106:	7f 2d       	mov	r23, r15
    2108:	80 2f       	mov	r24, r16
    210a:	91 2f       	mov	r25, r17
    210c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	20 91 7c 01 	lds	r18, 0x017C
    2118:	30 91 7d 01 	lds	r19, 0x017D
    211c:	40 91 7e 01 	lds	r20, 0x017E
    2120:	50 91 7f 01 	lds	r21, 0x017F
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	bc 01       	movw	r22, r24
    2132:	cd 01       	movw	r24, r26
    2134:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	cc 01       	movw	r24, r24
    213e:	a0 e0       	ldi	r26, 0x00	; 0
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	bc 01       	movw	r22, r24
    2144:	cd 01       	movw	r24, r26
    2146:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    214a:	9b 01       	movw	r18, r22
    214c:	ac 01       	movw	r20, r24
    214e:	c4 01       	movw	r24, r8
    2150:	b3 01       	movw	r22, r6
    2152:	0e 94 1c 03 	call	0x638	; 0x638 <__subsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	80 93 84 01 	sts	0x0184, r24
    215e:	90 93 85 01 	sts	0x0185, r25
    2162:	a0 93 86 01 	sts	0x0186, r26
    2166:	b0 93 87 01 	sts	0x0187, r27
	if ( NUM_OV_TIMER0 > (u32)NUM_OV_TIMER0 ){
    216a:	80 91 80 01 	lds	r24, 0x0180
    216e:	90 91 81 01 	lds	r25, 0x0181
    2172:	a0 91 82 01 	lds	r26, 0x0182
    2176:	b0 91 83 01 	lds	r27, 0x0183
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	cc 01       	movw	r24, r24
    2188:	a0 e0       	ldi	r26, 0x00	; 0
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	bc 01       	movw	r22, r24
    218e:	cd 01       	movw	r24, r26
    2190:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	20 91 80 01 	lds	r18, 0x0180
    219c:	30 91 81 01 	lds	r19, 0x0181
    21a0:	40 91 82 01 	lds	r20, 0x0182
    21a4:	50 91 83 01 	lds	r21, 0x0183
    21a8:	bc 01       	movw	r22, r24
    21aa:	cd 01       	movw	r24, r26
    21ac:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    21b0:	88 23       	and	r24, r24
    21b2:	d4 f4       	brge	.+52     	; 0x21e8 <TIMER0_Set_Time_S+0x6ea>
		NUM_OV_TIMER0++;
    21b4:	80 91 80 01 	lds	r24, 0x0180
    21b8:	90 91 81 01 	lds	r25, 0x0181
    21bc:	a0 91 82 01 	lds	r26, 0x0182
    21c0:	b0 91 83 01 	lds	r27, 0x0183
    21c4:	bc 01       	movw	r22, r24
    21c6:	cd 01       	movw	r24, r26
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e8       	ldi	r20, 0x80	; 128
    21ce:	5f e3       	ldi	r21, 0x3F	; 63
    21d0:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	80 93 80 01 	sts	0x0180, r24
    21dc:	90 93 81 01 	sts	0x0181, r25
    21e0:	a0 93 82 01 	sts	0x0182, r26
    21e4:	b0 93 83 01 	sts	0x0183, r27
	}//end if

	//to begin from specific value
	TCNT0 = 256-(256*PRE_LOAD_TIMER0 );
    21e8:	02 e5       	ldi	r16, 0x52	; 82
    21ea:	10 e0       	ldi	r17, 0x00	; 0
    21ec:	80 91 84 01 	lds	r24, 0x0184
    21f0:	90 91 85 01 	lds	r25, 0x0185
    21f4:	a0 91 86 01 	lds	r26, 0x0186
    21f8:	b0 91 87 01 	lds	r27, 0x0187
    21fc:	bc 01       	movw	r22, r24
    21fe:	cd 01       	movw	r24, r26
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e8       	ldi	r20, 0x80	; 128
    2206:	53 ec       	ldi	r21, 0xC3	; 195
    2208:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	bc 01       	movw	r22, r24
    2212:	cd 01       	movw	r24, r26
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e8       	ldi	r20, 0x80	; 128
    221a:	53 e4       	ldi	r21, 0x43	; 67
    221c:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	f8 01       	movw	r30, r16
    2232:	80 83       	st	Z, r24
}
    2234:	c1 5b       	subi	r28, 0xB1	; 177
    2236:	df 4f       	sbci	r29, 0xFF	; 255
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	1f 91       	pop	r17
    2248:	0f 91       	pop	r16
    224a:	ff 90       	pop	r15
    224c:	ef 90       	pop	r14
    224e:	df 90       	pop	r13
    2250:	cf 90       	pop	r12
    2252:	bf 90       	pop	r11
    2254:	af 90       	pop	r10
    2256:	9f 90       	pop	r9
    2258:	8f 90       	pop	r8
    225a:	7f 90       	pop	r7
    225c:	6f 90       	pop	r6
    225e:	08 95       	ret

00002260 <TIMER0_Set_Time_mS>:

void TIMER0_Set_Time_mS (u16 Copy_U8Time){
    2260:	6f 92       	push	r6
    2262:	7f 92       	push	r7
    2264:	8f 92       	push	r8
    2266:	9f 92       	push	r9
    2268:	af 92       	push	r10
    226a:	bf 92       	push	r11
    226c:	cf 92       	push	r12
    226e:	df 92       	push	r13
    2270:	ef 92       	push	r14
    2272:	ff 92       	push	r15
    2274:	0f 93       	push	r16
    2276:	1f 93       	push	r17
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	00 d0       	rcall	.+0      	; 0x227e <TIMER0_Set_Time_mS+0x1e>
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	9a 83       	std	Y+2, r25	; 0x02
    2284:	89 83       	std	Y+1, r24	; 0x01
	DESIRED_TIME_TIMER0 = Copy_U8Time ;                                              //time in ms
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	9a 81       	ldd	r25, Y+2	; 0x02
    228a:	9c 01       	movw	r18, r24
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	60 e0       	ldi	r22, 0x00	; 0
    2292:	70 e0       	ldi	r23, 0x00	; 0
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	20 93 72 01 	sts	0x0172, r18
    229c:	30 93 73 01 	sts	0x0173, r19
    22a0:	40 93 74 01 	sts	0x0174, r20
    22a4:	50 93 75 01 	sts	0x0175, r21
    22a8:	60 93 76 01 	sts	0x0176, r22
    22ac:	70 93 77 01 	sts	0x0177, r23
    22b0:	80 93 78 01 	sts	0x0178, r24
    22b4:	90 93 79 01 	sts	0x0179, r25
    T_OV_TIMER0 = (256*(f32)PRE_SCALAR_TIMER0)/8000 ;                                //time in us
    22b8:	80 91 7a 01 	lds	r24, 0x017A
    22bc:	90 91 7b 01 	lds	r25, 0x017B
    22c0:	cc 01       	movw	r24, r24
    22c2:	a0 e0       	ldi	r26, 0x00	; 0
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	bc 01       	movw	r22, r24
    22c8:	cd 01       	movw	r24, r26
    22ca:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	bc 01       	movw	r22, r24
    22d4:	cd 01       	movw	r24, r26
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e8       	ldi	r20, 0x80	; 128
    22dc:	53 e4       	ldi	r21, 0x43	; 67
    22de:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	4a ef       	ldi	r20, 0xFA	; 250
    22f0:	55 e4       	ldi	r21, 0x45	; 69
    22f2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	80 93 7c 01 	sts	0x017C, r24
    22fe:	90 93 7d 01 	sts	0x017D, r25
    2302:	a0 93 7e 01 	sts	0x017E, r26
    2306:	b0 93 7f 01 	sts	0x017F, r27
	NUM_OV_TIMER0 = DESIRED_TIME_TIMER0 / T_OV_TIMER0 ;                              //number of overflow wanted in entered if
    230a:	a0 90 72 01 	lds	r10, 0x0172
    230e:	b0 90 73 01 	lds	r11, 0x0173
    2312:	c0 90 74 01 	lds	r12, 0x0174
    2316:	d0 90 75 01 	lds	r13, 0x0175
    231a:	e0 90 76 01 	lds	r14, 0x0176
    231e:	f0 90 77 01 	lds	r15, 0x0177
    2322:	00 91 78 01 	lds	r16, 0x0178
    2326:	10 91 79 01 	lds	r17, 0x0179
    232a:	2a 2d       	mov	r18, r10
    232c:	3b 2d       	mov	r19, r11
    232e:	4c 2d       	mov	r20, r12
    2330:	5d 2d       	mov	r21, r13
    2332:	6e 2d       	mov	r22, r14
    2334:	7f 2d       	mov	r23, r15
    2336:	80 2f       	mov	r24, r16
    2338:	91 2f       	mov	r25, r17
    233a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	20 91 7c 01 	lds	r18, 0x017C
    2346:	30 91 7d 01 	lds	r19, 0x017D
    234a:	40 91 7e 01 	lds	r20, 0x017E
    234e:	50 91 7f 01 	lds	r21, 0x017F
    2352:	bc 01       	movw	r22, r24
    2354:	cd 01       	movw	r24, r26
    2356:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	80 93 80 01 	sts	0x0180, r24
    2362:	90 93 81 01 	sts	0x0181, r25
    2366:	a0 93 82 01 	sts	0x0182, r26
    236a:	b0 93 83 01 	sts	0x0183, r27
	PRE_LOAD_TIMER0  = NUM_OV_TIMER0 -( (u32)(DESIRED_TIME_TIMER0 /T_OV_TIMER0) );   //the value which should be in TCNT to make time more accurate
    236e:	60 90 80 01 	lds	r6, 0x0180
    2372:	70 90 81 01 	lds	r7, 0x0181
    2376:	80 90 82 01 	lds	r8, 0x0182
    237a:	90 90 83 01 	lds	r9, 0x0183
    237e:	a0 90 72 01 	lds	r10, 0x0172
    2382:	b0 90 73 01 	lds	r11, 0x0173
    2386:	c0 90 74 01 	lds	r12, 0x0174
    238a:	d0 90 75 01 	lds	r13, 0x0175
    238e:	e0 90 76 01 	lds	r14, 0x0176
    2392:	f0 90 77 01 	lds	r15, 0x0177
    2396:	00 91 78 01 	lds	r16, 0x0178
    239a:	10 91 79 01 	lds	r17, 0x0179
    239e:	2a 2d       	mov	r18, r10
    23a0:	3b 2d       	mov	r19, r11
    23a2:	4c 2d       	mov	r20, r12
    23a4:	5d 2d       	mov	r21, r13
    23a6:	6e 2d       	mov	r22, r14
    23a8:	7f 2d       	mov	r23, r15
    23aa:	80 2f       	mov	r24, r16
    23ac:	91 2f       	mov	r25, r17
    23ae:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	20 91 7c 01 	lds	r18, 0x017C
    23ba:	30 91 7d 01 	lds	r19, 0x017D
    23be:	40 91 7e 01 	lds	r20, 0x017E
    23c2:	50 91 7f 01 	lds	r21, 0x017F
    23c6:	bc 01       	movw	r22, r24
    23c8:	cd 01       	movw	r24, r26
    23ca:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	bc 01       	movw	r22, r24
    23d4:	cd 01       	movw	r24, r26
    23d6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	cc 01       	movw	r24, r24
    23e0:	a0 e0       	ldi	r26, 0x00	; 0
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	bc 01       	movw	r22, r24
    23e6:	cd 01       	movw	r24, r26
    23e8:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    23ec:	9b 01       	movw	r18, r22
    23ee:	ac 01       	movw	r20, r24
    23f0:	c4 01       	movw	r24, r8
    23f2:	b3 01       	movw	r22, r6
    23f4:	0e 94 1c 03 	call	0x638	; 0x638 <__subsf3>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	80 93 84 01 	sts	0x0184, r24
    2400:	90 93 85 01 	sts	0x0185, r25
    2404:	a0 93 86 01 	sts	0x0186, r26
    2408:	b0 93 87 01 	sts	0x0187, r27
	if ( NUM_OV_TIMER0 > (u32)NUM_OV_TIMER0 ){
    240c:	80 91 80 01 	lds	r24, 0x0180
    2410:	90 91 81 01 	lds	r25, 0x0181
    2414:	a0 91 82 01 	lds	r26, 0x0182
    2418:	b0 91 83 01 	lds	r27, 0x0183
    241c:	bc 01       	movw	r22, r24
    241e:	cd 01       	movw	r24, r26
    2420:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	cc 01       	movw	r24, r24
    242a:	a0 e0       	ldi	r26, 0x00	; 0
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	bc 01       	movw	r22, r24
    2430:	cd 01       	movw	r24, r26
    2432:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	20 91 80 01 	lds	r18, 0x0180
    243e:	30 91 81 01 	lds	r19, 0x0181
    2442:	40 91 82 01 	lds	r20, 0x0182
    2446:	50 91 83 01 	lds	r21, 0x0183
    244a:	bc 01       	movw	r22, r24
    244c:	cd 01       	movw	r24, r26
    244e:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    2452:	88 23       	and	r24, r24
    2454:	d4 f4       	brge	.+52     	; 0x248a <TIMER0_Set_Time_mS+0x22a>
		NUM_OV_TIMER0++;
    2456:	80 91 80 01 	lds	r24, 0x0180
    245a:	90 91 81 01 	lds	r25, 0x0181
    245e:	a0 91 82 01 	lds	r26, 0x0182
    2462:	b0 91 83 01 	lds	r27, 0x0183
    2466:	bc 01       	movw	r22, r24
    2468:	cd 01       	movw	r24, r26
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	40 e8       	ldi	r20, 0x80	; 128
    2470:	5f e3       	ldi	r21, 0x3F	; 63
    2472:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	80 93 80 01 	sts	0x0180, r24
    247e:	90 93 81 01 	sts	0x0181, r25
    2482:	a0 93 82 01 	sts	0x0182, r26
    2486:	b0 93 83 01 	sts	0x0183, r27
#if PRE_TYPE_TIMER0 != PRE_8
#error "YOU SELECTED PRE_SCALAR MAKE MORE THAN 1 ms"
#endif

	//to begin from specific value
	TCNT0 = 256-(256*PRE_LOAD_TIMER0 );
    248a:	02 e5       	ldi	r16, 0x52	; 82
    248c:	10 e0       	ldi	r17, 0x00	; 0
    248e:	80 91 84 01 	lds	r24, 0x0184
    2492:	90 91 85 01 	lds	r25, 0x0185
    2496:	a0 91 86 01 	lds	r26, 0x0186
    249a:	b0 91 87 01 	lds	r27, 0x0187
    249e:	bc 01       	movw	r22, r24
    24a0:	cd 01       	movw	r24, r26
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e8       	ldi	r20, 0x80	; 128
    24a8:	53 ec       	ldi	r21, 0xC3	; 195
    24aa:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	bc 01       	movw	r22, r24
    24b4:	cd 01       	movw	r24, r26
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	40 e8       	ldi	r20, 0x80	; 128
    24bc:	53 e4       	ldi	r21, 0x43	; 67
    24be:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	bc 01       	movw	r22, r24
    24c8:	cd 01       	movw	r24, r26
    24ca:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	f8 01       	movw	r30, r16
    24d4:	80 83       	st	Z, r24
}
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	1f 91       	pop	r17
    24e0:	0f 91       	pop	r16
    24e2:	ff 90       	pop	r15
    24e4:	ef 90       	pop	r14
    24e6:	df 90       	pop	r13
    24e8:	cf 90       	pop	r12
    24ea:	bf 90       	pop	r11
    24ec:	af 90       	pop	r10
    24ee:	9f 90       	pop	r9
    24f0:	8f 90       	pop	r8
    24f2:	7f 90       	pop	r7
    24f4:	6f 90       	pop	r6
    24f6:	08 95       	ret

000024f8 <TIMER1_VidInitialize>:
/********************************************************************************/


/*******************To initialize OV or COMPARE or FAST_PWM mode***************************************/
//to check that you don't use OV or COMPARE or FAST_PWM mode
void TIMER1_VidInitialize (void) {
    24f8:	df 93       	push	r29
    24fa:	cf 93       	push	r28
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62

	//COM1A1/COM1B1 COM1A0/COM1B0  1 0 Clear OC1A/OC1B on compare match, set  OC1A/OC1B at TOP
	TCCR1A = 0b10100000 ;
    2500:	ef e4       	ldi	r30, 0x4F	; 79
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 ea       	ldi	r24, 0xA0	; 160
    2506:	80 83       	st	Z, r24

	//in next update we will make Timer not fixed modes
	/*WGM13 WGM12	WGM11	WGM10	Timer/Counter Mode of Operation TOP Update of OCR1x	TOV1 Flag Set 	on
      1      1       1        0        Fast PWM                      ICR1 TOP TOP*/
	SET_BIT(TCCR1B,WGM13);
    2508:	ae e4       	ldi	r26, 0x4E	; 78
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	ee e4       	ldi	r30, 0x4E	; 78
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	80 61       	ori	r24, 0x10	; 16
    2514:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    2516:	ae e4       	ldi	r26, 0x4E	; 78
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	ee e4       	ldi	r30, 0x4E	; 78
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	88 60       	ori	r24, 0x08	; 8
    2522:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    2524:	af e4       	ldi	r26, 0x4F	; 79
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	ef e4       	ldi	r30, 0x4F	; 79
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	82 60       	ori	r24, 0x02	; 2
    2530:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,WGM10);
    2532:	af e4       	ldi	r26, 0x4F	; 79
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	ef e4       	ldi	r30, 0x4F	; 79
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	8e 7f       	andi	r24, 0xFE	; 254
    253e:	8c 93       	st	X, r24

	//define pin of timer1
	DIO_VidSetPinDirection(3,5,1);
    2540:	83 e0       	ldi	r24, 0x03	; 3
    2542:	65 e0       	ldi	r22, 0x05	; 5
    2544:	41 e0       	ldi	r20, 0x01	; 1
    2546:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(3,4,1);
    254a:	83 e0       	ldi	r24, 0x03	; 3
    254c:	64 e0       	ldi	r22, 0x04	; 4
    254e:	41 e0       	ldi	r20, 0x01	; 1
    2550:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(3,5,0);
    2554:	83 e0       	ldi	r24, 0x03	; 3
    2556:	65 e0       	ldi	r22, 0x05	; 5
    2558:	40 e0       	ldi	r20, 0x00	; 0
    255a:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(3,4,0);
    255e:	83 e0       	ldi	r24, 0x03	; 3
    2560:	64 e0       	ldi	r22, 0x04	; 4
    2562:	40 e0       	ldi	r20, 0x00	; 0
    2564:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
	CLR_BIT(TCCR1B,CS12);
	CLR_BIT(TCCR1B,CS11);
	SET_BIT(TCCR1B,CS10);
	PRE_SCALAR_TIMER1 = 1 ;
#elif PRE_TYPE_TIMER1 == PRE_8
	CLR_BIT(TCCR1B,CS12);
    2568:	ae e4       	ldi	r26, 0x4E	; 78
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	ee e4       	ldi	r30, 0x4E	; 78
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	8b 7f       	andi	r24, 0xFB	; 251
    2574:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    2576:	ae e4       	ldi	r26, 0x4E	; 78
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	ee e4       	ldi	r30, 0x4E	; 78
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	82 60       	ori	r24, 0x02	; 2
    2582:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS10);
    2584:	ae e4       	ldi	r26, 0x4E	; 78
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	ee e4       	ldi	r30, 0x4E	; 78
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	8e 7f       	andi	r24, 0xFE	; 254
    2590:	8c 93       	st	X, r24
	PRE_SCALAR_TIMER1 = 8 ;
    2592:	88 e0       	ldi	r24, 0x08	; 8
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	90 93 89 01 	sts	0x0189, r25
    259a:	80 93 88 01 	sts	0x0188, r24
	CLR_BIT(TCCR1B,CS11);
	SET_BIT(TCCR1B,CS10);
	PRE_SCALAR_TIMER1 = 1024 ;
#endif

}//end FUNC TIMER_VidInitialize
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	08 95       	ret

000025a4 <Timer1_VidSETFreqency>:

//to set the top of counting in PWM
void Timer1_VidSETFreqency (){
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
	ICR1H = (u8)(top_count>>8) ;
	ICR1L = (u8)(top_count) ;
	*/

	/* set duty accroding to the wanted frequency */
	ICR1H = 0b10011000 ;
    25ac:	e7 e4       	ldi	r30, 0x47	; 71
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	88 e9       	ldi	r24, 0x98	; 152
    25b2:	80 83       	st	Z, r24
	ICR1L = 0b00100000 ;
    25b4:	e6 e4       	ldi	r30, 0x46	; 70
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 e2       	ldi	r24, 0x20	; 32
    25ba:	80 83       	st	Z, r24
}
    25bc:	cf 91       	pop	r28
    25be:	df 91       	pop	r29
    25c0:	08 95       	ret

000025c2 <Timer1_VidSETDUTY>:

//in next update we want to make duty by _precentage %
void Timer1_VidSETDUTY (u16 Copy_U8DutyA , u16 Copy_U8DutyB ) {
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	00 d0       	rcall	.+0      	; 0x25c8 <Timer1_VidSETDUTY+0x6>
    25c8:	00 d0       	rcall	.+0      	; 0x25ca <Timer1_VidSETDUTY+0x8>
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    25ce:	9a 83       	std	Y+2, r25	; 0x02
    25d0:	89 83       	std	Y+1, r24	; 0x01
    25d2:	7c 83       	std	Y+4, r23	; 0x04
    25d4:	6b 83       	std	Y+3, r22	; 0x03
	OCR1AH = (u8)(Copy_U8DutyA>>8) ;
    25d6:	eb e4       	ldi	r30, 0x4B	; 75
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	9a 81       	ldd	r25, Y+2	; 0x02
    25de:	89 2f       	mov	r24, r25
    25e0:	99 27       	eor	r25, r25
    25e2:	80 83       	st	Z, r24
	OCR1AL = (u8)Copy_U8DutyA ;
    25e4:	ea e4       	ldi	r30, 0x4A	; 74
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	80 83       	st	Z, r24

	OCR1BH = (u8)(Copy_U8DutyB>>8) ;
    25ec:	e9 e4       	ldi	r30, 0x49	; 73
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	9c 81       	ldd	r25, Y+4	; 0x04
    25f4:	89 2f       	mov	r24, r25
    25f6:	99 27       	eor	r25, r25
    25f8:	80 83       	st	Z, r24
	OCR1BL = (u8)Copy_U8DutyB ;
    25fa:	e8 e4       	ldi	r30, 0x48	; 72
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	80 83       	st	Z, r24
}
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	cf 91       	pop	r28
    260c:	df 91       	pop	r29
    260e:	08 95       	ret

00002610 <TIMER1_VidInitializeMode15>:

void TIMER1_VidInitializeMode15(u8 Mode,u8 ModelA,u8 ModelB){
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	29 97       	sbiw	r28, 0x09	; 9
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	de bf       	out	0x3e, r29	; 62
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	cd bf       	out	0x3d, r28	; 61
    2624:	89 83       	std	Y+1, r24	; 0x01
    2626:	6a 83       	std	Y+2, r22	; 0x02
    2628:	4b 83       	std	Y+3, r20	; 0x03
	switch(Mode){
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	39 87       	std	Y+9, r19	; 0x09
    2632:	28 87       	std	Y+8, r18	; 0x08
    2634:	88 85       	ldd	r24, Y+8	; 0x08
    2636:	99 85       	ldd	r25, Y+9	; 0x09
    2638:	8e 30       	cpi	r24, 0x0E	; 14
    263a:	91 05       	cpc	r25, r1
    263c:	31 f0       	breq	.+12     	; 0x264a <TIMER1_VidInitializeMode15+0x3a>
    263e:	28 85       	ldd	r18, Y+8	; 0x08
    2640:	39 85       	ldd	r19, Y+9	; 0x09
    2642:	2f 30       	cpi	r18, 0x0F	; 15
    2644:	31 05       	cpc	r19, r1
    2646:	f1 f0       	breq	.+60     	; 0x2684 <TIMER1_VidInitializeMode15+0x74>
    2648:	39 c0       	rjmp	.+114    	; 0x26bc <TIMER1_VidInitializeMode15+0xac>
	   case  FAST_PWM_ICR1 :
		   CLR_BIT(TCCR1A,WGM10);
    264a:	af e4       	ldi	r26, 0x4F	; 79
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	ef e4       	ldi	r30, 0x4F	; 79
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	8e 7f       	andi	r24, 0xFE	; 254
    2656:	8c 93       	st	X, r24
		   SET_BIT(TCCR1A,WGM11);
    2658:	af e4       	ldi	r26, 0x4F	; 79
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	ef e4       	ldi	r30, 0x4F	; 79
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	82 60       	ori	r24, 0x02	; 2
    2664:	8c 93       	st	X, r24
		   SET_BIT(TCCR1B,WGM12);
    2666:	ae e4       	ldi	r26, 0x4E	; 78
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	ee e4       	ldi	r30, 0x4E	; 78
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	88 60       	ori	r24, 0x08	; 8
    2672:	8c 93       	st	X, r24
		   SET_BIT(TCCR1B,WGM13);
    2674:	ae e4       	ldi	r26, 0x4E	; 78
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	ee e4       	ldi	r30, 0x4E	; 78
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	80 61       	ori	r24, 0x10	; 16
    2680:	8c 93       	st	X, r24
    2682:	1c c0       	rjmp	.+56     	; 0x26bc <TIMER1_VidInitializeMode15+0xac>
	       break                ;
	   case  FAST_PWM_OCR1A :
		   SET_BIT(TCCR1A,WGM10);
    2684:	af e4       	ldi	r26, 0x4F	; 79
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	ef e4       	ldi	r30, 0x4F	; 79
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	81 60       	ori	r24, 0x01	; 1
    2690:	8c 93       	st	X, r24
		   SET_BIT(TCCR1A,WGM11);
    2692:	af e4       	ldi	r26, 0x4F	; 79
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	ef e4       	ldi	r30, 0x4F	; 79
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	82 60       	ori	r24, 0x02	; 2
    269e:	8c 93       	st	X, r24
		   SET_BIT(TCCR1B,WGM12);
    26a0:	ae e4       	ldi	r26, 0x4E	; 78
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	ee e4       	ldi	r30, 0x4E	; 78
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	80 81       	ld	r24, Z
    26aa:	88 60       	ori	r24, 0x08	; 8
    26ac:	8c 93       	st	X, r24
		   SET_BIT(TCCR1B,WGM13);
    26ae:	ae e4       	ldi	r26, 0x4E	; 78
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	ee e4       	ldi	r30, 0x4E	; 78
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	80 61       	ori	r24, 0x10	; 16
    26ba:	8c 93       	st	X, r24
	       break                ;
	}
	switch(ModelA){
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	28 2f       	mov	r18, r24
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	3f 83       	std	Y+7, r19	; 0x07
    26c4:	2e 83       	std	Y+6, r18	; 0x06
    26c6:	8e 81       	ldd	r24, Y+6	; 0x06
    26c8:	9f 81       	ldd	r25, Y+7	; 0x07
    26ca:	81 30       	cpi	r24, 0x01	; 1
    26cc:	91 05       	cpc	r25, r1
    26ce:	21 f1       	breq	.+72     	; 0x2718 <TIMER1_VidInitializeMode15+0x108>
    26d0:	2e 81       	ldd	r18, Y+6	; 0x06
    26d2:	3f 81       	ldd	r19, Y+7	; 0x07
    26d4:	22 30       	cpi	r18, 0x02	; 2
    26d6:	31 05       	cpc	r19, r1
    26d8:	2c f4       	brge	.+10     	; 0x26e4 <TIMER1_VidInitializeMode15+0xd4>
    26da:	8e 81       	ldd	r24, Y+6	; 0x06
    26dc:	9f 81       	ldd	r25, Y+7	; 0x07
    26de:	00 97       	sbiw	r24, 0x00	; 0
    26e0:	61 f0       	breq	.+24     	; 0x26fa <TIMER1_VidInitializeMode15+0xea>
    26e2:	46 c0       	rjmp	.+140    	; 0x2770 <TIMER1_VidInitializeMode15+0x160>
    26e4:	2e 81       	ldd	r18, Y+6	; 0x06
    26e6:	3f 81       	ldd	r19, Y+7	; 0x07
    26e8:	22 30       	cpi	r18, 0x02	; 2
    26ea:	31 05       	cpc	r19, r1
    26ec:	21 f1       	breq	.+72     	; 0x2736 <TIMER1_VidInitializeMode15+0x126>
    26ee:	8e 81       	ldd	r24, Y+6	; 0x06
    26f0:	9f 81       	ldd	r25, Y+7	; 0x07
    26f2:	83 30       	cpi	r24, 0x03	; 3
    26f4:	91 05       	cpc	r25, r1
    26f6:	71 f1       	breq	.+92     	; 0x2754 <TIMER1_VidInitializeMode15+0x144>
    26f8:	3b c0       	rjmp	.+118    	; 0x2770 <TIMER1_VidInitializeMode15+0x160>
		case   Normal :
		   CLR_BIT(TCCR1A,COM1A0);
    26fa:	af e4       	ldi	r26, 0x4F	; 79
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	ef e4       	ldi	r30, 0x4F	; 79
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	8f 7b       	andi	r24, 0xBF	; 191
    2706:	8c 93       	st	X, r24
		   CLR_BIT(TCCR1A,COM1A1);
    2708:	af e4       	ldi	r26, 0x4F	; 79
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	ef e4       	ldi	r30, 0x4F	; 79
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	8f 77       	andi	r24, 0x7F	; 127
    2714:	8c 93       	st	X, r24
    2716:	2c c0       	rjmp	.+88     	; 0x2770 <TIMER1_VidInitializeMode15+0x160>
		   break                 ;
		case   Toggle :
			SET_BIT(TCCR1A,COM1A0);
    2718:	af e4       	ldi	r26, 0x4F	; 79
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	ef e4       	ldi	r30, 0x4F	; 79
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	80 64       	ori	r24, 0x40	; 64
    2724:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,COM1A1);
    2726:	af e4       	ldi	r26, 0x4F	; 79
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	ef e4       	ldi	r30, 0x4F	; 79
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	8f 77       	andi	r24, 0x7F	; 127
    2732:	8c 93       	st	X, r24
    2734:	1d c0       	rjmp	.+58     	; 0x2770 <TIMER1_VidInitializeMode15+0x160>
		    break                 ;
		case   CLEAR :
			CLR_BIT(TCCR1A,COM1A0);
    2736:	af e4       	ldi	r26, 0x4F	; 79
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	ef e4       	ldi	r30, 0x4F	; 79
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	8f 7b       	andi	r24, 0xBF	; 191
    2742:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A1);
    2744:	af e4       	ldi	r26, 0x4F	; 79
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	ef e4       	ldi	r30, 0x4F	; 79
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	80 68       	ori	r24, 0x80	; 128
    2750:	8c 93       	st	X, r24
    2752:	0e c0       	rjmp	.+28     	; 0x2770 <TIMER1_VidInitializeMode15+0x160>
		    break                 ;
		case   SET :
			SET_BIT(TCCR1A,COM1A0);
    2754:	af e4       	ldi	r26, 0x4F	; 79
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	ef e4       	ldi	r30, 0x4F	; 79
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	80 64       	ori	r24, 0x40	; 64
    2760:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A1);
    2762:	af e4       	ldi	r26, 0x4F	; 79
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	ef e4       	ldi	r30, 0x4F	; 79
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	80 68       	ori	r24, 0x80	; 128
    276e:	8c 93       	st	X, r24
		    break                 ;
	}
	switch(ModelB){
    2770:	8b 81       	ldd	r24, Y+3	; 0x03
    2772:	28 2f       	mov	r18, r24
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	3d 83       	std	Y+5, r19	; 0x05
    2778:	2c 83       	std	Y+4, r18	; 0x04
    277a:	8c 81       	ldd	r24, Y+4	; 0x04
    277c:	9d 81       	ldd	r25, Y+5	; 0x05
    277e:	81 30       	cpi	r24, 0x01	; 1
    2780:	91 05       	cpc	r25, r1
    2782:	21 f1       	breq	.+72     	; 0x27cc <TIMER1_VidInitializeMode15+0x1bc>
    2784:	2c 81       	ldd	r18, Y+4	; 0x04
    2786:	3d 81       	ldd	r19, Y+5	; 0x05
    2788:	22 30       	cpi	r18, 0x02	; 2
    278a:	31 05       	cpc	r19, r1
    278c:	2c f4       	brge	.+10     	; 0x2798 <TIMER1_VidInitializeMode15+0x188>
    278e:	8c 81       	ldd	r24, Y+4	; 0x04
    2790:	9d 81       	ldd	r25, Y+5	; 0x05
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	61 f0       	breq	.+24     	; 0x27ae <TIMER1_VidInitializeMode15+0x19e>
    2796:	46 c0       	rjmp	.+140    	; 0x2824 <TIMER1_VidInitializeMode15+0x214>
    2798:	2c 81       	ldd	r18, Y+4	; 0x04
    279a:	3d 81       	ldd	r19, Y+5	; 0x05
    279c:	22 30       	cpi	r18, 0x02	; 2
    279e:	31 05       	cpc	r19, r1
    27a0:	21 f1       	breq	.+72     	; 0x27ea <TIMER1_VidInitializeMode15+0x1da>
    27a2:	8c 81       	ldd	r24, Y+4	; 0x04
    27a4:	9d 81       	ldd	r25, Y+5	; 0x05
    27a6:	83 30       	cpi	r24, 0x03	; 3
    27a8:	91 05       	cpc	r25, r1
    27aa:	71 f1       	breq	.+92     	; 0x2808 <TIMER1_VidInitializeMode15+0x1f8>
    27ac:	3b c0       	rjmp	.+118    	; 0x2824 <TIMER1_VidInitializeMode15+0x214>
		case   Normal :
		   CLR_BIT(TCCR1A,COM1B0);
    27ae:	af e4       	ldi	r26, 0x4F	; 79
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	ef e4       	ldi	r30, 0x4F	; 79
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	8f 7e       	andi	r24, 0xEF	; 239
    27ba:	8c 93       	st	X, r24
		   CLR_BIT(TCCR1A,COM1B1);
    27bc:	af e4       	ldi	r26, 0x4F	; 79
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	ef e4       	ldi	r30, 0x4F	; 79
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	8f 7d       	andi	r24, 0xDF	; 223
    27c8:	8c 93       	st	X, r24
    27ca:	2c c0       	rjmp	.+88     	; 0x2824 <TIMER1_VidInitializeMode15+0x214>
		   break                 ;
		case   Toggle :
			SET_BIT(TCCR1A,COM1B0);
    27cc:	af e4       	ldi	r26, 0x4F	; 79
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	ef e4       	ldi	r30, 0x4F	; 79
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	80 61       	ori	r24, 0x10	; 16
    27d8:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,COM1B1);
    27da:	af e4       	ldi	r26, 0x4F	; 79
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	ef e4       	ldi	r30, 0x4F	; 79
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	8f 7d       	andi	r24, 0xDF	; 223
    27e6:	8c 93       	st	X, r24
    27e8:	1d c0       	rjmp	.+58     	; 0x2824 <TIMER1_VidInitializeMode15+0x214>
			break                 ;
		case   CLEAR :
			CLR_BIT(TCCR1A,COM1B0);
    27ea:	af e4       	ldi	r26, 0x4F	; 79
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	ef e4       	ldi	r30, 0x4F	; 79
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	8f 7e       	andi	r24, 0xEF	; 239
    27f6:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1B1);
    27f8:	af e4       	ldi	r26, 0x4F	; 79
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	ef e4       	ldi	r30, 0x4F	; 79
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	80 62       	ori	r24, 0x20	; 32
    2804:	8c 93       	st	X, r24
    2806:	0e c0       	rjmp	.+28     	; 0x2824 <TIMER1_VidInitializeMode15+0x214>
			break                 ;
		case   SET :
			SET_BIT(TCCR1A,COM1B0);
    2808:	af e4       	ldi	r26, 0x4F	; 79
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	ef e4       	ldi	r30, 0x4F	; 79
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	80 61       	ori	r24, 0x10	; 16
    2814:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1B1);
    2816:	af e4       	ldi	r26, 0x4F	; 79
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	ef e4       	ldi	r30, 0x4F	; 79
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	80 62       	ori	r24, 0x20	; 32
    2822:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,CS12);
		CLR_BIT(TCCR1B,CS11);
		SET_BIT(TCCR1B,CS10);
		PRE_SCALAR_TIMER1 = 1 ;
	#elif PRE_TYPE_TIMER1 == PRE_8
		CLR_BIT(TCCR1B,CS12);
    2824:	ae e4       	ldi	r26, 0x4E	; 78
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	ee e4       	ldi	r30, 0x4E	; 78
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	8b 7f       	andi	r24, 0xFB	; 251
    2830:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS11);
    2832:	ae e4       	ldi	r26, 0x4E	; 78
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	ee e4       	ldi	r30, 0x4E	; 78
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	82 60       	ori	r24, 0x02	; 2
    283e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,CS10);
    2840:	ae e4       	ldi	r26, 0x4E	; 78
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	ee e4       	ldi	r30, 0x4E	; 78
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	8e 7f       	andi	r24, 0xFE	; 254
    284c:	8c 93       	st	X, r24
		PRE_SCALAR_TIMER1 = 8 ;
    284e:	88 e0       	ldi	r24, 0x08	; 8
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	90 93 89 01 	sts	0x0189, r25
    2856:	80 93 88 01 	sts	0x0188, r24
		SET_BIT(TCCR1B,CS12);
		CLR_BIT(TCCR1B,CS11);
		SET_BIT(TCCR1B,CS10);
		PRE_SCALAR_TIMER1 = 1024 ;
	#endif
}
    285a:	29 96       	adiw	r28, 0x09	; 9
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <TIMER1_VidSetOCR1A>:

void TIMER1_VidSetOCR1A(u16 CopyOCR1A)
{
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	00 d0       	rcall	.+0      	; 0x2872 <TIMER1_VidSetOCR1A+0x6>
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	9a 83       	std	Y+2, r25	; 0x02
    2878:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH = (u8)(CopyOCR1A>>8);
    287a:	eb e4       	ldi	r30, 0x4B	; 75
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	9a 81       	ldd	r25, Y+2	; 0x02
    2882:	89 2f       	mov	r24, r25
    2884:	99 27       	eor	r25, r25
    2886:	80 83       	st	Z, r24
	OCR1AL = (u8)(CopyOCR1A);
    2888:	ea e4       	ldi	r30, 0x4A	; 74
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	89 81       	ldd	r24, Y+1	; 0x01
    288e:	80 83       	st	Z, r24
}
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	08 95       	ret

0000289a <TIMER1_VidSetOCR1B>:
void TIMER1_VidSetOCR1B(u16 CopyOCR1B)
{
    289a:	df 93       	push	r29
    289c:	cf 93       	push	r28
    289e:	00 d0       	rcall	.+0      	; 0x28a0 <TIMER1_VidSetOCR1B+0x6>
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	9a 83       	std	Y+2, r25	; 0x02
    28a6:	89 83       	std	Y+1, r24	; 0x01
	OCR1BH = (u8)(CopyOCR1B>>8);
    28a8:	e9 e4       	ldi	r30, 0x49	; 73
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
    28ae:	9a 81       	ldd	r25, Y+2	; 0x02
    28b0:	89 2f       	mov	r24, r25
    28b2:	99 27       	eor	r25, r25
    28b4:	80 83       	st	Z, r24
	OCR1BL = (u8)(CopyOCR1B);
    28b6:	e8 e4       	ldi	r30, 0x48	; 72
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	80 83       	st	Z, r24
}
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	08 95       	ret

000028c8 <TIMER1_VidSetICR1>:
void TIMER1_VidSetICR1(u16 Copy_ICR1)
{
    28c8:	df 93       	push	r29
    28ca:	cf 93       	push	r28
    28cc:	00 d0       	rcall	.+0      	; 0x28ce <TIMER1_VidSetICR1+0x6>
    28ce:	cd b7       	in	r28, 0x3d	; 61
    28d0:	de b7       	in	r29, 0x3e	; 62
    28d2:	9a 83       	std	Y+2, r25	; 0x02
    28d4:	89 83       	std	Y+1, r24	; 0x01
	ICR1H = (u8)(Copy_ICR1>>8);
    28d6:	e7 e4       	ldi	r30, 0x47	; 71
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	9a 81       	ldd	r25, Y+2	; 0x02
    28de:	89 2f       	mov	r24, r25
    28e0:	99 27       	eor	r25, r25
    28e2:	80 83       	st	Z, r24
	ICR1L = (u8)(Copy_ICR1)   ;
    28e4:	e6 e4       	ldi	r30, 0x46	; 70
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	80 83       	st	Z, r24
}
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	08 95       	ret

000028f6 <Timer1Icu_init>:
/******************************************************************************************************/


void Timer1Icu_init()
{
    28f6:	df 93       	push	r29
    28f8:	cf 93       	push	r28
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
	/* Configure ICP1/PD6 as i/p pin */
	DIO_VidSetPinDirection(ICP_PORT,ICP_PIN,0);
    28fe:	83 e0       	ldi	r24, 0x03	; 3
    2900:	66 e0       	ldi	r22, 0x06	; 6
    2902:	40 e0       	ldi	r20, 0x00	; 0
    2904:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2908:	ef e4       	ldi	r30, 0x4F	; 79
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	8c e0       	ldi	r24, 0x0C	; 12
    290e:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	 CLR_BIT(TCCR1B,CS10);
    2910:	ae e4       	ldi	r26, 0x4E	; 78
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	ee e4       	ldi	r30, 0x4E	; 78
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	8e 7f       	andi	r24, 0xFE	; 254
    291c:	8c 93       	st	X, r24
	 SET_BIT(TCCR1B,CS11);
    291e:	ae e4       	ldi	r26, 0x4E	; 78
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	ee e4       	ldi	r30, 0x4E	; 78
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	82 60       	ori	r24, 0x02	; 2
    292a:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1B,CS12);
    292c:	ae e4       	ldi	r26, 0x4E	; 78
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	ee e4       	ldi	r30, 0x4E	; 78
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	8b 7f       	andi	r24, 0xFB	; 251
    2938:	8c 93       	st	X, r24

	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	 SET_BIT(TCCR1B,ICES1);
    293a:	ae e4       	ldi	r26, 0x4E	; 78
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	ee e4       	ldi	r30, 0x4E	; 78
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	80 64       	ori	r24, 0x40	; 64
    2946:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    2948:	ec e4       	ldi	r30, 0x4C	; 76
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	11 82       	std	Z+1, r1	; 0x01
    294e:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    2950:	e6 e4       	ldi	r30, 0x46	; 70
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	11 82       	std	Z+1, r1	; 0x01
    2956:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    2958:	a9 e5       	ldi	r26, 0x59	; 89
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	e9 e5       	ldi	r30, 0x59	; 89
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	80 62       	ori	r24, 0x20	; 32
    2964:	8c 93       	st	X, r24
}
    2966:	cf 91       	pop	r28
    2968:	df 91       	pop	r29
    296a:	08 95       	ret

0000296c <Timer1Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer1Icu_setCallBack(void(*a_ptr)(void))
{
    296c:	df 93       	push	r29
    296e:	cf 93       	push	r28
    2970:	00 d0       	rcall	.+0      	; 0x2972 <Timer1Icu_setCallBack+0x6>
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
    2976:	9a 83       	std	Y+2, r25	; 0x02
    2978:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	Timer1_IcuCallBack = a_ptr;
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	9a 81       	ldd	r25, Y+2	; 0x02
    297e:	90 93 71 01 	sts	0x0171, r25
    2982:	80 93 70 01 	sts	0x0170, r24
}
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <Timer1Icu_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void Timer1Icu_setEdgeDetectionType(u8 Copy_u8EdgeType)
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	0f 92       	push	r0
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
    299a:	89 83       	std	Y+1, r24	; 0x01
	   if(Copy_u8EdgeType == RISING_EDGY)
    299c:	89 81       	ldd	r24, Y+1	; 0x01
    299e:	81 30       	cpi	r24, 0x01	; 1
    29a0:	41 f4       	brne	.+16     	; 0x29b2 <Timer1Icu_setEdgeDetectionType+0x22>
	   {
		  SET_BIT(TCCR1B,ICES1);
    29a2:	ae e4       	ldi	r26, 0x4E	; 78
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	ee e4       	ldi	r30, 0x4E	; 78
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	80 81       	ld	r24, Z
    29ac:	80 64       	ori	r24, 0x40	; 64
    29ae:	8c 93       	st	X, r24
    29b0:	0a c0       	rjmp	.+20     	; 0x29c6 <Timer1Icu_setEdgeDetectionType+0x36>
	   }
	   else if(Copy_u8EdgeType == FALLING_EDGY)
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	88 23       	and	r24, r24
    29b6:	39 f4       	brne	.+14     	; 0x29c6 <Timer1Icu_setEdgeDetectionType+0x36>
	   {
		  CLR_BIT(TCCR1B,ICES1);
    29b8:	ae e4       	ldi	r26, 0x4E	; 78
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	ee e4       	ldi	r30, 0x4E	; 78
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	8f 7b       	andi	r24, 0xBF	; 191
    29c4:	8c 93       	st	X, r24
	   }
}
    29c6:	0f 90       	pop	r0
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	08 95       	ret

000029ce <Timer1Icu_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
u16 Timer1Icu_getInputCaptureValue(void)
{
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
	 return ICR1;
    29d6:	e6 e4       	ldi	r30, 0x46	; 70
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	91 81       	ldd	r25, Z+1	; 0x01
}
    29de:	cf 91       	pop	r28
    29e0:	df 91       	pop	r29
    29e2:	08 95       	ret

000029e4 <Timer1Icu_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Timer1Icu_clearTimerValue(void)
{
    29e4:	df 93       	push	r29
    29e6:	cf 93       	push	r28
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    29ec:	ec e4       	ldi	r30, 0x4C	; 76
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	11 82       	std	Z+1, r1	; 0x01
    29f2:	10 82       	st	Z, r1
}
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	08 95       	ret

000029fa <TIMER2_VidInitialize>:



/*******************To initialize OV or COMPARE or FAST_PWM mode***************************************/
//to check that you don't use OV or COMPARE or FAST_PWM mode
void TIMER2_VidInitialize (void) {
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
	//define pin of timer 2
	DIO_VidSetPinDirection(3,7,1);
    2a02:	83 e0       	ldi	r24, 0x03	; 3
    2a04:	67 e0       	ldi	r22, 0x07	; 7
    2a06:	41 e0       	ldi	r20, 0x01	; 1
    2a08:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(3,7,0);
    2a0c:	83 e0       	ldi	r24, 0x03	; 3
    2a0e:	67 e0       	ldi	r22, 0x07	; 7
    2a10:	40 e0       	ldi	r20, 0x00	; 0
    2a12:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
	SET_BIT(TIMSK,OCIE2);
#endif

#if TIMER2_MODE == FAST_PWM
	// to initialize timer0 on 0 , FOCO = 0
	TCCR2 = 0 ;
    2a16:	e5 e4       	ldi	r30, 0x45	; 69
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	10 82       	st	Z, r1

	// 1 1 Fast PWM
	SET_BIT(TCCR2,WGM20);
    2a1c:	a5 e4       	ldi	r26, 0x45	; 69
    2a1e:	b0 e0       	ldi	r27, 0x00	; 0
    2a20:	e5 e4       	ldi	r30, 0x45	; 69
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	80 81       	ld	r24, Z
    2a26:	80 64       	ori	r24, 0x40	; 64
    2a28:	8c 93       	st	X, r24
	SET_BIT(TCCR2,WGM21);
    2a2a:	a5 e4       	ldi	r26, 0x45	; 69
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	e5 e4       	ldi	r30, 0x45	; 69
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	88 60       	ori	r24, 0x08	; 8
    2a36:	8c 93       	st	X, r24

	//1 0 Clear OC0 on compare match, set OC0 at TOP ,  NON_INVERED MODE PWM
	SET_BIT(TCCR2,COM21);
    2a38:	a5 e4       	ldi	r26, 0x45	; 69
    2a3a:	b0 e0       	ldi	r27, 0x00	; 0
    2a3c:	e5 e4       	ldi	r30, 0x45	; 69
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	80 81       	ld	r24, Z
    2a42:	80 62       	ori	r24, 0x20	; 32
    2a44:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,COM20);
    2a46:	a5 e4       	ldi	r26, 0x45	; 69
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	e5 e4       	ldi	r30, 0x45	; 69
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	80 81       	ld	r24, Z
    2a50:	8f 7e       	andi	r24, 0xEF	; 239
    2a52:	8c 93       	st	X, r24
#if PRE_TYPE_TIMER2 == NO_PRE
	CLR_BIT(TCCR2,CS22);
	CLR_BIT(TCCR2,CS21);
	SET_BIT(TCCR2,CS20);
#elif PRE_TYPE_TIMER2 == PRE_8
	CLR_BIT(TCCR2,CS22);
    2a54:	a5 e4       	ldi	r26, 0x45	; 69
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	e5 e4       	ldi	r30, 0x45	; 69
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	8b 7f       	andi	r24, 0xFB	; 251
    2a60:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS21);
    2a62:	a5 e4       	ldi	r26, 0x45	; 69
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	e5 e4       	ldi	r30, 0x45	; 69
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	80 81       	ld	r24, Z
    2a6c:	82 60       	ori	r24, 0x02	; 2
    2a6e:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS20);
    2a70:	a5 e4       	ldi	r26, 0x45	; 69
    2a72:	b0 e0       	ldi	r27, 0x00	; 0
    2a74:	e5 e4       	ldi	r30, 0x45	; 69
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	80 81       	ld	r24, Z
    2a7a:	8e 7f       	andi	r24, 0xFE	; 254
    2a7c:	8c 93       	st	X, r24
	PRE_SCALAR_TIMER2 = 8 ;
    2a7e:	88 e0       	ldi	r24, 0x08	; 8
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	90 93 93 01 	sts	0x0193, r25
    2a86:	80 93 92 01 	sts	0x0192, r24
	CLR_BIT(TCCR2,CS21);
	SET_BIT(TCCR2,CS20);
	PRE_SCALAR_TIMER2 = 1024 ;
#endif

}//end FUNC TIMER_VidInitialize
    2a8a:	cf 91       	pop	r28
    2a8c:	df 91       	pop	r29
    2a8e:	08 95       	ret

00002a90 <Timer2_VidSETDUTY>:


//to check that you use FAST_PWM mode
#if TIMER2_MODE == FAST_PWM

void Timer2_VidSETDUTY (u8 duty ) {
    2a90:	df 93       	push	r29
    2a92:	cf 93       	push	r28
    2a94:	0f 92       	push	r0
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	89 83       	std	Y+1, r24	; 0x01
	duty = (u8)( (u16)duty*255/100 ) ;
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	48 2f       	mov	r20, r24
    2aa0:	50 e0       	ldi	r21, 0x00	; 0
    2aa2:	ca 01       	movw	r24, r20
    2aa4:	9c 01       	movw	r18, r24
    2aa6:	22 0f       	add	r18, r18
    2aa8:	33 1f       	adc	r19, r19
    2aaa:	c9 01       	movw	r24, r18
    2aac:	96 95       	lsr	r25
    2aae:	98 2f       	mov	r25, r24
    2ab0:	88 27       	eor	r24, r24
    2ab2:	97 95       	ror	r25
    2ab4:	87 95       	ror	r24
    2ab6:	82 1b       	sub	r24, r18
    2ab8:	93 0b       	sbc	r25, r19
    2aba:	84 0f       	add	r24, r20
    2abc:	95 1f       	adc	r25, r21
    2abe:	24 e6       	ldi	r18, 0x64	; 100
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	b9 01       	movw	r22, r18
    2ac4:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <__udivmodhi4>
    2ac8:	cb 01       	movw	r24, r22
    2aca:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = duty ;
    2acc:	e3 e4       	ldi	r30, 0x43	; 67
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	80 83       	st	Z, r24
}
    2ad4:	0f 90       	pop	r0
    2ad6:	cf 91       	pop	r28
    2ad8:	df 91       	pop	r29
    2ada:	08 95       	ret

00002adc <__vector_11>:
    5) PRE_1024 every 1sec need t_ov = 32.768ms , num_ov = 30.51757813 , pre_load = 0.51757813
*/



void __vector_11(void){
    2adc:	1f 92       	push	r1
    2ade:	0f 92       	push	r0
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	0f 92       	push	r0
    2ae4:	11 24       	eor	r1, r1
    2ae6:	2f 93       	push	r18
    2ae8:	3f 93       	push	r19
    2aea:	4f 93       	push	r20
    2aec:	5f 93       	push	r21
    2aee:	6f 93       	push	r22
    2af0:	7f 93       	push	r23
    2af2:	8f 93       	push	r24
    2af4:	9f 93       	push	r25
    2af6:	af 93       	push	r26
    2af8:	bf 93       	push	r27
    2afa:	ef 93       	push	r30
    2afc:	ff 93       	push	r31
    2afe:	df 93       	push	r29
    2b00:	cf 93       	push	r28
    2b02:	cd b7       	in	r28, 0x3d	; 61
    2b04:	de b7       	in	r29, 0x3e	; 62
     TIMER0_PFUNC();
    2b06:	e0 91 68 01 	lds	r30, 0x0168
    2b0a:	f0 91 69 01 	lds	r31, 0x0169
    2b0e:	09 95       	icall
}//end ISR FUNC
    2b10:	cf 91       	pop	r28
    2b12:	df 91       	pop	r29
    2b14:	ff 91       	pop	r31
    2b16:	ef 91       	pop	r30
    2b18:	bf 91       	pop	r27
    2b1a:	af 91       	pop	r26
    2b1c:	9f 91       	pop	r25
    2b1e:	8f 91       	pop	r24
    2b20:	7f 91       	pop	r23
    2b22:	6f 91       	pop	r22
    2b24:	5f 91       	pop	r21
    2b26:	4f 91       	pop	r20
    2b28:	3f 91       	pop	r19
    2b2a:	2f 91       	pop	r18
    2b2c:	0f 90       	pop	r0
    2b2e:	0f be       	out	0x3f, r0	; 63
    2b30:	0f 90       	pop	r0
    2b32:	1f 90       	pop	r1
    2b34:	18 95       	reti

00002b36 <__vector_5>:

/****************************************************************************/

void __vector_5(void){
    2b36:	1f 92       	push	r1
    2b38:	0f 92       	push	r0
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	0f 92       	push	r0
    2b3e:	11 24       	eor	r1, r1
    2b40:	0f 93       	push	r16
    2b42:	1f 93       	push	r17
    2b44:	2f 93       	push	r18
    2b46:	3f 93       	push	r19
    2b48:	4f 93       	push	r20
    2b4a:	5f 93       	push	r21
    2b4c:	6f 93       	push	r22
    2b4e:	7f 93       	push	r23
    2b50:	8f 93       	push	r24
    2b52:	9f 93       	push	r25
    2b54:	af 93       	push	r26
    2b56:	bf 93       	push	r27
    2b58:	ef 93       	push	r30
    2b5a:	ff 93       	push	r31
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
	static u32 tick = 0 ;
	tick++ ;
    2b64:	80 91 6e 01 	lds	r24, 0x016E
    2b68:	90 91 6f 01 	lds	r25, 0x016F
    2b6c:	01 96       	adiw	r24, 0x01	; 1
    2b6e:	90 93 6f 01 	sts	0x016F, r25
    2b72:	80 93 6e 01 	sts	0x016E, r24

	if (tick == (u32)NUM_OV_TIMER2 ){
    2b76:	80 91 98 01 	lds	r24, 0x0198
    2b7a:	90 91 99 01 	lds	r25, 0x0199
    2b7e:	a0 91 9a 01 	lds	r26, 0x019A
    2b82:	b0 91 9b 01 	lds	r27, 0x019B
    2b86:	bc 01       	movw	r22, r24
    2b88:	cd 01       	movw	r24, r26
    2b8a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	9c 01       	movw	r18, r24
    2b94:	80 91 6e 01 	lds	r24, 0x016E
    2b98:	90 91 6f 01 	lds	r25, 0x016F
    2b9c:	28 17       	cp	r18, r24
    2b9e:	39 07       	cpc	r19, r25
    2ba0:	79 f5       	brne	.+94     	; 0x2c00 <__vector_5+0xca>
		TIMER2_PFUNC();                                     //to toggle led
    2ba2:	e0 91 6c 01 	lds	r30, 0x016C
    2ba6:	f0 91 6d 01 	lds	r31, 0x016D
    2baa:	09 95       	icall
		TCNT2 = 256-(256*PRE_LOAD_TIMER2);                         //to begin from specific value
    2bac:	04 e4       	ldi	r16, 0x44	; 68
    2bae:	10 e0       	ldi	r17, 0x00	; 0
    2bb0:	80 91 9c 01 	lds	r24, 0x019C
    2bb4:	90 91 9d 01 	lds	r25, 0x019D
    2bb8:	a0 91 9e 01 	lds	r26, 0x019E
    2bbc:	b0 91 9f 01 	lds	r27, 0x019F
    2bc0:	bc 01       	movw	r22, r24
    2bc2:	cd 01       	movw	r24, r26
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e8       	ldi	r20, 0x80	; 128
    2bca:	53 ec       	ldi	r21, 0xC3	; 195
    2bcc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	bc 01       	movw	r22, r24
    2bd6:	cd 01       	movw	r24, r26
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	40 e8       	ldi	r20, 0x80	; 128
    2bde:	53 e4       	ldi	r21, 0x43	; 67
    2be0:	0e 94 4d 03 	call	0x69a	; 0x69a <__addsf3>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	bc 01       	movw	r22, r24
    2bea:	cd 01       	movw	r24, r26
    2bec:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	f8 01       	movw	r30, r16
    2bf6:	80 83       	st	Z, r24
		tick = 0 ;                                          //to start count from beginning again
    2bf8:	10 92 6f 01 	sts	0x016F, r1
    2bfc:	10 92 6e 01 	sts	0x016E, r1
	}//end if
}//end ISR FUNC
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	ff 91       	pop	r31
    2c06:	ef 91       	pop	r30
    2c08:	bf 91       	pop	r27
    2c0a:	af 91       	pop	r26
    2c0c:	9f 91       	pop	r25
    2c0e:	8f 91       	pop	r24
    2c10:	7f 91       	pop	r23
    2c12:	6f 91       	pop	r22
    2c14:	5f 91       	pop	r21
    2c16:	4f 91       	pop	r20
    2c18:	3f 91       	pop	r19
    2c1a:	2f 91       	pop	r18
    2c1c:	1f 91       	pop	r17
    2c1e:	0f 91       	pop	r16
    2c20:	0f 90       	pop	r0
    2c22:	0f be       	out	0x3f, r0	; 63
    2c24:	0f 90       	pop	r0
    2c26:	1f 90       	pop	r1
    2c28:	18 95       	reti

00002c2a <__vector_9>:

/********************************************************************************/

void __vector_9(void){
    2c2a:	1f 92       	push	r1
    2c2c:	0f 92       	push	r0
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	0f 92       	push	r0
    2c32:	11 24       	eor	r1, r1
    2c34:	df 93       	push	r29
    2c36:	cf 93       	push	r28
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
/*****************************************/
}//end ISR FUNC
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	0f 90       	pop	r0
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	0f 90       	pop	r0
    2c46:	1f 90       	pop	r1
    2c48:	18 95       	reti

00002c4a <__vector_6>:

void __vector_6(void){
    2c4a:	1f 92       	push	r1
    2c4c:	0f 92       	push	r0
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	0f 92       	push	r0
    2c52:	11 24       	eor	r1, r1
    2c54:	2f 93       	push	r18
    2c56:	3f 93       	push	r19
    2c58:	4f 93       	push	r20
    2c5a:	5f 93       	push	r21
    2c5c:	6f 93       	push	r22
    2c5e:	7f 93       	push	r23
    2c60:	8f 93       	push	r24
    2c62:	9f 93       	push	r25
    2c64:	af 93       	push	r26
    2c66:	bf 93       	push	r27
    2c68:	ef 93       	push	r30
    2c6a:	ff 93       	push	r31
    2c6c:	df 93       	push	r29
    2c6e:	cf 93       	push	r28
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_IcuCallBack != 0 )
    2c74:	80 91 70 01 	lds	r24, 0x0170
    2c78:	90 91 71 01 	lds	r25, 0x0171
    2c7c:	00 97       	sbiw	r24, 0x00	; 0
    2c7e:	29 f0       	breq	.+10     	; 0x2c8a <__vector_6+0x40>
	{
		Timer1_IcuCallBack();
    2c80:	e0 91 70 01 	lds	r30, 0x0170
    2c84:	f0 91 71 01 	lds	r31, 0x0171
    2c88:	09 95       	icall
	}
}
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	ff 91       	pop	r31
    2c90:	ef 91       	pop	r30
    2c92:	bf 91       	pop	r27
    2c94:	af 91       	pop	r26
    2c96:	9f 91       	pop	r25
    2c98:	8f 91       	pop	r24
    2c9a:	7f 91       	pop	r23
    2c9c:	6f 91       	pop	r22
    2c9e:	5f 91       	pop	r21
    2ca0:	4f 91       	pop	r20
    2ca2:	3f 91       	pop	r19
    2ca4:	2f 91       	pop	r18
    2ca6:	0f 90       	pop	r0
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	0f 90       	pop	r0
    2cac:	1f 90       	pop	r1
    2cae:	18 95       	reti

00002cb0 <Timer0_PWM_Init>:
 * F_PWM=(F_CPU)/(256*N) = (10^6)/(256*8) = 500Hz
 * Duty Cycle can be changed by updating the value
 * in The Compare Register
 */
void Timer0_PWM_Init(unsigned char set_duty_cycle)
{
    2cb0:	df 93       	push	r29
    2cb2:	cf 93       	push	r28
    2cb4:	0f 92       	push	r0
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
    2cba:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Set Timer Initial Value to 0
    2cbc:	e2 e5       	ldi	r30, 0x52	; 82
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle; //Set Compare value
    2cc2:	ec e5       	ldi	r30, 0x5C	; 92
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    2cca:	a7 e3       	ldi	r26, 0x37	; 55
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	e7 e3       	ldi	r30, 0x37	; 55
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	88 60       	ori	r24, 0x08	; 8
    2cd6:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2cd8:	e3 e5       	ldi	r30, 0x53	; 83
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	8a e6       	ldi	r24, 0x6A	; 106
    2cde:	80 83       	st	Z, r24
}
    2ce0:	0f 90       	pop	r0
    2ce2:	cf 91       	pop	r28
    2ce4:	df 91       	pop	r29
    2ce6:	08 95       	ret

00002ce8 <Timer0_PWM_DeInit>:
void Timer0_PWM_DeInit()
{
    2ce8:	df 93       	push	r29
    2cea:	cf 93       	push	r28
    2cec:	cd b7       	in	r28, 0x3d	; 61
    2cee:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;  //stops timer 0
    2cf0:	e3 e5       	ldi	r30, 0x53	; 83
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	10 82       	st	Z, r1
}
    2cf6:	cf 91       	pop	r28
    2cf8:	df 91       	pop	r29
    2cfa:	08 95       	ret

00002cfc <UART_VidInit>:
#include "avr/delay.h"

/* Own Driver Files*/
#include "DIO_interface.h"

void UART_VidInit () {
    2cfc:	df 93       	push	r29
    2cfe:	cf 93       	push	r28
    2d00:	0f 92       	push	r0
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62
	/* to define pins of TX RX */
	DIO_VidSetPinDirection(3,0,0);
    2d06:	83 e0       	ldi	r24, 0x03	; 3
    2d08:	60 e0       	ldi	r22, 0x00	; 0
    2d0a:	40 e0       	ldi	r20, 0x00	; 0
    2d0c:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(3,1,1);
    2d10:	83 e0       	ldi	r24, 0x03	; 3
    2d12:	61 e0       	ldi	r22, 0x01	; 1
    2d14:	41 e0       	ldi	r20, 0x01	; 1
    2d16:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>

	SET_BIT(UCSRB,RXEN);
    2d1a:	aa e2       	ldi	r26, 0x2A	; 42
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	ea e2       	ldi	r30, 0x2A	; 42
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	80 61       	ori	r24, 0x10	; 16
    2d26:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    2d28:	aa e2       	ldi	r26, 0x2A	; 42
    2d2a:	b0 e0       	ldi	r27, 0x00	; 0
    2d2c:	ea e2       	ldi	r30, 0x2A	; 42
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	88 60       	ori	r24, 0x08	; 8
    2d34:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,UCSZ2);
    2d36:	aa e2       	ldi	r26, 0x2A	; 42
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	ea e2       	ldi	r30, 0x2A	; 42
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	80 81       	ld	r24, Z
    2d40:	8b 7f       	andi	r24, 0xFB	; 251
    2d42:	8c 93       	st	X, r24

	u8 UCSRC_help = 0b10000000 ;
    2d44:	80 e8       	ldi	r24, 0x80	; 128
    2d46:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UMSEL);
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	8f 7b       	andi	r24, 0xBF	; 191
    2d4c:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UPM1);
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	8f 7d       	andi	r24, 0xDF	; 223
    2d52:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UPM0);
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
    2d56:	8f 7e       	andi	r24, 0xEF	; 239
    2d58:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,USBS);
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	87 7f       	andi	r24, 0xF7	; 247
    2d5e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_help,UCSZ1);
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	84 60       	ori	r24, 0x04	; 4
    2d64:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_help,UCSZ0);
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	82 60       	ori	r24, 0x02	; 2
    2d6a:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_help,UCPOL);
    2d6c:	89 81       	ldd	r24, Y+1	; 0x01
    2d6e:	8e 7f       	andi	r24, 0xFE	; 254
    2d70:	89 83       	std	Y+1, r24	; 0x01
	UCSRC = UCSRC_help ;
    2d72:	e0 e4       	ldi	r30, 0x40	; 64
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
    2d78:	80 83       	st	Z, r24

	UBRRH = 0 ;
    2d7a:	e0 e4       	ldi	r30, 0x40	; 64
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	10 82       	st	Z, r1
	UBRRL = 51 ;
    2d80:	e9 e2       	ldi	r30, 0x29	; 41
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	83 e3       	ldi	r24, 0x33	; 51
    2d86:	80 83       	st	Z, r24
}
    2d88:	0f 90       	pop	r0
    2d8a:	cf 91       	pop	r28
    2d8c:	df 91       	pop	r29
    2d8e:	08 95       	ret

00002d90 <UART_VidSendData>:
void UART_VidSendData(u8 Copy_U8Data){
    2d90:	df 93       	push	r29
    2d92:	cf 93       	push	r28
    2d94:	0f 92       	push	r0
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
    2d9a:	89 83       	std	Y+1, r24	; 0x01
	while ( !GET_BIT(UCSRA,UDRE) );
    2d9c:	eb e2       	ldi	r30, 0x2B	; 43
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	80 81       	ld	r24, Z
    2da2:	88 2f       	mov	r24, r24
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	80 72       	andi	r24, 0x20	; 32
    2da8:	90 70       	andi	r25, 0x00	; 0
    2daa:	95 95       	asr	r25
    2dac:	87 95       	ror	r24
    2dae:	95 95       	asr	r25
    2db0:	87 95       	ror	r24
    2db2:	95 95       	asr	r25
    2db4:	87 95       	ror	r24
    2db6:	95 95       	asr	r25
    2db8:	87 95       	ror	r24
    2dba:	95 95       	asr	r25
    2dbc:	87 95       	ror	r24
    2dbe:	00 97       	sbiw	r24, 0x00	; 0
    2dc0:	69 f3       	breq	.-38     	; 0x2d9c <UART_VidSendData+0xc>
	UDR = Copy_U8Data ;
    2dc2:	ec e2       	ldi	r30, 0x2C	; 44
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	89 81       	ldd	r24, Y+1	; 0x01
    2dc8:	80 83       	st	Z, r24
}
    2dca:	0f 90       	pop	r0
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <UART_VidRecieveData>:
u8 UART_VidRecieveData(){
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
	while ( !GET_BIT(UCSRA,RXC) );
    2dda:	eb e2       	ldi	r30, 0x2B	; 43
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	80 81       	ld	r24, Z
    2de0:	88 1f       	adc	r24, r24
    2de2:	88 27       	eor	r24, r24
    2de4:	88 1f       	adc	r24, r24
    2de6:	88 2f       	mov	r24, r24
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	90 70       	andi	r25, 0x00	; 0
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	a9 f3       	breq	.-22     	; 0x2dda <UART_VidRecieveData+0x8>
	return UDR ;
    2df0:	ec e2       	ldi	r30, 0x2C	; 44
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	80 81       	ld	r24, Z
}
    2df6:	cf 91       	pop	r28
    2df8:	df 91       	pop	r29
    2dfa:	08 95       	ret

00002dfc <UART_VidSendString>:
void UART_VidSendString (u8 Copy_U8String[]){
    2dfc:	df 93       	push	r29
    2dfe:	cf 93       	push	r28
    2e00:	00 d0       	rcall	.+0      	; 0x2e02 <UART_VidSendString+0x6>
    2e02:	0f 92       	push	r0
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    2e08:	9b 83       	std	Y+3, r25	; 0x03
    2e0a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0 ;
    2e0c:	19 82       	std	Y+1, r1	; 0x01
    2e0e:	0e c0       	rjmp	.+28     	; 0x2e2c <UART_VidSendString+0x30>
	while (Copy_U8String[i] != '\0'){
		UART_VidSendData(Copy_U8String[i]);
    2e10:	89 81       	ldd	r24, Y+1	; 0x01
    2e12:	28 2f       	mov	r18, r24
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	9b 81       	ldd	r25, Y+3	; 0x03
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	e2 0f       	add	r30, r18
    2e1e:	f3 1f       	adc	r31, r19
    2e20:	80 81       	ld	r24, Z
    2e22:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <UART_VidSendData>
		i++ ;
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	8f 5f       	subi	r24, 0xFF	; 255
    2e2a:	89 83       	std	Y+1, r24	; 0x01
	while ( !GET_BIT(UCSRA,RXC) );
	return UDR ;
}
void UART_VidSendString (u8 Copy_U8String[]){
	u8 i = 0 ;
	while (Copy_U8String[i] != '\0'){
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	28 2f       	mov	r18, r24
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	8a 81       	ldd	r24, Y+2	; 0x02
    2e34:	9b 81       	ldd	r25, Y+3	; 0x03
    2e36:	fc 01       	movw	r30, r24
    2e38:	e2 0f       	add	r30, r18
    2e3a:	f3 1f       	adc	r31, r19
    2e3c:	80 81       	ld	r24, Z
    2e3e:	88 23       	and	r24, r24
    2e40:	39 f7       	brne	.-50     	; 0x2e10 <UART_VidSendString+0x14>
		UART_VidSendData(Copy_U8String[i]);
		i++ ;
	}
}
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	cf 91       	pop	r28
    2e4a:	df 91       	pop	r29
    2e4c:	08 95       	ret

00002e4e <Watchdog_VidEnable>:
#include "../Serivecs_driver/STD_TYPES.h"
#include "../Serivecs_driver/BIT_MATH.h"
#include "Watchdog_Interface.h"
#include "Watchdog_Private.h"

void Watchdog_VidEnable(){
    2e4e:	df 93       	push	r29
    2e50:	cf 93       	push	r28
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
	1     1        0        1,024K (1,048,576)       1.1 s                1.0 s
	1     1        1        2,048K (2,097,152)       2.2 s                2.1 s
	*/

	//Watch_dog Enable
	SET_BIT(WDTCR,WDE);
    2e56:	a1 e4       	ldi	r26, 0x41	; 65
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	e1 e4       	ldi	r30, 0x41	; 65
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	80 81       	ld	r24, Z
    2e60:	88 60       	ori	r24, 0x08	; 8
    2e62:	8c 93       	st	X, r24

	//1 1 0 WDP2 WDP1 WDP0 1.0 s
	CLR_BIT(WDTCR,WDP2);
    2e64:	a1 e4       	ldi	r26, 0x41	; 65
    2e66:	b0 e0       	ldi	r27, 0x00	; 0
    2e68:	e1 e4       	ldi	r30, 0x41	; 65
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	80 81       	ld	r24, Z
    2e6e:	8b 7f       	andi	r24, 0xFB	; 251
    2e70:	8c 93       	st	X, r24
	SET_BIT(WDTCR,WDP1);
    2e72:	a1 e4       	ldi	r26, 0x41	; 65
    2e74:	b0 e0       	ldi	r27, 0x00	; 0
    2e76:	e1 e4       	ldi	r30, 0x41	; 65
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	80 81       	ld	r24, Z
    2e7c:	82 60       	ori	r24, 0x02	; 2
    2e7e:	8c 93       	st	X, r24
	SET_BIT(WDTCR,WDP0);
    2e80:	a1 e4       	ldi	r26, 0x41	; 65
    2e82:	b0 e0       	ldi	r27, 0x00	; 0
    2e84:	e1 e4       	ldi	r30, 0x41	; 65
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	80 81       	ld	r24, Z
    2e8a:	81 60       	ori	r24, 0x01	; 1
    2e8c:	8c 93       	st	X, r24
}
    2e8e:	cf 91       	pop	r28
    2e90:	df 91       	pop	r29
    2e92:	08 95       	ret

00002e94 <Watchdog_VidDisable>:

void Watchdog_VidDisable(){
    2e94:	df 93       	push	r29
    2e96:	cf 93       	push	r28
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
	/* Write logical one to WDTOE and WDE in same operation */
	WDTCR = ( 1<<WDTOE ) | ( 1<<WDE ) ;
    2e9c:	e1 e4       	ldi	r30, 0x41	; 65
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	88 e1       	ldi	r24, 0x18	; 24
    2ea2:	80 83       	st	Z, r24

	/* Turn off WDE within 4 cycles */
	WDTCR = 0x00 ;
    2ea4:	e1 e4       	ldi	r30, 0x41	; 65
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	10 82       	st	Z, r1
}
    2eaa:	cf 91       	pop	r28
    2eac:	df 91       	pop	r29
    2eae:	08 95       	ret

00002eb0 <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void)
{
    2eb0:	df 93       	push	r29
    2eb2:	cf 93       	push	r28
    2eb4:	cd b7       	in	r28, 0x3d	; 61
    2eb6:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
    2eb8:	e7 e2       	ldi	r30, 0x27	; 39
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	10 82       	st	Z, r1
	ADMUX|=1<<6;
    2ebe:	a7 e2       	ldi	r26, 0x27	; 39
    2ec0:	b0 e0       	ldi	r27, 0x00	; 0
    2ec2:	e7 e2       	ldi	r30, 0x27	; 39
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
    2ec8:	80 64       	ori	r24, 0x40	; 64
    2eca:	8c 93       	st	X, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 011 to choose ADC_Clock = F_CPU/8 = 8Mhz/64 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);
    2ecc:	e6 e2       	ldi	r30, 0x26	; 38
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	86 e8       	ldi	r24, 0x86	; 134
    2ed2:	80 83       	st	Z, r24
}
    2ed4:	cf 91       	pop	r28
    2ed6:	df 91       	pop	r29
    2ed8:	08 95       	ret

00002eda <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    2eda:	df 93       	push	r29
    2edc:	cf 93       	push	r28
    2ede:	0f 92       	push	r0
    2ee0:	cd b7       	in	r28, 0x3d	; 61
    2ee2:	de b7       	in	r29, 0x3e	; 62
    2ee4:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
    2ee8:	87 70       	andi	r24, 0x07	; 7
    2eea:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    2eec:	a7 e2       	ldi	r26, 0x27	; 39
    2eee:	b0 e0       	ldi	r27, 0x00	; 0
    2ef0:	e7 e2       	ldi	r30, 0x27	; 39
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	80 81       	ld	r24, Z
    2ef6:	80 7e       	andi	r24, 0xE0	; 224
    2ef8:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
    2efa:	a7 e2       	ldi	r26, 0x27	; 39
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	e7 e2       	ldi	r30, 0x27	; 39
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	90 81       	ld	r25, Z
    2f04:	89 81       	ldd	r24, Y+1	; 0x01
    2f06:	89 2b       	or	r24, r25
    2f08:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
    2f0a:	a6 e2       	ldi	r26, 0x26	; 38
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	e6 e2       	ldi	r30, 0x26	; 38
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	80 64       	ori	r24, 0x40	; 64
    2f16:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
    2f18:	e6 e2       	ldi	r30, 0x26	; 38
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	80 81       	ld	r24, Z
    2f1e:	88 2f       	mov	r24, r24
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	80 71       	andi	r24, 0x10	; 16
    2f24:	90 70       	andi	r25, 0x00	; 0
    2f26:	00 97       	sbiw	r24, 0x00	; 0
    2f28:	b9 f3       	breq	.-18     	; 0x2f18 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
    2f2a:	a6 e2       	ldi	r26, 0x26	; 38
    2f2c:	b0 e0       	ldi	r27, 0x00	; 0
    2f2e:	e6 e2       	ldi	r30, 0x26	; 38
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	80 81       	ld	r24, Z
    2f34:	80 61       	ori	r24, 0x10	; 16
    2f36:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
    2f38:	e4 e2       	ldi	r30, 0x24	; 36
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	80 81       	ld	r24, Z
    2f3e:	91 81       	ldd	r25, Z+1	; 0x01
}
    2f40:	0f 90       	pop	r0
    2f42:	cf 91       	pop	r28
    2f44:	df 91       	pop	r29
    2f46:	08 95       	ret

00002f48 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2f48:	df 93       	push	r29
    2f4a:	cf 93       	push	r28
    2f4c:	00 d0       	rcall	.+0      	; 0x2f4e <GPIO_setupPinDirection+0x6>
    2f4e:	00 d0       	rcall	.+0      	; 0x2f50 <GPIO_setupPinDirection+0x8>
    2f50:	0f 92       	push	r0
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
    2f56:	89 83       	std	Y+1, r24	; 0x01
    2f58:	6a 83       	std	Y+2, r22	; 0x02
    2f5a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5e:	88 30       	cpi	r24, 0x08	; 8
    2f60:	08 f0       	brcs	.+2      	; 0x2f64 <GPIO_setupPinDirection+0x1c>
    2f62:	d5 c0       	rjmp	.+426    	; 0x310e <GPIO_setupPinDirection+0x1c6>
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
    2f66:	84 30       	cpi	r24, 0x04	; 4
    2f68:	08 f0       	brcs	.+2      	; 0x2f6c <GPIO_setupPinDirection+0x24>
    2f6a:	d1 c0       	rjmp	.+418    	; 0x310e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2f6c:	89 81       	ldd	r24, Y+1	; 0x01
    2f6e:	28 2f       	mov	r18, r24
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	3d 83       	std	Y+5, r19	; 0x05
    2f74:	2c 83       	std	Y+4, r18	; 0x04
    2f76:	8c 81       	ldd	r24, Y+4	; 0x04
    2f78:	9d 81       	ldd	r25, Y+5	; 0x05
    2f7a:	81 30       	cpi	r24, 0x01	; 1
    2f7c:	91 05       	cpc	r25, r1
    2f7e:	09 f4       	brne	.+2      	; 0x2f82 <GPIO_setupPinDirection+0x3a>
    2f80:	43 c0       	rjmp	.+134    	; 0x3008 <GPIO_setupPinDirection+0xc0>
    2f82:	2c 81       	ldd	r18, Y+4	; 0x04
    2f84:	3d 81       	ldd	r19, Y+5	; 0x05
    2f86:	22 30       	cpi	r18, 0x02	; 2
    2f88:	31 05       	cpc	r19, r1
    2f8a:	2c f4       	brge	.+10     	; 0x2f96 <GPIO_setupPinDirection+0x4e>
    2f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f90:	00 97       	sbiw	r24, 0x00	; 0
    2f92:	71 f0       	breq	.+28     	; 0x2fb0 <GPIO_setupPinDirection+0x68>
    2f94:	bc c0       	rjmp	.+376    	; 0x310e <GPIO_setupPinDirection+0x1c6>
    2f96:	2c 81       	ldd	r18, Y+4	; 0x04
    2f98:	3d 81       	ldd	r19, Y+5	; 0x05
    2f9a:	22 30       	cpi	r18, 0x02	; 2
    2f9c:	31 05       	cpc	r19, r1
    2f9e:	09 f4       	brne	.+2      	; 0x2fa2 <GPIO_setupPinDirection+0x5a>
    2fa0:	5f c0       	rjmp	.+190    	; 0x3060 <GPIO_setupPinDirection+0x118>
    2fa2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fa6:	83 30       	cpi	r24, 0x03	; 3
    2fa8:	91 05       	cpc	r25, r1
    2faa:	09 f4       	brne	.+2      	; 0x2fae <GPIO_setupPinDirection+0x66>
    2fac:	85 c0       	rjmp	.+266    	; 0x30b8 <GPIO_setupPinDirection+0x170>
    2fae:	af c0       	rjmp	.+350    	; 0x310e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb2:	81 30       	cpi	r24, 0x01	; 1
    2fb4:	a1 f4       	brne	.+40     	; 0x2fde <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2fb6:	aa e3       	ldi	r26, 0x3A	; 58
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	ea e3       	ldi	r30, 0x3A	; 58
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	80 81       	ld	r24, Z
    2fc0:	48 2f       	mov	r20, r24
    2fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc4:	28 2f       	mov	r18, r24
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	02 2e       	mov	r0, r18
    2fce:	02 c0       	rjmp	.+4      	; 0x2fd4 <GPIO_setupPinDirection+0x8c>
    2fd0:	88 0f       	add	r24, r24
    2fd2:	99 1f       	adc	r25, r25
    2fd4:	0a 94       	dec	r0
    2fd6:	e2 f7       	brpl	.-8      	; 0x2fd0 <GPIO_setupPinDirection+0x88>
    2fd8:	84 2b       	or	r24, r20
    2fda:	8c 93       	st	X, r24
    2fdc:	98 c0       	rjmp	.+304    	; 0x310e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2fde:	aa e3       	ldi	r26, 0x3A	; 58
    2fe0:	b0 e0       	ldi	r27, 0x00	; 0
    2fe2:	ea e3       	ldi	r30, 0x3A	; 58
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	80 81       	ld	r24, Z
    2fe8:	48 2f       	mov	r20, r24
    2fea:	8a 81       	ldd	r24, Y+2	; 0x02
    2fec:	28 2f       	mov	r18, r24
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	02 2e       	mov	r0, r18
    2ff6:	02 c0       	rjmp	.+4      	; 0x2ffc <GPIO_setupPinDirection+0xb4>
    2ff8:	88 0f       	add	r24, r24
    2ffa:	99 1f       	adc	r25, r25
    2ffc:	0a 94       	dec	r0
    2ffe:	e2 f7       	brpl	.-8      	; 0x2ff8 <GPIO_setupPinDirection+0xb0>
    3000:	80 95       	com	r24
    3002:	84 23       	and	r24, r20
    3004:	8c 93       	st	X, r24
    3006:	83 c0       	rjmp	.+262    	; 0x310e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    3008:	8b 81       	ldd	r24, Y+3	; 0x03
    300a:	81 30       	cpi	r24, 0x01	; 1
    300c:	a1 f4       	brne	.+40     	; 0x3036 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    300e:	a7 e3       	ldi	r26, 0x37	; 55
    3010:	b0 e0       	ldi	r27, 0x00	; 0
    3012:	e7 e3       	ldi	r30, 0x37	; 55
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	80 81       	ld	r24, Z
    3018:	48 2f       	mov	r20, r24
    301a:	8a 81       	ldd	r24, Y+2	; 0x02
    301c:	28 2f       	mov	r18, r24
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	02 2e       	mov	r0, r18
    3026:	02 c0       	rjmp	.+4      	; 0x302c <GPIO_setupPinDirection+0xe4>
    3028:	88 0f       	add	r24, r24
    302a:	99 1f       	adc	r25, r25
    302c:	0a 94       	dec	r0
    302e:	e2 f7       	brpl	.-8      	; 0x3028 <GPIO_setupPinDirection+0xe0>
    3030:	84 2b       	or	r24, r20
    3032:	8c 93       	st	X, r24
    3034:	6c c0       	rjmp	.+216    	; 0x310e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    3036:	a7 e3       	ldi	r26, 0x37	; 55
    3038:	b0 e0       	ldi	r27, 0x00	; 0
    303a:	e7 e3       	ldi	r30, 0x37	; 55
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	80 81       	ld	r24, Z
    3040:	48 2f       	mov	r20, r24
    3042:	8a 81       	ldd	r24, Y+2	; 0x02
    3044:	28 2f       	mov	r18, r24
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	02 2e       	mov	r0, r18
    304e:	02 c0       	rjmp	.+4      	; 0x3054 <GPIO_setupPinDirection+0x10c>
    3050:	88 0f       	add	r24, r24
    3052:	99 1f       	adc	r25, r25
    3054:	0a 94       	dec	r0
    3056:	e2 f7       	brpl	.-8      	; 0x3050 <GPIO_setupPinDirection+0x108>
    3058:	80 95       	com	r24
    305a:	84 23       	and	r24, r20
    305c:	8c 93       	st	X, r24
    305e:	57 c0       	rjmp	.+174    	; 0x310e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    3060:	8b 81       	ldd	r24, Y+3	; 0x03
    3062:	81 30       	cpi	r24, 0x01	; 1
    3064:	a1 f4       	brne	.+40     	; 0x308e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    3066:	a4 e3       	ldi	r26, 0x34	; 52
    3068:	b0 e0       	ldi	r27, 0x00	; 0
    306a:	e4 e3       	ldi	r30, 0x34	; 52
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	80 81       	ld	r24, Z
    3070:	48 2f       	mov	r20, r24
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	28 2f       	mov	r18, r24
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	02 2e       	mov	r0, r18
    307e:	02 c0       	rjmp	.+4      	; 0x3084 <GPIO_setupPinDirection+0x13c>
    3080:	88 0f       	add	r24, r24
    3082:	99 1f       	adc	r25, r25
    3084:	0a 94       	dec	r0
    3086:	e2 f7       	brpl	.-8      	; 0x3080 <GPIO_setupPinDirection+0x138>
    3088:	84 2b       	or	r24, r20
    308a:	8c 93       	st	X, r24
    308c:	40 c0       	rjmp	.+128    	; 0x310e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    308e:	a4 e3       	ldi	r26, 0x34	; 52
    3090:	b0 e0       	ldi	r27, 0x00	; 0
    3092:	e4 e3       	ldi	r30, 0x34	; 52
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	80 81       	ld	r24, Z
    3098:	48 2f       	mov	r20, r24
    309a:	8a 81       	ldd	r24, Y+2	; 0x02
    309c:	28 2f       	mov	r18, r24
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	02 2e       	mov	r0, r18
    30a6:	02 c0       	rjmp	.+4      	; 0x30ac <GPIO_setupPinDirection+0x164>
    30a8:	88 0f       	add	r24, r24
    30aa:	99 1f       	adc	r25, r25
    30ac:	0a 94       	dec	r0
    30ae:	e2 f7       	brpl	.-8      	; 0x30a8 <GPIO_setupPinDirection+0x160>
    30b0:	80 95       	com	r24
    30b2:	84 23       	and	r24, r20
    30b4:	8c 93       	st	X, r24
    30b6:	2b c0       	rjmp	.+86     	; 0x310e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	81 30       	cpi	r24, 0x01	; 1
    30bc:	a1 f4       	brne	.+40     	; 0x30e6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    30be:	a1 e3       	ldi	r26, 0x31	; 49
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	e1 e3       	ldi	r30, 0x31	; 49
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	48 2f       	mov	r20, r24
    30ca:	8a 81       	ldd	r24, Y+2	; 0x02
    30cc:	28 2f       	mov	r18, r24
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	02 2e       	mov	r0, r18
    30d6:	02 c0       	rjmp	.+4      	; 0x30dc <GPIO_setupPinDirection+0x194>
    30d8:	88 0f       	add	r24, r24
    30da:	99 1f       	adc	r25, r25
    30dc:	0a 94       	dec	r0
    30de:	e2 f7       	brpl	.-8      	; 0x30d8 <GPIO_setupPinDirection+0x190>
    30e0:	84 2b       	or	r24, r20
    30e2:	8c 93       	st	X, r24
    30e4:	14 c0       	rjmp	.+40     	; 0x310e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    30e6:	a1 e3       	ldi	r26, 0x31	; 49
    30e8:	b0 e0       	ldi	r27, 0x00	; 0
    30ea:	e1 e3       	ldi	r30, 0x31	; 49
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	80 81       	ld	r24, Z
    30f0:	48 2f       	mov	r20, r24
    30f2:	8a 81       	ldd	r24, Y+2	; 0x02
    30f4:	28 2f       	mov	r18, r24
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	02 2e       	mov	r0, r18
    30fe:	02 c0       	rjmp	.+4      	; 0x3104 <GPIO_setupPinDirection+0x1bc>
    3100:	88 0f       	add	r24, r24
    3102:	99 1f       	adc	r25, r25
    3104:	0a 94       	dec	r0
    3106:	e2 f7       	brpl	.-8      	; 0x3100 <GPIO_setupPinDirection+0x1b8>
    3108:	80 95       	com	r24
    310a:	84 23       	and	r24, r20
    310c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    310e:	0f 90       	pop	r0
    3110:	0f 90       	pop	r0
    3112:	0f 90       	pop	r0
    3114:	0f 90       	pop	r0
    3116:	0f 90       	pop	r0
    3118:	cf 91       	pop	r28
    311a:	df 91       	pop	r29
    311c:	08 95       	ret

0000311e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    311e:	df 93       	push	r29
    3120:	cf 93       	push	r28
    3122:	00 d0       	rcall	.+0      	; 0x3124 <GPIO_writePin+0x6>
    3124:	00 d0       	rcall	.+0      	; 0x3126 <GPIO_writePin+0x8>
    3126:	0f 92       	push	r0
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
    312c:	89 83       	std	Y+1, r24	; 0x01
    312e:	6a 83       	std	Y+2, r22	; 0x02
    3130:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    3132:	8a 81       	ldd	r24, Y+2	; 0x02
    3134:	88 30       	cpi	r24, 0x08	; 8
    3136:	08 f0       	brcs	.+2      	; 0x313a <GPIO_writePin+0x1c>
    3138:	d5 c0       	rjmp	.+426    	; 0x32e4 <GPIO_writePin+0x1c6>
    313a:	89 81       	ldd	r24, Y+1	; 0x01
    313c:	84 30       	cpi	r24, 0x04	; 4
    313e:	08 f0       	brcs	.+2      	; 0x3142 <GPIO_writePin+0x24>
    3140:	d1 c0       	rjmp	.+418    	; 0x32e4 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    3142:	89 81       	ldd	r24, Y+1	; 0x01
    3144:	28 2f       	mov	r18, r24
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	3d 83       	std	Y+5, r19	; 0x05
    314a:	2c 83       	std	Y+4, r18	; 0x04
    314c:	8c 81       	ldd	r24, Y+4	; 0x04
    314e:	9d 81       	ldd	r25, Y+5	; 0x05
    3150:	81 30       	cpi	r24, 0x01	; 1
    3152:	91 05       	cpc	r25, r1
    3154:	09 f4       	brne	.+2      	; 0x3158 <GPIO_writePin+0x3a>
    3156:	43 c0       	rjmp	.+134    	; 0x31de <GPIO_writePin+0xc0>
    3158:	2c 81       	ldd	r18, Y+4	; 0x04
    315a:	3d 81       	ldd	r19, Y+5	; 0x05
    315c:	22 30       	cpi	r18, 0x02	; 2
    315e:	31 05       	cpc	r19, r1
    3160:	2c f4       	brge	.+10     	; 0x316c <GPIO_writePin+0x4e>
    3162:	8c 81       	ldd	r24, Y+4	; 0x04
    3164:	9d 81       	ldd	r25, Y+5	; 0x05
    3166:	00 97       	sbiw	r24, 0x00	; 0
    3168:	71 f0       	breq	.+28     	; 0x3186 <GPIO_writePin+0x68>
    316a:	bc c0       	rjmp	.+376    	; 0x32e4 <GPIO_writePin+0x1c6>
    316c:	2c 81       	ldd	r18, Y+4	; 0x04
    316e:	3d 81       	ldd	r19, Y+5	; 0x05
    3170:	22 30       	cpi	r18, 0x02	; 2
    3172:	31 05       	cpc	r19, r1
    3174:	09 f4       	brne	.+2      	; 0x3178 <GPIO_writePin+0x5a>
    3176:	5f c0       	rjmp	.+190    	; 0x3236 <GPIO_writePin+0x118>
    3178:	8c 81       	ldd	r24, Y+4	; 0x04
    317a:	9d 81       	ldd	r25, Y+5	; 0x05
    317c:	83 30       	cpi	r24, 0x03	; 3
    317e:	91 05       	cpc	r25, r1
    3180:	09 f4       	brne	.+2      	; 0x3184 <GPIO_writePin+0x66>
    3182:	85 c0       	rjmp	.+266    	; 0x328e <GPIO_writePin+0x170>
    3184:	af c0       	rjmp	.+350    	; 0x32e4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    3186:	8b 81       	ldd	r24, Y+3	; 0x03
    3188:	81 30       	cpi	r24, 0x01	; 1
    318a:	a1 f4       	brne	.+40     	; 0x31b4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    318c:	ab e3       	ldi	r26, 0x3B	; 59
    318e:	b0 e0       	ldi	r27, 0x00	; 0
    3190:	eb e3       	ldi	r30, 0x3B	; 59
    3192:	f0 e0       	ldi	r31, 0x00	; 0
    3194:	80 81       	ld	r24, Z
    3196:	48 2f       	mov	r20, r24
    3198:	8a 81       	ldd	r24, Y+2	; 0x02
    319a:	28 2f       	mov	r18, r24
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	02 2e       	mov	r0, r18
    31a4:	02 c0       	rjmp	.+4      	; 0x31aa <GPIO_writePin+0x8c>
    31a6:	88 0f       	add	r24, r24
    31a8:	99 1f       	adc	r25, r25
    31aa:	0a 94       	dec	r0
    31ac:	e2 f7       	brpl	.-8      	; 0x31a6 <GPIO_writePin+0x88>
    31ae:	84 2b       	or	r24, r20
    31b0:	8c 93       	st	X, r24
    31b2:	98 c0       	rjmp	.+304    	; 0x32e4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    31b4:	ab e3       	ldi	r26, 0x3B	; 59
    31b6:	b0 e0       	ldi	r27, 0x00	; 0
    31b8:	eb e3       	ldi	r30, 0x3B	; 59
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	80 81       	ld	r24, Z
    31be:	48 2f       	mov	r20, r24
    31c0:	8a 81       	ldd	r24, Y+2	; 0x02
    31c2:	28 2f       	mov	r18, r24
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	02 2e       	mov	r0, r18
    31cc:	02 c0       	rjmp	.+4      	; 0x31d2 <GPIO_writePin+0xb4>
    31ce:	88 0f       	add	r24, r24
    31d0:	99 1f       	adc	r25, r25
    31d2:	0a 94       	dec	r0
    31d4:	e2 f7       	brpl	.-8      	; 0x31ce <GPIO_writePin+0xb0>
    31d6:	80 95       	com	r24
    31d8:	84 23       	and	r24, r20
    31da:	8c 93       	st	X, r24
    31dc:	83 c0       	rjmp	.+262    	; 0x32e4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    31de:	8b 81       	ldd	r24, Y+3	; 0x03
    31e0:	81 30       	cpi	r24, 0x01	; 1
    31e2:	a1 f4       	brne	.+40     	; 0x320c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    31e4:	a8 e3       	ldi	r26, 0x38	; 56
    31e6:	b0 e0       	ldi	r27, 0x00	; 0
    31e8:	e8 e3       	ldi	r30, 0x38	; 56
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	48 2f       	mov	r20, r24
    31f0:	8a 81       	ldd	r24, Y+2	; 0x02
    31f2:	28 2f       	mov	r18, r24
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	02 2e       	mov	r0, r18
    31fc:	02 c0       	rjmp	.+4      	; 0x3202 <GPIO_writePin+0xe4>
    31fe:	88 0f       	add	r24, r24
    3200:	99 1f       	adc	r25, r25
    3202:	0a 94       	dec	r0
    3204:	e2 f7       	brpl	.-8      	; 0x31fe <GPIO_writePin+0xe0>
    3206:	84 2b       	or	r24, r20
    3208:	8c 93       	st	X, r24
    320a:	6c c0       	rjmp	.+216    	; 0x32e4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    320c:	a8 e3       	ldi	r26, 0x38	; 56
    320e:	b0 e0       	ldi	r27, 0x00	; 0
    3210:	e8 e3       	ldi	r30, 0x38	; 56
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	80 81       	ld	r24, Z
    3216:	48 2f       	mov	r20, r24
    3218:	8a 81       	ldd	r24, Y+2	; 0x02
    321a:	28 2f       	mov	r18, r24
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	02 2e       	mov	r0, r18
    3224:	02 c0       	rjmp	.+4      	; 0x322a <GPIO_writePin+0x10c>
    3226:	88 0f       	add	r24, r24
    3228:	99 1f       	adc	r25, r25
    322a:	0a 94       	dec	r0
    322c:	e2 f7       	brpl	.-8      	; 0x3226 <GPIO_writePin+0x108>
    322e:	80 95       	com	r24
    3230:	84 23       	and	r24, r20
    3232:	8c 93       	st	X, r24
    3234:	57 c0       	rjmp	.+174    	; 0x32e4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    3236:	8b 81       	ldd	r24, Y+3	; 0x03
    3238:	81 30       	cpi	r24, 0x01	; 1
    323a:	a1 f4       	brne	.+40     	; 0x3264 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    323c:	a5 e3       	ldi	r26, 0x35	; 53
    323e:	b0 e0       	ldi	r27, 0x00	; 0
    3240:	e5 e3       	ldi	r30, 0x35	; 53
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	80 81       	ld	r24, Z
    3246:	48 2f       	mov	r20, r24
    3248:	8a 81       	ldd	r24, Y+2	; 0x02
    324a:	28 2f       	mov	r18, r24
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	02 2e       	mov	r0, r18
    3254:	02 c0       	rjmp	.+4      	; 0x325a <GPIO_writePin+0x13c>
    3256:	88 0f       	add	r24, r24
    3258:	99 1f       	adc	r25, r25
    325a:	0a 94       	dec	r0
    325c:	e2 f7       	brpl	.-8      	; 0x3256 <GPIO_writePin+0x138>
    325e:	84 2b       	or	r24, r20
    3260:	8c 93       	st	X, r24
    3262:	40 c0       	rjmp	.+128    	; 0x32e4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    3264:	a5 e3       	ldi	r26, 0x35	; 53
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	e5 e3       	ldi	r30, 0x35	; 53
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	80 81       	ld	r24, Z
    326e:	48 2f       	mov	r20, r24
    3270:	8a 81       	ldd	r24, Y+2	; 0x02
    3272:	28 2f       	mov	r18, r24
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	02 2e       	mov	r0, r18
    327c:	02 c0       	rjmp	.+4      	; 0x3282 <GPIO_writePin+0x164>
    327e:	88 0f       	add	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	0a 94       	dec	r0
    3284:	e2 f7       	brpl	.-8      	; 0x327e <GPIO_writePin+0x160>
    3286:	80 95       	com	r24
    3288:	84 23       	and	r24, r20
    328a:	8c 93       	st	X, r24
    328c:	2b c0       	rjmp	.+86     	; 0x32e4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    328e:	8b 81       	ldd	r24, Y+3	; 0x03
    3290:	81 30       	cpi	r24, 0x01	; 1
    3292:	a1 f4       	brne	.+40     	; 0x32bc <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    3294:	a2 e3       	ldi	r26, 0x32	; 50
    3296:	b0 e0       	ldi	r27, 0x00	; 0
    3298:	e2 e3       	ldi	r30, 0x32	; 50
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	80 81       	ld	r24, Z
    329e:	48 2f       	mov	r20, r24
    32a0:	8a 81       	ldd	r24, Y+2	; 0x02
    32a2:	28 2f       	mov	r18, r24
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	02 2e       	mov	r0, r18
    32ac:	02 c0       	rjmp	.+4      	; 0x32b2 <GPIO_writePin+0x194>
    32ae:	88 0f       	add	r24, r24
    32b0:	99 1f       	adc	r25, r25
    32b2:	0a 94       	dec	r0
    32b4:	e2 f7       	brpl	.-8      	; 0x32ae <GPIO_writePin+0x190>
    32b6:	84 2b       	or	r24, r20
    32b8:	8c 93       	st	X, r24
    32ba:	14 c0       	rjmp	.+40     	; 0x32e4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    32bc:	a2 e3       	ldi	r26, 0x32	; 50
    32be:	b0 e0       	ldi	r27, 0x00	; 0
    32c0:	e2 e3       	ldi	r30, 0x32	; 50
    32c2:	f0 e0       	ldi	r31, 0x00	; 0
    32c4:	80 81       	ld	r24, Z
    32c6:	48 2f       	mov	r20, r24
    32c8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ca:	28 2f       	mov	r18, r24
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	02 2e       	mov	r0, r18
    32d4:	02 c0       	rjmp	.+4      	; 0x32da <GPIO_writePin+0x1bc>
    32d6:	88 0f       	add	r24, r24
    32d8:	99 1f       	adc	r25, r25
    32da:	0a 94       	dec	r0
    32dc:	e2 f7       	brpl	.-8      	; 0x32d6 <GPIO_writePin+0x1b8>
    32de:	80 95       	com	r24
    32e0:	84 23       	and	r24, r20
    32e2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    32e4:	0f 90       	pop	r0
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	cf 91       	pop	r28
    32f0:	df 91       	pop	r29
    32f2:	08 95       	ret

000032f4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    32f4:	df 93       	push	r29
    32f6:	cf 93       	push	r28
    32f8:	00 d0       	rcall	.+0      	; 0x32fa <GPIO_readPin+0x6>
    32fa:	00 d0       	rcall	.+0      	; 0x32fc <GPIO_readPin+0x8>
    32fc:	0f 92       	push	r0
    32fe:	cd b7       	in	r28, 0x3d	; 61
    3300:	de b7       	in	r29, 0x3e	; 62
    3302:	8a 83       	std	Y+2, r24	; 0x02
    3304:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    3306:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    3308:	8b 81       	ldd	r24, Y+3	; 0x03
    330a:	88 30       	cpi	r24, 0x08	; 8
    330c:	08 f0       	brcs	.+2      	; 0x3310 <GPIO_readPin+0x1c>
    330e:	84 c0       	rjmp	.+264    	; 0x3418 <GPIO_readPin+0x124>
    3310:	8a 81       	ldd	r24, Y+2	; 0x02
    3312:	84 30       	cpi	r24, 0x04	; 4
    3314:	08 f0       	brcs	.+2      	; 0x3318 <GPIO_readPin+0x24>
    3316:	80 c0       	rjmp	.+256    	; 0x3418 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    3318:	8a 81       	ldd	r24, Y+2	; 0x02
    331a:	28 2f       	mov	r18, r24
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	3d 83       	std	Y+5, r19	; 0x05
    3320:	2c 83       	std	Y+4, r18	; 0x04
    3322:	4c 81       	ldd	r20, Y+4	; 0x04
    3324:	5d 81       	ldd	r21, Y+5	; 0x05
    3326:	41 30       	cpi	r20, 0x01	; 1
    3328:	51 05       	cpc	r21, r1
    332a:	79 f1       	breq	.+94     	; 0x338a <GPIO_readPin+0x96>
    332c:	8c 81       	ldd	r24, Y+4	; 0x04
    332e:	9d 81       	ldd	r25, Y+5	; 0x05
    3330:	82 30       	cpi	r24, 0x02	; 2
    3332:	91 05       	cpc	r25, r1
    3334:	34 f4       	brge	.+12     	; 0x3342 <GPIO_readPin+0x4e>
    3336:	2c 81       	ldd	r18, Y+4	; 0x04
    3338:	3d 81       	ldd	r19, Y+5	; 0x05
    333a:	21 15       	cp	r18, r1
    333c:	31 05       	cpc	r19, r1
    333e:	69 f0       	breq	.+26     	; 0x335a <GPIO_readPin+0x66>
    3340:	6b c0       	rjmp	.+214    	; 0x3418 <GPIO_readPin+0x124>
    3342:	4c 81       	ldd	r20, Y+4	; 0x04
    3344:	5d 81       	ldd	r21, Y+5	; 0x05
    3346:	42 30       	cpi	r20, 0x02	; 2
    3348:	51 05       	cpc	r21, r1
    334a:	b9 f1       	breq	.+110    	; 0x33ba <GPIO_readPin+0xc6>
    334c:	8c 81       	ldd	r24, Y+4	; 0x04
    334e:	9d 81       	ldd	r25, Y+5	; 0x05
    3350:	83 30       	cpi	r24, 0x03	; 3
    3352:	91 05       	cpc	r25, r1
    3354:	09 f4       	brne	.+2      	; 0x3358 <GPIO_readPin+0x64>
    3356:	49 c0       	rjmp	.+146    	; 0x33ea <GPIO_readPin+0xf6>
    3358:	5f c0       	rjmp	.+190    	; 0x3418 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    335a:	e9 e3       	ldi	r30, 0x39	; 57
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	80 81       	ld	r24, Z
    3360:	28 2f       	mov	r18, r24
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	8b 81       	ldd	r24, Y+3	; 0x03
    3366:	88 2f       	mov	r24, r24
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	a9 01       	movw	r20, r18
    336c:	02 c0       	rjmp	.+4      	; 0x3372 <GPIO_readPin+0x7e>
    336e:	55 95       	asr	r21
    3370:	47 95       	ror	r20
    3372:	8a 95       	dec	r24
    3374:	e2 f7       	brpl	.-8      	; 0x336e <GPIO_readPin+0x7a>
    3376:	ca 01       	movw	r24, r20
    3378:	81 70       	andi	r24, 0x01	; 1
    337a:	90 70       	andi	r25, 0x00	; 0
    337c:	88 23       	and	r24, r24
    337e:	19 f0       	breq	.+6      	; 0x3386 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	89 83       	std	Y+1, r24	; 0x01
    3384:	49 c0       	rjmp	.+146    	; 0x3418 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    3386:	19 82       	std	Y+1, r1	; 0x01
    3388:	47 c0       	rjmp	.+142    	; 0x3418 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    338a:	e6 e3       	ldi	r30, 0x36	; 54
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	80 81       	ld	r24, Z
    3390:	28 2f       	mov	r18, r24
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	8b 81       	ldd	r24, Y+3	; 0x03
    3396:	88 2f       	mov	r24, r24
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	a9 01       	movw	r20, r18
    339c:	02 c0       	rjmp	.+4      	; 0x33a2 <GPIO_readPin+0xae>
    339e:	55 95       	asr	r21
    33a0:	47 95       	ror	r20
    33a2:	8a 95       	dec	r24
    33a4:	e2 f7       	brpl	.-8      	; 0x339e <GPIO_readPin+0xaa>
    33a6:	ca 01       	movw	r24, r20
    33a8:	81 70       	andi	r24, 0x01	; 1
    33aa:	90 70       	andi	r25, 0x00	; 0
    33ac:	88 23       	and	r24, r24
    33ae:	19 f0       	breq	.+6      	; 0x33b6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	89 83       	std	Y+1, r24	; 0x01
    33b4:	31 c0       	rjmp	.+98     	; 0x3418 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    33b6:	19 82       	std	Y+1, r1	; 0x01
    33b8:	2f c0       	rjmp	.+94     	; 0x3418 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    33ba:	e3 e3       	ldi	r30, 0x33	; 51
    33bc:	f0 e0       	ldi	r31, 0x00	; 0
    33be:	80 81       	ld	r24, Z
    33c0:	28 2f       	mov	r18, r24
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	8b 81       	ldd	r24, Y+3	; 0x03
    33c6:	88 2f       	mov	r24, r24
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	a9 01       	movw	r20, r18
    33cc:	02 c0       	rjmp	.+4      	; 0x33d2 <GPIO_readPin+0xde>
    33ce:	55 95       	asr	r21
    33d0:	47 95       	ror	r20
    33d2:	8a 95       	dec	r24
    33d4:	e2 f7       	brpl	.-8      	; 0x33ce <GPIO_readPin+0xda>
    33d6:	ca 01       	movw	r24, r20
    33d8:	81 70       	andi	r24, 0x01	; 1
    33da:	90 70       	andi	r25, 0x00	; 0
    33dc:	88 23       	and	r24, r24
    33de:	19 f0       	breq	.+6      	; 0x33e6 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	89 83       	std	Y+1, r24	; 0x01
    33e4:	19 c0       	rjmp	.+50     	; 0x3418 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    33e6:	19 82       	std	Y+1, r1	; 0x01
    33e8:	17 c0       	rjmp	.+46     	; 0x3418 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    33ea:	e0 e3       	ldi	r30, 0x30	; 48
    33ec:	f0 e0       	ldi	r31, 0x00	; 0
    33ee:	80 81       	ld	r24, Z
    33f0:	28 2f       	mov	r18, r24
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	8b 81       	ldd	r24, Y+3	; 0x03
    33f6:	88 2f       	mov	r24, r24
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	a9 01       	movw	r20, r18
    33fc:	02 c0       	rjmp	.+4      	; 0x3402 <GPIO_readPin+0x10e>
    33fe:	55 95       	asr	r21
    3400:	47 95       	ror	r20
    3402:	8a 95       	dec	r24
    3404:	e2 f7       	brpl	.-8      	; 0x33fe <GPIO_readPin+0x10a>
    3406:	ca 01       	movw	r24, r20
    3408:	81 70       	andi	r24, 0x01	; 1
    340a:	90 70       	andi	r25, 0x00	; 0
    340c:	88 23       	and	r24, r24
    340e:	19 f0       	breq	.+6      	; 0x3416 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    3410:	81 e0       	ldi	r24, 0x01	; 1
    3412:	89 83       	std	Y+1, r24	; 0x01
    3414:	01 c0       	rjmp	.+2      	; 0x3418 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    3416:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    3418:	89 81       	ldd	r24, Y+1	; 0x01
}
    341a:	0f 90       	pop	r0
    341c:	0f 90       	pop	r0
    341e:	0f 90       	pop	r0
    3420:	0f 90       	pop	r0
    3422:	0f 90       	pop	r0
    3424:	cf 91       	pop	r28
    3426:	df 91       	pop	r29
    3428:	08 95       	ret

0000342a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    342a:	df 93       	push	r29
    342c:	cf 93       	push	r28
    342e:	00 d0       	rcall	.+0      	; 0x3430 <GPIO_setupPortDirection+0x6>
    3430:	00 d0       	rcall	.+0      	; 0x3432 <GPIO_setupPortDirection+0x8>
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	89 83       	std	Y+1, r24	; 0x01
    3438:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    343a:	89 81       	ldd	r24, Y+1	; 0x01
    343c:	84 30       	cpi	r24, 0x04	; 4
    343e:	90 f5       	brcc	.+100    	; 0x34a4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    3440:	89 81       	ldd	r24, Y+1	; 0x01
    3442:	28 2f       	mov	r18, r24
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	3c 83       	std	Y+4, r19	; 0x04
    3448:	2b 83       	std	Y+3, r18	; 0x03
    344a:	8b 81       	ldd	r24, Y+3	; 0x03
    344c:	9c 81       	ldd	r25, Y+4	; 0x04
    344e:	81 30       	cpi	r24, 0x01	; 1
    3450:	91 05       	cpc	r25, r1
    3452:	d1 f0       	breq	.+52     	; 0x3488 <GPIO_setupPortDirection+0x5e>
    3454:	2b 81       	ldd	r18, Y+3	; 0x03
    3456:	3c 81       	ldd	r19, Y+4	; 0x04
    3458:	22 30       	cpi	r18, 0x02	; 2
    345a:	31 05       	cpc	r19, r1
    345c:	2c f4       	brge	.+10     	; 0x3468 <GPIO_setupPortDirection+0x3e>
    345e:	8b 81       	ldd	r24, Y+3	; 0x03
    3460:	9c 81       	ldd	r25, Y+4	; 0x04
    3462:	00 97       	sbiw	r24, 0x00	; 0
    3464:	61 f0       	breq	.+24     	; 0x347e <GPIO_setupPortDirection+0x54>
    3466:	1e c0       	rjmp	.+60     	; 0x34a4 <GPIO_setupPortDirection+0x7a>
    3468:	2b 81       	ldd	r18, Y+3	; 0x03
    346a:	3c 81       	ldd	r19, Y+4	; 0x04
    346c:	22 30       	cpi	r18, 0x02	; 2
    346e:	31 05       	cpc	r19, r1
    3470:	81 f0       	breq	.+32     	; 0x3492 <GPIO_setupPortDirection+0x68>
    3472:	8b 81       	ldd	r24, Y+3	; 0x03
    3474:	9c 81       	ldd	r25, Y+4	; 0x04
    3476:	83 30       	cpi	r24, 0x03	; 3
    3478:	91 05       	cpc	r25, r1
    347a:	81 f0       	breq	.+32     	; 0x349c <GPIO_setupPortDirection+0x72>
    347c:	13 c0       	rjmp	.+38     	; 0x34a4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    347e:	ea e3       	ldi	r30, 0x3A	; 58
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	8a 81       	ldd	r24, Y+2	; 0x02
    3484:	80 83       	st	Z, r24
    3486:	0e c0       	rjmp	.+28     	; 0x34a4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    3488:	e7 e3       	ldi	r30, 0x37	; 55
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	8a 81       	ldd	r24, Y+2	; 0x02
    348e:	80 83       	st	Z, r24
    3490:	09 c0       	rjmp	.+18     	; 0x34a4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    3492:	e4 e3       	ldi	r30, 0x34	; 52
    3494:	f0 e0       	ldi	r31, 0x00	; 0
    3496:	8a 81       	ldd	r24, Y+2	; 0x02
    3498:	80 83       	st	Z, r24
    349a:	04 c0       	rjmp	.+8      	; 0x34a4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    349c:	e1 e3       	ldi	r30, 0x31	; 49
    349e:	f0 e0       	ldi	r31, 0x00	; 0
    34a0:	8a 81       	ldd	r24, Y+2	; 0x02
    34a2:	80 83       	st	Z, r24
			break;
		}
	}
}
    34a4:	0f 90       	pop	r0
    34a6:	0f 90       	pop	r0
    34a8:	0f 90       	pop	r0
    34aa:	0f 90       	pop	r0
    34ac:	cf 91       	pop	r28
    34ae:	df 91       	pop	r29
    34b0:	08 95       	ret

000034b2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    34b2:	df 93       	push	r29
    34b4:	cf 93       	push	r28
    34b6:	00 d0       	rcall	.+0      	; 0x34b8 <GPIO_writePort+0x6>
    34b8:	00 d0       	rcall	.+0      	; 0x34ba <GPIO_writePort+0x8>
    34ba:	cd b7       	in	r28, 0x3d	; 61
    34bc:	de b7       	in	r29, 0x3e	; 62
    34be:	89 83       	std	Y+1, r24	; 0x01
    34c0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    34c2:	89 81       	ldd	r24, Y+1	; 0x01
    34c4:	84 30       	cpi	r24, 0x04	; 4
    34c6:	90 f5       	brcc	.+100    	; 0x352c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    34c8:	89 81       	ldd	r24, Y+1	; 0x01
    34ca:	28 2f       	mov	r18, r24
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	3c 83       	std	Y+4, r19	; 0x04
    34d0:	2b 83       	std	Y+3, r18	; 0x03
    34d2:	8b 81       	ldd	r24, Y+3	; 0x03
    34d4:	9c 81       	ldd	r25, Y+4	; 0x04
    34d6:	81 30       	cpi	r24, 0x01	; 1
    34d8:	91 05       	cpc	r25, r1
    34da:	d1 f0       	breq	.+52     	; 0x3510 <GPIO_writePort+0x5e>
    34dc:	2b 81       	ldd	r18, Y+3	; 0x03
    34de:	3c 81       	ldd	r19, Y+4	; 0x04
    34e0:	22 30       	cpi	r18, 0x02	; 2
    34e2:	31 05       	cpc	r19, r1
    34e4:	2c f4       	brge	.+10     	; 0x34f0 <GPIO_writePort+0x3e>
    34e6:	8b 81       	ldd	r24, Y+3	; 0x03
    34e8:	9c 81       	ldd	r25, Y+4	; 0x04
    34ea:	00 97       	sbiw	r24, 0x00	; 0
    34ec:	61 f0       	breq	.+24     	; 0x3506 <GPIO_writePort+0x54>
    34ee:	1e c0       	rjmp	.+60     	; 0x352c <GPIO_writePort+0x7a>
    34f0:	2b 81       	ldd	r18, Y+3	; 0x03
    34f2:	3c 81       	ldd	r19, Y+4	; 0x04
    34f4:	22 30       	cpi	r18, 0x02	; 2
    34f6:	31 05       	cpc	r19, r1
    34f8:	81 f0       	breq	.+32     	; 0x351a <GPIO_writePort+0x68>
    34fa:	8b 81       	ldd	r24, Y+3	; 0x03
    34fc:	9c 81       	ldd	r25, Y+4	; 0x04
    34fe:	83 30       	cpi	r24, 0x03	; 3
    3500:	91 05       	cpc	r25, r1
    3502:	81 f0       	breq	.+32     	; 0x3524 <GPIO_writePort+0x72>
    3504:	13 c0       	rjmp	.+38     	; 0x352c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    3506:	eb e3       	ldi	r30, 0x3B	; 59
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	8a 81       	ldd	r24, Y+2	; 0x02
    350c:	80 83       	st	Z, r24
    350e:	0e c0       	rjmp	.+28     	; 0x352c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    3510:	e8 e3       	ldi	r30, 0x38	; 56
    3512:	f0 e0       	ldi	r31, 0x00	; 0
    3514:	8a 81       	ldd	r24, Y+2	; 0x02
    3516:	80 83       	st	Z, r24
    3518:	09 c0       	rjmp	.+18     	; 0x352c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    351a:	e5 e3       	ldi	r30, 0x35	; 53
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	8a 81       	ldd	r24, Y+2	; 0x02
    3520:	80 83       	st	Z, r24
    3522:	04 c0       	rjmp	.+8      	; 0x352c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    3524:	e2 e3       	ldi	r30, 0x32	; 50
    3526:	f0 e0       	ldi	r31, 0x00	; 0
    3528:	8a 81       	ldd	r24, Y+2	; 0x02
    352a:	80 83       	st	Z, r24
			break;
		}
	}
}
    352c:	0f 90       	pop	r0
    352e:	0f 90       	pop	r0
    3530:	0f 90       	pop	r0
    3532:	0f 90       	pop	r0
    3534:	cf 91       	pop	r28
    3536:	df 91       	pop	r29
    3538:	08 95       	ret

0000353a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    353a:	df 93       	push	r29
    353c:	cf 93       	push	r28
    353e:	00 d0       	rcall	.+0      	; 0x3540 <GPIO_readPort+0x6>
    3540:	00 d0       	rcall	.+0      	; 0x3542 <GPIO_readPort+0x8>
    3542:	cd b7       	in	r28, 0x3d	; 61
    3544:	de b7       	in	r29, 0x3e	; 62
    3546:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    3548:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    354a:	8a 81       	ldd	r24, Y+2	; 0x02
    354c:	84 30       	cpi	r24, 0x04	; 4
    354e:	90 f5       	brcc	.+100    	; 0x35b4 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    3550:	8a 81       	ldd	r24, Y+2	; 0x02
    3552:	28 2f       	mov	r18, r24
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	3c 83       	std	Y+4, r19	; 0x04
    3558:	2b 83       	std	Y+3, r18	; 0x03
    355a:	8b 81       	ldd	r24, Y+3	; 0x03
    355c:	9c 81       	ldd	r25, Y+4	; 0x04
    355e:	81 30       	cpi	r24, 0x01	; 1
    3560:	91 05       	cpc	r25, r1
    3562:	d1 f0       	breq	.+52     	; 0x3598 <GPIO_readPort+0x5e>
    3564:	2b 81       	ldd	r18, Y+3	; 0x03
    3566:	3c 81       	ldd	r19, Y+4	; 0x04
    3568:	22 30       	cpi	r18, 0x02	; 2
    356a:	31 05       	cpc	r19, r1
    356c:	2c f4       	brge	.+10     	; 0x3578 <GPIO_readPort+0x3e>
    356e:	8b 81       	ldd	r24, Y+3	; 0x03
    3570:	9c 81       	ldd	r25, Y+4	; 0x04
    3572:	00 97       	sbiw	r24, 0x00	; 0
    3574:	61 f0       	breq	.+24     	; 0x358e <GPIO_readPort+0x54>
    3576:	1e c0       	rjmp	.+60     	; 0x35b4 <GPIO_readPort+0x7a>
    3578:	2b 81       	ldd	r18, Y+3	; 0x03
    357a:	3c 81       	ldd	r19, Y+4	; 0x04
    357c:	22 30       	cpi	r18, 0x02	; 2
    357e:	31 05       	cpc	r19, r1
    3580:	81 f0       	breq	.+32     	; 0x35a2 <GPIO_readPort+0x68>
    3582:	8b 81       	ldd	r24, Y+3	; 0x03
    3584:	9c 81       	ldd	r25, Y+4	; 0x04
    3586:	83 30       	cpi	r24, 0x03	; 3
    3588:	91 05       	cpc	r25, r1
    358a:	81 f0       	breq	.+32     	; 0x35ac <GPIO_readPort+0x72>
    358c:	13 c0       	rjmp	.+38     	; 0x35b4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    358e:	e9 e3       	ldi	r30, 0x39	; 57
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	80 81       	ld	r24, Z
    3594:	89 83       	std	Y+1, r24	; 0x01
    3596:	0e c0       	rjmp	.+28     	; 0x35b4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    3598:	e6 e3       	ldi	r30, 0x36	; 54
    359a:	f0 e0       	ldi	r31, 0x00	; 0
    359c:	80 81       	ld	r24, Z
    359e:	89 83       	std	Y+1, r24	; 0x01
    35a0:	09 c0       	rjmp	.+18     	; 0x35b4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    35a2:	e3 e3       	ldi	r30, 0x33	; 51
    35a4:	f0 e0       	ldi	r31, 0x00	; 0
    35a6:	80 81       	ld	r24, Z
    35a8:	89 83       	std	Y+1, r24	; 0x01
    35aa:	04 c0       	rjmp	.+8      	; 0x35b4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    35ac:	e0 e3       	ldi	r30, 0x30	; 48
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	80 81       	ld	r24, Z
    35b2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    35b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    35b6:	0f 90       	pop	r0
    35b8:	0f 90       	pop	r0
    35ba:	0f 90       	pop	r0
    35bc:	0f 90       	pop	r0
    35be:	cf 91       	pop	r28
    35c0:	df 91       	pop	r29
    35c2:	08 95       	ret

000035c4 <Auto_Air_Conditioner_unit_Init>:
#include "util/delay.h"
#include "Auto_Air_Conditioner_unit.h"
#include "../MCAL_DRIVERS/adc.h"
#include "../MCAL_DRIVERS/Timer0_Pwm_For_Conditioner_Power.h"
void Auto_Air_Conditioner_unit_Init()
{
    35c4:	df 93       	push	r29
    35c6:	cf 93       	push	r28
    35c8:	0f 92       	push	r0
    35ca:	cd b7       	in	r28, 0x3d	; 61
    35cc:	de b7       	in	r29, 0x3e	; 62
	uint8 Temperature=LM35_getTemperature();
    35ce:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <LM35_getTemperature>
    35d2:	89 83       	std	Y+1, r24	; 0x01
	if(Temperature>=15&&Temperature<=35)
    35d4:	89 81       	ldd	r24, Y+1	; 0x01
    35d6:	8f 30       	cpi	r24, 0x0F	; 15
    35d8:	38 f0       	brcs	.+14     	; 0x35e8 <Auto_Air_Conditioner_unit_Init+0x24>
    35da:	89 81       	ldd	r24, Y+1	; 0x01
    35dc:	84 32       	cpi	r24, 0x24	; 36
    35de:	20 f4       	brcc	.+8      	; 0x35e8 <Auto_Air_Conditioner_unit_Init+0x24>
	{
		Timer0_PWM_Init(Full_Power);
    35e0:	8f ef       	ldi	r24, 0xFF	; 255
    35e2:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <Timer0_PWM_Init>
    35e6:	1d c0       	rjmp	.+58     	; 0x3622 <Auto_Air_Conditioner_unit_Init+0x5e>
	}
	else if(Temperature>=25&&Temperature<=27)
    35e8:	89 81       	ldd	r24, Y+1	; 0x01
    35ea:	89 31       	cpi	r24, 0x19	; 25
    35ec:	38 f0       	brcs	.+14     	; 0x35fc <Auto_Air_Conditioner_unit_Init+0x38>
    35ee:	89 81       	ldd	r24, Y+1	; 0x01
    35f0:	8c 31       	cpi	r24, 0x1C	; 28
    35f2:	20 f4       	brcc	.+8      	; 0x35fc <Auto_Air_Conditioner_unit_Init+0x38>
	{
		Timer0_PWM_Init(Half_Power);
    35f4:	80 e8       	ldi	r24, 0x80	; 128
    35f6:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <Timer0_PWM_Init>
    35fa:	13 c0       	rjmp	.+38     	; 0x3622 <Auto_Air_Conditioner_unit_Init+0x5e>
	}
	else if(Temperature>=27&&Temperature<=29)
    35fc:	89 81       	ldd	r24, Y+1	; 0x01
    35fe:	8b 31       	cpi	r24, 0x1B	; 27
    3600:	38 f0       	brcs	.+14     	; 0x3610 <Auto_Air_Conditioner_unit_Init+0x4c>
    3602:	89 81       	ldd	r24, Y+1	; 0x01
    3604:	8e 31       	cpi	r24, 0x1E	; 30
    3606:	20 f4       	brcc	.+8      	; 0x3610 <Auto_Air_Conditioner_unit_Init+0x4c>
	{
		Timer0_PWM_Init(Three_Quarters_of_Power);
    3608:	80 ec       	ldi	r24, 0xC0	; 192
    360a:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <Timer0_PWM_Init>
    360e:	09 c0       	rjmp	.+18     	; 0x3622 <Auto_Air_Conditioner_unit_Init+0x5e>
	}
	else if(Temperature>29)
    3610:	89 81       	ldd	r24, Y+1	; 0x01
    3612:	8e 31       	cpi	r24, 0x1E	; 30
    3614:	20 f0       	brcs	.+8      	; 0x361e <Auto_Air_Conditioner_unit_Init+0x5a>
	{
		Timer0_PWM_Init(Full_Power);
    3616:	8f ef       	ldi	r24, 0xFF	; 255
    3618:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <Timer0_PWM_Init>
    361c:	02 c0       	rjmp	.+4      	; 0x3622 <Auto_Air_Conditioner_unit_Init+0x5e>
	}
	else
	{
		Timer0_PWM_DeInit();
    361e:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <Timer0_PWM_DeInit>
	}

}
    3622:	0f 90       	pop	r0
    3624:	cf 91       	pop	r28
    3626:	df 91       	pop	r29
    3628:	08 95       	ret

0000362a <BluetoothInit>:

#include "../MCAL_DRIVERS/UART_Interface.h"
#include "../Serivecs_driver/STD_TYPES.h"
#include "../Serivecs_driver/BIT_MATH.h"

void BluetoothInit(){
    362a:	df 93       	push	r29
    362c:	cf 93       	push	r28
    362e:	cd b7       	in	r28, 0x3d	; 61
    3630:	de b7       	in	r29, 0x3e	; 62
	UART_VidInit () ;
    3632:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <UART_VidInit>
}
    3636:	cf 91       	pop	r28
    3638:	df 91       	pop	r29
    363a:	08 95       	ret

0000363c <Bluetooth_U32Getnumber>:
u32 Bluetooth_U32Getnumber(){
    363c:	df 93       	push	r29
    363e:	cf 93       	push	r28
    3640:	cd b7       	in	r28, 0x3d	; 61
    3642:	de b7       	in	r29, 0x3e	; 62
	return UART_VidRecieveData();
    3644:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <UART_VidRecieveData>
    3648:	88 2f       	mov	r24, r24
    364a:	90 e0       	ldi	r25, 0x00	; 0
}
    364c:	cf 91       	pop	r28
    364e:	df 91       	pop	r29
    3650:	08 95       	ret

00003652 <Bluetooth_VidSendData>:
void Bluetooth_VidSendData(u8 Copy_U8Data){
    3652:	df 93       	push	r29
    3654:	cf 93       	push	r28
    3656:	0f 92       	push	r0
    3658:	cd b7       	in	r28, 0x3d	; 61
    365a:	de b7       	in	r29, 0x3e	; 62
    365c:	89 83       	std	Y+1, r24	; 0x01
	 UART_VidSendData(Copy_U8Data);
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <UART_VidSendData>
}
    3664:	0f 90       	pop	r0
    3666:	cf 91       	pop	r28
    3668:	df 91       	pop	r29
    366a:	08 95       	ret

0000366c <BluetoothVidSendString>:
void BluetoothVidSendString (u8 Copy_U8String[]){
    366c:	df 93       	push	r29
    366e:	cf 93       	push	r28
    3670:	00 d0       	rcall	.+0      	; 0x3672 <BluetoothVidSendString+0x6>
    3672:	cd b7       	in	r28, 0x3d	; 61
    3674:	de b7       	in	r29, 0x3e	; 62
    3676:	9a 83       	std	Y+2, r25	; 0x02
    3678:	89 83       	std	Y+1, r24	; 0x01
	UART_VidSendString(Copy_U8String);
    367a:	89 81       	ldd	r24, Y+1	; 0x01
    367c:	9a 81       	ldd	r25, Y+2	; 0x02
    367e:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <UART_VidSendString>
}
    3682:	0f 90       	pop	r0
    3684:	0f 90       	pop	r0
    3686:	cf 91       	pop	r28
    3688:	df 91       	pop	r29
    368a:	08 95       	ret

0000368c <DcMotor_VidInit>:
#include "../MCAL_DRIVERS/DIO_interface.h"
#include "../MCAL_DRIVERS/TIMER_Interface.h"
#include "DCMOTOR_Private.h"
#include "DCMOTOR_CFG.h"

void DcMotor_VidInit(void){
    368c:	df 93       	push	r29
    368e:	cf 93       	push	r28
    3690:	cd b7       	in	r28, 0x3d	; 61
    3692:	de b7       	in	r29, 0x3e	; 62
	/*set the direction of the two input pins of the dc motor to be output pins */
	DIO_VidSetPinDirection(DC_MOTOR_PORT , DC_MOTOR_PIN1 , HIGH);
    3694:	80 e0       	ldi	r24, 0x00	; 0
    3696:	60 e0       	ldi	r22, 0x00	; 0
    3698:	41 e0       	ldi	r20, 0x01	; 1
    369a:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DC_MOTOR_PORT , DC_MOTOR_PIN2 , HIGH);
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	61 e0       	ldi	r22, 0x01	; 1
    36a2:	41 e0       	ldi	r20, 0x01	; 1
    36a4:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DC_MOTOR_PORT , DC_MOTOR_PIN3 , HIGH);
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	62 e0       	ldi	r22, 0x02	; 2
    36ac:	41 e0       	ldi	r20, 0x01	; 1
    36ae:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DC_MOTOR_PORT , DC_MOTOR_PIN4 , HIGH);
    36b2:	80 e0       	ldi	r24, 0x00	; 0
    36b4:	63 e0       	ldi	r22, 0x03	; 3
    36b6:	41 e0       	ldi	r20, 0x01	; 1
    36b8:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>

	/*initialize the dc motor to be stop at the beginning*/
	DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , LOW);
    36bc:	80 e0       	ldi	r24, 0x00	; 0
    36be:	60 e0       	ldi	r22, 0x00	; 0
    36c0:	40 e0       	ldi	r20, 0x00	; 0
    36c2:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , LOW);
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	61 e0       	ldi	r22, 0x01	; 1
    36ca:	40 e0       	ldi	r20, 0x00	; 0
    36cc:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN3 , LOW);
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	62 e0       	ldi	r22, 0x02	; 2
    36d4:	40 e0       	ldi	r20, 0x00	; 0
    36d6:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN4 , LOW);
    36da:	80 e0       	ldi	r24, 0x00	; 0
    36dc:	63 e0       	ldi	r22, 0x03	; 3
    36de:	40 e0       	ldi	r20, 0x00	; 0
    36e0:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>

	/* to init used timer*/
	switch (TARGET_TIMER){
	case TIMER0 : TIMER0_VidInitialize();  break ;
	case TIMER2 : TIMER2_VidInitialize();  break ;
    36e4:	0e 94 fd 14 	call	0x29fa	; 0x29fa <TIMER2_VidInitialize>
	}
}
    36e8:	cf 91       	pop	r28
    36ea:	df 91       	pop	r29
    36ec:	08 95       	ret

000036ee <DcMotor_VidRotate_Wheels1>:

void DcMotor_VidRotate_Wheels1(u8 state){
    36ee:	df 93       	push	r29
    36f0:	cf 93       	push	r28
    36f2:	00 d0       	rcall	.+0      	; 0x36f4 <DcMotor_VidRotate_Wheels1+0x6>
    36f4:	0f 92       	push	r0
    36f6:	cd b7       	in	r28, 0x3d	; 61
    36f8:	de b7       	in	r29, 0x3e	; 62
    36fa:	89 83       	std	Y+1, r24	; 0x01
	switch(state){
    36fc:	89 81       	ldd	r24, Y+1	; 0x01
    36fe:	28 2f       	mov	r18, r24
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	3b 83       	std	Y+3, r19	; 0x03
    3704:	2a 83       	std	Y+2, r18	; 0x02
    3706:	8a 81       	ldd	r24, Y+2	; 0x02
    3708:	9b 81       	ldd	r25, Y+3	; 0x03
    370a:	81 30       	cpi	r24, 0x01	; 1
    370c:	91 05       	cpc	r25, r1
    370e:	a1 f0       	breq	.+40     	; 0x3738 <DcMotor_VidRotate_Wheels1+0x4a>
    3710:	2a 81       	ldd	r18, Y+2	; 0x02
    3712:	3b 81       	ldd	r19, Y+3	; 0x03
    3714:	22 30       	cpi	r18, 0x02	; 2
    3716:	31 05       	cpc	r19, r1
    3718:	d1 f0       	breq	.+52     	; 0x374e <DcMotor_VidRotate_Wheels1+0x60>
    371a:	8a 81       	ldd	r24, Y+2	; 0x02
    371c:	9b 81       	ldd	r25, Y+3	; 0x03
    371e:	00 97       	sbiw	r24, 0x00	; 0
    3720:	01 f5       	brne	.+64     	; 0x3762 <DcMotor_VidRotate_Wheels1+0x74>
	case STOP:
		/*make the dc motor stop*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , LOW);
    3722:	80 e0       	ldi	r24, 0x00	; 0
    3724:	60 e0       	ldi	r22, 0x00	; 0
    3726:	40 e0       	ldi	r20, 0x00	; 0
    3728:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , LOW);
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	61 e0       	ldi	r22, 0x01	; 1
    3730:	40 e0       	ldi	r20, 0x00	; 0
    3732:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
    3736:	15 c0       	rjmp	.+42     	; 0x3762 <DcMotor_VidRotate_Wheels1+0x74>
		break;
	case CLK_WISE:
		/*make the dc motor start in CLOCK_WISE direction*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , LOW);
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	60 e0       	ldi	r22, 0x00	; 0
    373c:	40 e0       	ldi	r20, 0x00	; 0
    373e:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , HIGH);
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	61 e0       	ldi	r22, 0x01	; 1
    3746:	41 e0       	ldi	r20, 0x01	; 1
    3748:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
    374c:	0a c0       	rjmp	.+20     	; 0x3762 <DcMotor_VidRotate_Wheels1+0x74>
		break;
	case ANTI_CLK_WISE:
		/*make the dc motor start in ANTI_CLOCK_WISE  direction*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , HIGH);
    374e:	80 e0       	ldi	r24, 0x00	; 0
    3750:	60 e0       	ldi	r22, 0x00	; 0
    3752:	41 e0       	ldi	r20, 0x01	; 1
    3754:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , LOW);
    3758:	80 e0       	ldi	r24, 0x00	; 0
    375a:	61 e0       	ldi	r22, 0x01	; 1
    375c:	40 e0       	ldi	r20, 0x00	; 0
    375e:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		break;
	}
}
    3762:	0f 90       	pop	r0
    3764:	0f 90       	pop	r0
    3766:	0f 90       	pop	r0
    3768:	cf 91       	pop	r28
    376a:	df 91       	pop	r29
    376c:	08 95       	ret

0000376e <DcMotor_VidRotate_Wheels2>:

void DcMotor_VidRotate_Wheels2(u8 state){
    376e:	df 93       	push	r29
    3770:	cf 93       	push	r28
    3772:	00 d0       	rcall	.+0      	; 0x3774 <DcMotor_VidRotate_Wheels2+0x6>
    3774:	0f 92       	push	r0
    3776:	cd b7       	in	r28, 0x3d	; 61
    3778:	de b7       	in	r29, 0x3e	; 62
    377a:	89 83       	std	Y+1, r24	; 0x01
	switch(state){
    377c:	89 81       	ldd	r24, Y+1	; 0x01
    377e:	28 2f       	mov	r18, r24
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	3b 83       	std	Y+3, r19	; 0x03
    3784:	2a 83       	std	Y+2, r18	; 0x02
    3786:	8a 81       	ldd	r24, Y+2	; 0x02
    3788:	9b 81       	ldd	r25, Y+3	; 0x03
    378a:	81 30       	cpi	r24, 0x01	; 1
    378c:	91 05       	cpc	r25, r1
    378e:	a1 f0       	breq	.+40     	; 0x37b8 <DcMotor_VidRotate_Wheels2+0x4a>
    3790:	2a 81       	ldd	r18, Y+2	; 0x02
    3792:	3b 81       	ldd	r19, Y+3	; 0x03
    3794:	22 30       	cpi	r18, 0x02	; 2
    3796:	31 05       	cpc	r19, r1
    3798:	d1 f0       	breq	.+52     	; 0x37ce <DcMotor_VidRotate_Wheels2+0x60>
    379a:	8a 81       	ldd	r24, Y+2	; 0x02
    379c:	9b 81       	ldd	r25, Y+3	; 0x03
    379e:	00 97       	sbiw	r24, 0x00	; 0
    37a0:	01 f5       	brne	.+64     	; 0x37e2 <DcMotor_VidRotate_Wheels2+0x74>
	case STOP:
		/*make the dc motor stop*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN3 , LOW);
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	62 e0       	ldi	r22, 0x02	; 2
    37a6:	40 e0       	ldi	r20, 0x00	; 0
    37a8:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN4 , LOW);
    37ac:	80 e0       	ldi	r24, 0x00	; 0
    37ae:	63 e0       	ldi	r22, 0x03	; 3
    37b0:	40 e0       	ldi	r20, 0x00	; 0
    37b2:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
    37b6:	15 c0       	rjmp	.+42     	; 0x37e2 <DcMotor_VidRotate_Wheels2+0x74>
		break;
	case CLK_WISE:
		/*make the dc motor start in CLOCK_WISE direction*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN3 , LOW);
    37b8:	80 e0       	ldi	r24, 0x00	; 0
    37ba:	62 e0       	ldi	r22, 0x02	; 2
    37bc:	40 e0       	ldi	r20, 0x00	; 0
    37be:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN4 , HIGH);
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	63 e0       	ldi	r22, 0x03	; 3
    37c6:	41 e0       	ldi	r20, 0x01	; 1
    37c8:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
    37cc:	0a c0       	rjmp	.+20     	; 0x37e2 <DcMotor_VidRotate_Wheels2+0x74>
		break;
	case ANTI_CLK_WISE:
		/*make the dc motor start in ANTI_CLOCK_WISE  direction*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN3 , HIGH);
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	62 e0       	ldi	r22, 0x02	; 2
    37d2:	41 e0       	ldi	r20, 0x01	; 1
    37d4:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN4 , LOW);
    37d8:	80 e0       	ldi	r24, 0x00	; 0
    37da:	63 e0       	ldi	r22, 0x03	; 3
    37dc:	40 e0       	ldi	r20, 0x00	; 0
    37de:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
		break;
	}
}
    37e2:	0f 90       	pop	r0
    37e4:	0f 90       	pop	r0
    37e6:	0f 90       	pop	r0
    37e8:	cf 91       	pop	r28
    37ea:	df 91       	pop	r29
    37ec:	08 95       	ret

000037ee <DcMotor_VidSetPWMPulsePercentage>:

void DcMotor_VidSetPWMPulsePercentage(u8 PulsePercentage){
    37ee:	df 93       	push	r29
    37f0:	cf 93       	push	r28
    37f2:	0f 92       	push	r0
    37f4:	cd b7       	in	r28, 0x3d	; 61
    37f6:	de b7       	in	r29, 0x3e	; 62
    37f8:	89 83       	std	Y+1, r24	; 0x01
	Timer2_VidSETDUTY(PulsePercentage);
    37fa:	89 81       	ldd	r24, Y+1	; 0x01
    37fc:	0e 94 48 15 	call	0x2a90	; 0x2a90 <Timer2_VidSETDUTY>
}
    3800:	0f 90       	pop	r0
    3802:	cf 91       	pop	r28
    3804:	df 91       	pop	r29
    3806:	08 95       	ret

00003808 <process>:
#include "LDR.h"
#include "../MCAL_DRIVERS/adc.h"
#include "../MCAL_DRIVERS/gpio.h"

void process (void)
{
    3808:	df 93       	push	r29
    380a:	cf 93       	push	r28
    380c:	0f 92       	push	r0
    380e:	cd b7       	in	r28, 0x3d	; 61
    3810:	de b7       	in	r29, 0x3e	; 62
	uint8 ledStatus =0;
    3812:	19 82       	std	Y+1, r1	; 0x01

	ledStatus =LDR_getLightIntensity();
    3814:	0e 94 2b 1c 	call	0x3856	; 0x3856 <LDR_getLightIntensity>
    3818:	89 83       	std	Y+1, r24	; 0x01
			if(ledStatus)
    381a:	89 81       	ldd	r24, Y+1	; 0x01
    381c:	88 23       	and	r24, r24
    381e:	31 f0       	breq	.+12     	; 0x382c <process+0x24>
			{
				GPIO_writePin(PORTD_ID,LED_PIN_ID , 1);
    3820:	83 e0       	ldi	r24, 0x03	; 3
    3822:	63 e0       	ldi	r22, 0x03	; 3
    3824:	41 e0       	ldi	r20, 0x01	; 1
    3826:	0e 94 8f 18 	call	0x311e	; 0x311e <GPIO_writePin>
    382a:	05 c0       	rjmp	.+10     	; 0x3836 <process+0x2e>
			}
			else
			{
				GPIO_writePin(PORTD_ID,LED_PIN_ID , 0);
    382c:	83 e0       	ldi	r24, 0x03	; 3
    382e:	63 e0       	ldi	r22, 0x03	; 3
    3830:	40 e0       	ldi	r20, 0x00	; 0
    3832:	0e 94 8f 18 	call	0x311e	; 0x311e <GPIO_writePin>
			}

}
    3836:	0f 90       	pop	r0
    3838:	cf 91       	pop	r28
    383a:	df 91       	pop	r29
    383c:	08 95       	ret

0000383e <LDR_mode>:

void LDR_mode (void)
{
    383e:	df 93       	push	r29
    3840:	cf 93       	push	r28
    3842:	cd b7       	in	r28, 0x3d	; 61
    3844:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LED_PORT, LED_PIN_ID, PIN_OUTPUT);
    3846:	83 e0       	ldi	r24, 0x03	; 3
    3848:	63 e0       	ldi	r22, 0x03	; 3
    384a:	41 e0       	ldi	r20, 0x01	; 1
    384c:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <GPIO_setupPinDirection>
}
    3850:	cf 91       	pop	r28
    3852:	df 91       	pop	r29
    3854:	08 95       	ret

00003856 <LDR_getLightIntensity>:

uint8 LDR_getLightIntensity (void)
{
    3856:	df 93       	push	r29
    3858:	cf 93       	push	r28
    385a:	00 d0       	rcall	.+0      	; 0x385c <LDR_getLightIntensity+0x6>
    385c:	0f 92       	push	r0
    385e:	cd b7       	in	r28, 0x3d	; 61
    3860:	de b7       	in	r29, 0x3e	; 62
	uint16 adc_value = 0;
    3862:	1a 82       	std	Y+2, r1	; 0x02
    3864:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the LDR sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    3866:	85 e0       	ldi	r24, 0x05	; 5
    3868:	0e 94 6d 17 	call	0x2eda	; 0x2eda <ADC_readChannel>
    386c:	9a 83       	std	Y+2, r25	; 0x02
    386e:	89 83       	std	Y+1, r24	; 0x01

	/*Compare the ADC value with the Threshold value obtained from the sensor*/
	if(adc_value >= THRESHOLD_VALUE)
    3870:	89 81       	ldd	r24, Y+1	; 0x01
    3872:	9a 81       	ldd	r25, Y+2	; 0x02
    3874:	84 31       	cpi	r24, 0x14	; 20
    3876:	91 05       	cpc	r25, r1
    3878:	10 f0       	brcs	.+4      	; 0x387e <LDR_getLightIntensity+0x28>
	{
		/* If the ADC value is larger than the threshold value then this means
		 * that the sensor can feel a suitable light intensity thus we turn off the LED*/
		return TURN_OFF_LIGHT;
    387a:	1b 82       	std	Y+3, r1	; 0x03
    387c:	02 c0       	rjmp	.+4      	; 0x3882 <LDR_getLightIntensity+0x2c>
	}
	else
	{
		/* If the ADC value is smaller than the threshold value then this means that
		 * the sensor cannot feel a suitable light intensity thus we turn on the LED*/
		return TURN_ON_LIGHT;
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	8b 83       	std	Y+3, r24	; 0x03
    3882:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	/* It's somewhat of a Negative logic*/
}
    3884:	0f 90       	pop	r0
    3886:	0f 90       	pop	r0
    3888:	0f 90       	pop	r0
    388a:	cf 91       	pop	r28
    388c:	df 91       	pop	r29
    388e:	08 95       	ret

00003890 <Ultrasonic_edgeProcessing>:
/*
 * Description :
 * Call-Back Function used to calculate g_timeHigh for the Ultrasonic pulse
 */
static void Ultrasonic_edgeProcessing(void)
{
    3890:	df 93       	push	r29
    3892:	cf 93       	push	r28
    3894:	cd b7       	in	r28, 0x3d	; 61
    3896:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    3898:	80 91 a0 01 	lds	r24, 0x01A0
    389c:	8f 5f       	subi	r24, 0xFF	; 255
    389e:	80 93 a0 01 	sts	0x01A0, r24

	if(g_edgeCount == 1)
    38a2:	80 91 a0 01 	lds	r24, 0x01A0
    38a6:	81 30       	cpi	r24, 0x01	; 1
    38a8:	31 f4       	brne	.+12     	; 0x38b6 <Ultrasonic_edgeProcessing+0x26>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		Timer1Icu_clearTimerValue();
    38aa:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <Timer1Icu_clearTimerValue>

		/* Detect falling edge */
		Timer1Icu_setEdgeDetectionType(FALLING);
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	0e 94 c8 14 	call	0x2990	; 0x2990 <Timer1Icu_setEdgeDetectionType>
    38b4:	0d c0       	rjmp	.+26     	; 0x38d0 <Ultrasonic_edgeProcessing+0x40>
	}
	else if(g_edgeCount == 2)
    38b6:	80 91 a0 01 	lds	r24, 0x01A0
    38ba:	82 30       	cpi	r24, 0x02	; 2
    38bc:	49 f4       	brne	.+18     	; 0x38d0 <Ultrasonic_edgeProcessing+0x40>
	{
		/* Store the High time value */
		g_timeHigh = Timer1Icu_getInputCaptureValue();
    38be:	0e 94 e7 14 	call	0x29ce	; 0x29ce <Timer1Icu_getInputCaptureValue>
    38c2:	90 93 a2 01 	sts	0x01A2, r25
    38c6:	80 93 a1 01 	sts	0x01A1, r24

		/* Detect rising edge */
		Timer1Icu_setEdgeDetectionType(RISING);
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	0e 94 c8 14 	call	0x2990	; 0x2990 <Timer1Icu_setEdgeDetectionType>
	}
}
    38d0:	cf 91       	pop	r28
    38d2:	df 91       	pop	r29
    38d4:	08 95       	ret

000038d6 <Ultrasonic_Trigger>:
/*
 * Description :
 * Function send trigger pulse for Ultrasonic sensor to start measurements
 */
static void Ultrasonic_Trigger(void)
{
    38d6:	df 93       	push	r29
    38d8:	cf 93       	push	r28
    38da:	cd b7       	in	r28, 0x3d	; 61
    38dc:	de b7       	in	r29, 0x3e	; 62
    38de:	68 97       	sbiw	r28, 0x18	; 24
    38e0:	0f b6       	in	r0, 0x3f	; 63
    38e2:	f8 94       	cli
    38e4:	de bf       	out	0x3e, r29	; 62
    38e6:	0f be       	out	0x3f, r0	; 63
    38e8:	cd bf       	out	0x3d, r28	; 61
	/* Send the Trigger pulse */
	DIO_VidSetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,1);
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	65 e0       	ldi	r22, 0x05	; 5
    38ee:	41 e0       	ldi	r20, 0x01	; 1
    38f0:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
    38f4:	80 e0       	ldi	r24, 0x00	; 0
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	a0 e2       	ldi	r26, 0x20	; 32
    38fa:	b1 e4       	ldi	r27, 0x41	; 65
    38fc:	8d 8b       	std	Y+21, r24	; 0x15
    38fe:	9e 8b       	std	Y+22, r25	; 0x16
    3900:	af 8b       	std	Y+23, r26	; 0x17
    3902:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3904:	6d 89       	ldd	r22, Y+21	; 0x15
    3906:	7e 89       	ldd	r23, Y+22	; 0x16
    3908:	8f 89       	ldd	r24, Y+23	; 0x17
    390a:	98 8d       	ldd	r25, Y+24	; 0x18
    390c:	2b ea       	ldi	r18, 0xAB	; 171
    390e:	3a ea       	ldi	r19, 0xAA	; 170
    3910:	4a e2       	ldi	r20, 0x2A	; 42
    3912:	50 e4       	ldi	r21, 0x40	; 64
    3914:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3918:	dc 01       	movw	r26, r24
    391a:	cb 01       	movw	r24, r22
    391c:	89 8b       	std	Y+17, r24	; 0x11
    391e:	9a 8b       	std	Y+18, r25	; 0x12
    3920:	ab 8b       	std	Y+19, r26	; 0x13
    3922:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3924:	69 89       	ldd	r22, Y+17	; 0x11
    3926:	7a 89       	ldd	r23, Y+18	; 0x12
    3928:	8b 89       	ldd	r24, Y+19	; 0x13
    392a:	9c 89       	ldd	r25, Y+20	; 0x14
    392c:	20 e0       	ldi	r18, 0x00	; 0
    392e:	30 e0       	ldi	r19, 0x00	; 0
    3930:	40 e8       	ldi	r20, 0x80	; 128
    3932:	5f e3       	ldi	r21, 0x3F	; 63
    3934:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    3938:	88 23       	and	r24, r24
    393a:	1c f4       	brge	.+6      	; 0x3942 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    393c:	81 e0       	ldi	r24, 0x01	; 1
    393e:	88 8b       	std	Y+16, r24	; 0x10
    3940:	91 c0       	rjmp	.+290    	; 0x3a64 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    3942:	69 89       	ldd	r22, Y+17	; 0x11
    3944:	7a 89       	ldd	r23, Y+18	; 0x12
    3946:	8b 89       	ldd	r24, Y+19	; 0x13
    3948:	9c 89       	ldd	r25, Y+20	; 0x14
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	4f e7       	ldi	r20, 0x7F	; 127
    3950:	53 e4       	ldi	r21, 0x43	; 67
    3952:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    3956:	18 16       	cp	r1, r24
    3958:	0c f0       	brlt	.+2      	; 0x395c <Ultrasonic_Trigger+0x86>
    395a:	7b c0       	rjmp	.+246    	; 0x3a52 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    395c:	6d 89       	ldd	r22, Y+21	; 0x15
    395e:	7e 89       	ldd	r23, Y+22	; 0x16
    3960:	8f 89       	ldd	r24, Y+23	; 0x17
    3962:	98 8d       	ldd	r25, Y+24	; 0x18
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	4a e7       	ldi	r20, 0x7A	; 122
    396a:	54 e4       	ldi	r21, 0x44	; 68
    396c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    3970:	dc 01       	movw	r26, r24
    3972:	cb 01       	movw	r24, r22
    3974:	8c 87       	std	Y+12, r24	; 0x0c
    3976:	9d 87       	std	Y+13, r25	; 0x0d
    3978:	ae 87       	std	Y+14, r26	; 0x0e
    397a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    397c:	6c 85       	ldd	r22, Y+12	; 0x0c
    397e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3980:	8e 85       	ldd	r24, Y+14	; 0x0e
    3982:	9f 85       	ldd	r25, Y+15	; 0x0f
    3984:	20 e0       	ldi	r18, 0x00	; 0
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	4a ef       	ldi	r20, 0xFA	; 250
    398a:	54 e4       	ldi	r21, 0x44	; 68
    398c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3990:	dc 01       	movw	r26, r24
    3992:	cb 01       	movw	r24, r22
    3994:	88 87       	std	Y+8, r24	; 0x08
    3996:	99 87       	std	Y+9, r25	; 0x09
    3998:	aa 87       	std	Y+10, r26	; 0x0a
    399a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    399c:	68 85       	ldd	r22, Y+8	; 0x08
    399e:	79 85       	ldd	r23, Y+9	; 0x09
    39a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    39a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	40 e8       	ldi	r20, 0x80	; 128
    39aa:	5f e3       	ldi	r21, 0x3F	; 63
    39ac:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    39b0:	88 23       	and	r24, r24
    39b2:	2c f4       	brge	.+10     	; 0x39be <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	9f 83       	std	Y+7, r25	; 0x07
    39ba:	8e 83       	std	Y+6, r24	; 0x06
    39bc:	3f c0       	rjmp	.+126    	; 0x3a3c <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    39be:	68 85       	ldd	r22, Y+8	; 0x08
    39c0:	79 85       	ldd	r23, Y+9	; 0x09
    39c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    39c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    39c6:	20 e0       	ldi	r18, 0x00	; 0
    39c8:	3f ef       	ldi	r19, 0xFF	; 255
    39ca:	4f e7       	ldi	r20, 0x7F	; 127
    39cc:	57 e4       	ldi	r21, 0x47	; 71
    39ce:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    39d2:	18 16       	cp	r1, r24
    39d4:	4c f5       	brge	.+82     	; 0x3a28 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    39d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    39da:	8e 85       	ldd	r24, Y+14	; 0x0e
    39dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	30 e0       	ldi	r19, 0x00	; 0
    39e2:	40 e2       	ldi	r20, 0x20	; 32
    39e4:	51 e4       	ldi	r21, 0x41	; 65
    39e6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    39ea:	dc 01       	movw	r26, r24
    39ec:	cb 01       	movw	r24, r22
    39ee:	bc 01       	movw	r22, r24
    39f0:	cd 01       	movw	r24, r26
    39f2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    39f6:	dc 01       	movw	r26, r24
    39f8:	cb 01       	movw	r24, r22
    39fa:	9f 83       	std	Y+7, r25	; 0x07
    39fc:	8e 83       	std	Y+6, r24	; 0x06
    39fe:	0f c0       	rjmp	.+30     	; 0x3a1e <Ultrasonic_Trigger+0x148>
    3a00:	88 ec       	ldi	r24, 0xC8	; 200
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	9d 83       	std	Y+5, r25	; 0x05
    3a06:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a08:	8c 81       	ldd	r24, Y+4	; 0x04
    3a0a:	9d 81       	ldd	r25, Y+5	; 0x05
    3a0c:	01 97       	sbiw	r24, 0x01	; 1
    3a0e:	f1 f7       	brne	.-4      	; 0x3a0c <Ultrasonic_Trigger+0x136>
    3a10:	9d 83       	std	Y+5, r25	; 0x05
    3a12:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a14:	8e 81       	ldd	r24, Y+6	; 0x06
    3a16:	9f 81       	ldd	r25, Y+7	; 0x07
    3a18:	01 97       	sbiw	r24, 0x01	; 1
    3a1a:	9f 83       	std	Y+7, r25	; 0x07
    3a1c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a1e:	8e 81       	ldd	r24, Y+6	; 0x06
    3a20:	9f 81       	ldd	r25, Y+7	; 0x07
    3a22:	00 97       	sbiw	r24, 0x00	; 0
    3a24:	69 f7       	brne	.-38     	; 0x3a00 <Ultrasonic_Trigger+0x12a>
    3a26:	24 c0       	rjmp	.+72     	; 0x3a70 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a28:	68 85       	ldd	r22, Y+8	; 0x08
    3a2a:	79 85       	ldd	r23, Y+9	; 0x09
    3a2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a30:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3a34:	dc 01       	movw	r26, r24
    3a36:	cb 01       	movw	r24, r22
    3a38:	9f 83       	std	Y+7, r25	; 0x07
    3a3a:	8e 83       	std	Y+6, r24	; 0x06
    3a3c:	8e 81       	ldd	r24, Y+6	; 0x06
    3a3e:	9f 81       	ldd	r25, Y+7	; 0x07
    3a40:	9b 83       	std	Y+3, r25	; 0x03
    3a42:	8a 83       	std	Y+2, r24	; 0x02
    3a44:	8a 81       	ldd	r24, Y+2	; 0x02
    3a46:	9b 81       	ldd	r25, Y+3	; 0x03
    3a48:	01 97       	sbiw	r24, 0x01	; 1
    3a4a:	f1 f7       	brne	.-4      	; 0x3a48 <Ultrasonic_Trigger+0x172>
    3a4c:	9b 83       	std	Y+3, r25	; 0x03
    3a4e:	8a 83       	std	Y+2, r24	; 0x02
    3a50:	0f c0       	rjmp	.+30     	; 0x3a70 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a52:	69 89       	ldd	r22, Y+17	; 0x11
    3a54:	7a 89       	ldd	r23, Y+18	; 0x12
    3a56:	8b 89       	ldd	r24, Y+19	; 0x13
    3a58:	9c 89       	ldd	r25, Y+20	; 0x14
    3a5a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	88 8b       	std	Y+16, r24	; 0x10
    3a64:	88 89       	ldd	r24, Y+16	; 0x10
    3a66:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a68:	89 81       	ldd	r24, Y+1	; 0x01
    3a6a:	8a 95       	dec	r24
    3a6c:	f1 f7       	brne	.-4      	; 0x3a6a <Ultrasonic_Trigger+0x194>
    3a6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_VidSetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,0);
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	65 e0       	ldi	r22, 0x05	; 5
    3a74:	40 e0       	ldi	r20, 0x00	; 0
    3a76:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VidSetPinValue>
}
    3a7a:	68 96       	adiw	r28, 0x18	; 24
    3a7c:	0f b6       	in	r0, 0x3f	; 63
    3a7e:	f8 94       	cli
    3a80:	de bf       	out	0x3e, r29	; 62
    3a82:	0f be       	out	0x3f, r0	; 63
    3a84:	cd bf       	out	0x3d, r28	; 61
    3a86:	cf 91       	pop	r28
    3a88:	df 91       	pop	r29
    3a8a:	08 95       	ret

00003a8c <Ultrasonic_init>:
 * Initialize the Ultrasonic driver by:
 * 1. Initialize the Trigger pin direction
 * 2. Initialize the ICU driver and Its Call back function.
 */
void Ultrasonic_init(void)
{
    3a8c:	df 93       	push	r29
    3a8e:	cf 93       	push	r28
    3a90:	cd b7       	in	r28, 0x3d	; 61
    3a92:	de b7       	in	r29, 0x3e	; 62
	Timer1Icu_init();
    3a94:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <Timer1Icu_init>
	DIO_VidSetPinDirection(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,1);
    3a98:	81 e0       	ldi	r24, 0x01	; 1
    3a9a:	65 e0       	ldi	r22, 0x05	; 5
    3a9c:	41 e0       	ldi	r20, 0x01	; 1
    3a9e:	0e 94 4f 09 	call	0x129e	; 0x129e <DIO_VidSetPinDirection>
	Timer1Icu_setCallBack( Ultrasonic_edgeProcessing );
    3aa2:	88 e4       	ldi	r24, 0x48	; 72
    3aa4:	9c e1       	ldi	r25, 0x1C	; 28
    3aa6:	0e 94 b6 14 	call	0x296c	; 0x296c <Timer1Icu_setCallBack>
}
    3aaa:	cf 91       	pop	r28
    3aac:	df 91       	pop	r29
    3aae:	08 95       	ret

00003ab0 <Ultrasonic_readDistance>:
 * 3. Send the Trigger to the Ultrasonic by call Ultrasonic_Trigger function
 * 4. Wait for the measurements to be done by the ICU. We need two edges raising and falling.
 * 5. Calculate the distance in Centimeter value.
 */
u16 Ultrasonic_readDistance(void)
{
    3ab0:	df 93       	push	r29
    3ab2:	cf 93       	push	r28
    3ab4:	cd b7       	in	r28, 0x3d	; 61
    3ab6:	de b7       	in	r29, 0x3e	; 62
	/* Clear all variables as they may have values from previous read operation */
	g_distance  = 0;
    3ab8:	10 92 a3 01 	sts	0x01A3, r1
	g_edgeCount = 0;
    3abc:	10 92 a0 01 	sts	0x01A0, r1
	g_timeHigh  = 0;
    3ac0:	10 92 a2 01 	sts	0x01A2, r1
    3ac4:	10 92 a1 01 	sts	0x01A1, r1

	/* Clear the timer counter register to start measurements once trigger is sent */
	Timer1Icu_clearTimerValue();
    3ac8:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <Timer1Icu_clearTimerValue>

	/* Send the trigger to activate the Ultra-sonic sensor (Start measurements) */
	Ultrasonic_Trigger();
    3acc:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <Ultrasonic_Trigger>

	/* Wait until the ICU measures the pulse in the ECHO pin */
	while(g_edgeCount != ULTRASONIC_NUM_OF_DETECTED_EDGES);
    3ad0:	80 91 a0 01 	lds	r24, 0x01A0
    3ad4:	82 30       	cpi	r24, 0x02	; 2
    3ad6:	e1 f7       	brne	.-8      	; 0x3ad0 <Ultrasonic_readDistance+0x20>

	/* Calculate the distance in Centimeter value */
	g_distance = g_timeHigh / 58;
    3ad8:	80 91 a1 01 	lds	r24, 0x01A1
    3adc:	90 91 a2 01 	lds	r25, 0x01A2
    3ae0:	2a e3       	ldi	r18, 0x3A	; 58
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	b9 01       	movw	r22, r18
    3ae6:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <__udivmodhi4>
    3aea:	cb 01       	movw	r24, r22
    3aec:	80 93 a3 01 	sts	0x01A3, r24

	return g_distance;
    3af0:	80 91 a3 01 	lds	r24, 0x01A3
    3af4:	88 2f       	mov	r24, r24
    3af6:	90 e0       	ldi	r25, 0x00	; 0
}
    3af8:	cf 91       	pop	r28
    3afa:	df 91       	pop	r29
    3afc:	08 95       	ret

00003afe <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    3afe:	df 93       	push	r29
    3b00:	cf 93       	push	r28
    3b02:	00 d0       	rcall	.+0      	; 0x3b04 <LM35_getTemperature+0x6>
    3b04:	0f 92       	push	r0
    3b06:	cd b7       	in	r28, 0x3d	; 61
    3b08:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    3b0a:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    3b0c:	1a 82       	std	Y+2, r1	; 0x02
    3b0e:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    3b10:	84 e0       	ldi	r24, 0x04	; 4
    3b12:	0e 94 6d 17 	call	0x2eda	; 0x2eda <ADC_readChannel>
    3b16:	9a 83       	std	Y+2, r25	; 0x02
    3b18:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    3b1a:	89 81       	ldd	r24, Y+1	; 0x01
    3b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1e:	cc 01       	movw	r24, r24
    3b20:	a0 e0       	ldi	r26, 0x00	; 0
    3b22:	b0 e0       	ldi	r27, 0x00	; 0
    3b24:	2e ee       	ldi	r18, 0xEE	; 238
    3b26:	32 e0       	ldi	r19, 0x02	; 2
    3b28:	40 e0       	ldi	r20, 0x00	; 0
    3b2a:	50 e0       	ldi	r21, 0x00	; 0
    3b2c:	bc 01       	movw	r22, r24
    3b2e:	cd 01       	movw	r24, r26
    3b30:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__mulsi3>
    3b34:	dc 01       	movw	r26, r24
    3b36:	cb 01       	movw	r24, r22
    3b38:	bc 01       	movw	r22, r24
    3b3a:	cd 01       	movw	r24, r26
    3b3c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__floatunsisf>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	bc 01       	movw	r22, r24
    3b46:	cd 01       	movw	r24, r26
    3b48:	20 e0       	ldi	r18, 0x00	; 0
    3b4a:	30 ed       	ldi	r19, 0xD0	; 208
    3b4c:	4f eb       	ldi	r20, 0xBF	; 191
    3b4e:	54 e4       	ldi	r21, 0x44	; 68
    3b50:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    3b54:	dc 01       	movw	r26, r24
    3b56:	cb 01       	movw	r24, r22
    3b58:	bc 01       	movw	r22, r24
    3b5a:	cd 01       	movw	r24, r26
    3b5c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3b60:	dc 01       	movw	r26, r24
    3b62:	cb 01       	movw	r24, r22
    3b64:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    3b66:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3b68:	0f 90       	pop	r0
    3b6a:	0f 90       	pop	r0
    3b6c:	0f 90       	pop	r0
    3b6e:	cf 91       	pop	r28
    3b70:	df 91       	pop	r29
    3b72:	08 95       	ret

00003b74 <MultipleTasksCar_VidInit>:
 Name        : MultipleTasksCar_VidInit
 Input       : void
 Output      : void
 Description : to initialise the states of the car
*/
void MultipleTasksCar_VidInit(){
    3b74:	df 93       	push	r29
    3b76:	cf 93       	push	r28
    3b78:	cd b7       	in	r28, 0x3d	; 61
    3b7a:	de b7       	in	r29, 0x3e	; 62
	/**/
	BluetoothInit();
    3b7c:	0e 94 15 1b 	call	0x362a	; 0x362a <BluetoothInit>
	DcMotor_VidInit();
    3b80:	0e 94 46 1b 	call	0x368c	; 0x368c <DcMotor_VidInit>

	/**/
	GIE_VidEnable();
    3b84:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GIE_VidEnable>
	Ultrasonic_init();
    3b88:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <Ultrasonic_init>

	/**/
	MultipleTasksCar_SetCarVelocity('3');
    3b8c:	83 e3       	ldi	r24, 0x33	; 51
    3b8e:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <MultipleTasksCar_SetCarVelocity>

	/**/
	ADC_init();
    3b92:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <ADC_init>
    LDR_mode();
    3b96:	0e 94 1f 1c 	call	0x383e	; 0x383e <LDR_mode>

}
    3b9a:	cf 91       	pop	r28
    3b9c:	df 91       	pop	r29
    3b9e:	08 95       	ret

00003ba0 <MultipleTasksCar_SetCarVelocity>:
 Name        : MultipleTasksCar_SetCarVelocity
 Input       : u8
 Output      : void
 Description : to set the velocity of car
*/
void MultipleTasksCar_SetCarVelocity (u8 VelocityNUMBER){
    3ba0:	df 93       	push	r29
    3ba2:	cf 93       	push	r28
    3ba4:	00 d0       	rcall	.+0      	; 0x3ba6 <MultipleTasksCar_SetCarVelocity+0x6>
    3ba6:	0f 92       	push	r0
    3ba8:	cd b7       	in	r28, 0x3d	; 61
    3baa:	de b7       	in	r29, 0x3e	; 62
    3bac:	89 83       	std	Y+1, r24	; 0x01
	switch (VelocityNUMBER){
    3bae:	89 81       	ldd	r24, Y+1	; 0x01
    3bb0:	28 2f       	mov	r18, r24
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	3b 83       	std	Y+3, r19	; 0x03
    3bb6:	2a 83       	std	Y+2, r18	; 0x02
    3bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bba:	9b 81       	ldd	r25, Y+3	; 0x03
    3bbc:	83 33       	cpi	r24, 0x33	; 51
    3bbe:	91 05       	cpc	r25, r1
    3bc0:	19 f1       	breq	.+70     	; 0x3c08 <MultipleTasksCar_SetCarVelocity+0x68>
    3bc2:	2a 81       	ldd	r18, Y+2	; 0x02
    3bc4:	3b 81       	ldd	r19, Y+3	; 0x03
    3bc6:	24 33       	cpi	r18, 0x34	; 52
    3bc8:	31 05       	cpc	r19, r1
    3bca:	5c f4       	brge	.+22     	; 0x3be2 <MultipleTasksCar_SetCarVelocity+0x42>
    3bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bce:	9b 81       	ldd	r25, Y+3	; 0x03
    3bd0:	81 33       	cpi	r24, 0x31	; 49
    3bd2:	91 05       	cpc	r25, r1
    3bd4:	89 f0       	breq	.+34     	; 0x3bf8 <MultipleTasksCar_SetCarVelocity+0x58>
    3bd6:	2a 81       	ldd	r18, Y+2	; 0x02
    3bd8:	3b 81       	ldd	r19, Y+3	; 0x03
    3bda:	22 33       	cpi	r18, 0x32	; 50
    3bdc:	31 05       	cpc	r19, r1
    3bde:	81 f0       	breq	.+32     	; 0x3c00 <MultipleTasksCar_SetCarVelocity+0x60>
    3be0:	1e c0       	rjmp	.+60     	; 0x3c1e <MultipleTasksCar_SetCarVelocity+0x7e>
    3be2:	8a 81       	ldd	r24, Y+2	; 0x02
    3be4:	9b 81       	ldd	r25, Y+3	; 0x03
    3be6:	84 33       	cpi	r24, 0x34	; 52
    3be8:	91 05       	cpc	r25, r1
    3bea:	91 f0       	breq	.+36     	; 0x3c10 <MultipleTasksCar_SetCarVelocity+0x70>
    3bec:	2a 81       	ldd	r18, Y+2	; 0x02
    3bee:	3b 81       	ldd	r19, Y+3	; 0x03
    3bf0:	25 33       	cpi	r18, 0x35	; 53
    3bf2:	31 05       	cpc	r19, r1
    3bf4:	89 f0       	breq	.+34     	; 0x3c18 <MultipleTasksCar_SetCarVelocity+0x78>
    3bf6:	13 c0       	rjmp	.+38     	; 0x3c1e <MultipleTasksCar_SetCarVelocity+0x7e>
	case '1' :	DcMotor_VidSetPWMPulsePercentage(QUARTER_PERCENTAGE);         break ;
    3bf8:	89 e1       	ldi	r24, 0x19	; 25
    3bfa:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <DcMotor_VidSetPWMPulsePercentage>
    3bfe:	0f c0       	rjmp	.+30     	; 0x3c1e <MultipleTasksCar_SetCarVelocity+0x7e>
	case '2' : 	DcMotor_VidSetPWMPulsePercentage(HALF_PERCENTAGE);            break ;
    3c00:	82 e3       	ldi	r24, 0x32	; 50
    3c02:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <DcMotor_VidSetPWMPulsePercentage>
    3c06:	0b c0       	rjmp	.+22     	; 0x3c1e <MultipleTasksCar_SetCarVelocity+0x7e>
	case '3' :  DcMotor_VidSetPWMPulsePercentage(THREE_QUARTER_PERCENTAGE);   break ;
    3c08:	8b e4       	ldi	r24, 0x4B	; 75
    3c0a:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <DcMotor_VidSetPWMPulsePercentage>
    3c0e:	07 c0       	rjmp	.+14     	; 0x3c1e <MultipleTasksCar_SetCarVelocity+0x7e>
	case '4' :  DcMotor_VidSetPWMPulsePercentage(FULL_PERCENTAGE);            break ;
    3c10:	84 e6       	ldi	r24, 0x64	; 100
    3c12:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <DcMotor_VidSetPWMPulsePercentage>
    3c16:	03 c0       	rjmp	.+6      	; 0x3c1e <MultipleTasksCar_SetCarVelocity+0x7e>
	case '5' :  DcMotor_VidSetPWMPulsePercentage(STOP);                       break ;
    3c18:	80 e0       	ldi	r24, 0x00	; 0
    3c1a:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <DcMotor_VidSetPWMPulsePercentage>
	}
}
    3c1e:	0f 90       	pop	r0
    3c20:	0f 90       	pop	r0
    3c22:	0f 90       	pop	r0
    3c24:	cf 91       	pop	r28
    3c26:	df 91       	pop	r29
    3c28:	08 95       	ret

00003c2a <MultipleTasksCar_GetDirections>:

               if driver continue in come back within obtacle , car will be automaticaaly stopped

                to lighten system accroding to the intensity in room
*/
void MultipleTasksCar_GetDirections(){
    3c2a:	df 93       	push	r29
    3c2c:	cf 93       	push	r28
    3c2e:	00 d0       	rcall	.+0      	; 0x3c30 <MultipleTasksCar_GetDirections+0x6>
    3c30:	0f 92       	push	r0
    3c32:	cd b7       	in	r28, 0x3d	; 61
    3c34:	de b7       	in	r29, 0x3e	; 62

	/* to stop without input data from bluetooth by watch dog timer */
	//Watchdog_VidEnable();
    u8 direction = Bluetooth_U32Getnumber() ;
    3c36:	0e 94 1e 1b 	call	0x363c	; 0x363c <Bluetooth_U32Getnumber>
    3c3a:	89 83       	std	Y+1, r24	; 0x01
    //Watchdog_VidDisable();

    /* to get distance on back car */
    //u16 distance = Ultrasonic_readDistance();

	switch (direction){
    3c3c:	89 81       	ldd	r24, Y+1	; 0x01
    3c3e:	28 2f       	mov	r18, r24
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	3b 83       	std	Y+3, r19	; 0x03
    3c44:	2a 83       	std	Y+2, r18	; 0x02
    3c46:	8a 81       	ldd	r24, Y+2	; 0x02
    3c48:	9b 81       	ldd	r25, Y+3	; 0x03
    3c4a:	83 36       	cpi	r24, 0x63	; 99
    3c4c:	91 05       	cpc	r25, r1
    3c4e:	49 f1       	breq	.+82     	; 0x3ca2 <MultipleTasksCar_GetDirections+0x78>
    3c50:	2a 81       	ldd	r18, Y+2	; 0x02
    3c52:	3b 81       	ldd	r19, Y+3	; 0x03
    3c54:	24 36       	cpi	r18, 0x64	; 100
    3c56:	31 05       	cpc	r19, r1
    3c58:	5c f4       	brge	.+22     	; 0x3c70 <MultipleTasksCar_GetDirections+0x46>
    3c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c5c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c5e:	81 36       	cpi	r24, 0x61	; 97
    3c60:	91 05       	cpc	r25, r1
    3c62:	89 f0       	breq	.+34     	; 0x3c86 <MultipleTasksCar_GetDirections+0x5c>
    3c64:	2a 81       	ldd	r18, Y+2	; 0x02
    3c66:	3b 81       	ldd	r19, Y+3	; 0x03
    3c68:	22 36       	cpi	r18, 0x62	; 98
    3c6a:	31 05       	cpc	r19, r1
    3c6c:	99 f0       	breq	.+38     	; 0x3c94 <MultipleTasksCar_GetDirections+0x6a>
    3c6e:	2d c0       	rjmp	.+90     	; 0x3cca <MultipleTasksCar_GetDirections+0xa0>
    3c70:	8a 81       	ldd	r24, Y+2	; 0x02
    3c72:	9b 81       	ldd	r25, Y+3	; 0x03
    3c74:	84 36       	cpi	r24, 0x64	; 100
    3c76:	91 05       	cpc	r25, r1
    3c78:	d9 f0       	breq	.+54     	; 0x3cb0 <MultipleTasksCar_GetDirections+0x86>
    3c7a:	2a 81       	ldd	r18, Y+2	; 0x02
    3c7c:	3b 81       	ldd	r19, Y+3	; 0x03
    3c7e:	25 36       	cpi	r18, 0x65	; 101
    3c80:	31 05       	cpc	r19, r1
    3c82:	e9 f0       	breq	.+58     	; 0x3cbe <MultipleTasksCar_GetDirections+0x94>
    3c84:	22 c0       	rjmp	.+68     	; 0x3cca <MultipleTasksCar_GetDirections+0xa0>
	 case UP :
		DcMotor_VidRotate_Wheels1(ANTI_CLK_WISE);
    3c86:	82 e0       	ldi	r24, 0x02	; 2
    3c88:	0e 94 77 1b 	call	0x36ee	; 0x36ee <DcMotor_VidRotate_Wheels1>
		DcMotor_VidRotate_Wheels2(ANTI_CLK_WISE);
    3c8c:	82 e0       	ldi	r24, 0x02	; 2
    3c8e:	0e 94 b7 1b 	call	0x376e	; 0x376e <DcMotor_VidRotate_Wheels2>
    3c92:	1b c0       	rjmp	.+54     	; 0x3cca <MultipleTasksCar_GetDirections+0xa0>
		break ;
	case DOWN :
		DcMotor_VidRotate_Wheels1(CLK_WISE);
    3c94:	81 e0       	ldi	r24, 0x01	; 1
    3c96:	0e 94 77 1b 	call	0x36ee	; 0x36ee <DcMotor_VidRotate_Wheels1>
		DcMotor_VidRotate_Wheels2(CLK_WISE);
    3c9a:	81 e0       	ldi	r24, 0x01	; 1
    3c9c:	0e 94 b7 1b 	call	0x376e	; 0x376e <DcMotor_VidRotate_Wheels2>
    3ca0:	14 c0       	rjmp	.+40     	; 0x3cca <MultipleTasksCar_GetDirections+0xa0>
		break ;
	case RIGHT :
		DcMotor_VidRotate_Wheels1(STOP);
    3ca2:	80 e0       	ldi	r24, 0x00	; 0
    3ca4:	0e 94 77 1b 	call	0x36ee	; 0x36ee <DcMotor_VidRotate_Wheels1>
		DcMotor_VidRotate_Wheels2(CLK_WISE);
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	0e 94 b7 1b 	call	0x376e	; 0x376e <DcMotor_VidRotate_Wheels2>
    3cae:	0d c0       	rjmp	.+26     	; 0x3cca <MultipleTasksCar_GetDirections+0xa0>
		break ;
	case LEFT :
	    DcMotor_VidRotate_Wheels1(CLK_WISE);
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	0e 94 77 1b 	call	0x36ee	; 0x36ee <DcMotor_VidRotate_Wheels1>
		DcMotor_VidRotate_Wheels2(STOP);
    3cb6:	80 e0       	ldi	r24, 0x00	; 0
    3cb8:	0e 94 b7 1b 	call	0x376e	; 0x376e <DcMotor_VidRotate_Wheels2>
    3cbc:	06 c0       	rjmp	.+12     	; 0x3cca <MultipleTasksCar_GetDirections+0xa0>
		break ;
	case NO_THING :
		DcMotor_VidRotate_Wheels1(STOP);
    3cbe:	80 e0       	ldi	r24, 0x00	; 0
    3cc0:	0e 94 77 1b 	call	0x36ee	; 0x36ee <DcMotor_VidRotate_Wheels1>
		DcMotor_VidRotate_Wheels2(STOP);
    3cc4:	80 e0       	ldi	r24, 0x00	; 0
    3cc6:	0e 94 b7 1b 	call	0x376e	; 0x376e <DcMotor_VidRotate_Wheels2>
		/*DcMotor_VidRotate_Wheels1(STOP);
		DcMotor_VidRotate_Wheels2(STOP);
	}//end else

	/* to lighten system accroding to the intensity in room*/
    Auto_Air_Conditioner_unit_Init();
    3cca:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <Auto_Air_Conditioner_unit_Init>
	process();
    3cce:	0e 94 04 1c 	call	0x3808	; 0x3808 <process>

}
    3cd2:	0f 90       	pop	r0
    3cd4:	0f 90       	pop	r0
    3cd6:	0f 90       	pop	r0
    3cd8:	cf 91       	pop	r28
    3cda:	df 91       	pop	r29
    3cdc:	08 95       	ret

00003cde <main>:
#include "APP_DRIVER/MultipleTasksCar_Interface.h"


/* steps : 1 ) determine velocity 2) determine mode*/

int main (){
    3cde:	df 93       	push	r29
    3ce0:	cf 93       	push	r28
    3ce2:	cd b7       	in	r28, 0x3d	; 61
    3ce4:	de b7       	in	r29, 0x3e	; 62
	/* initializiation function of car  */
	MultipleTasksCar_VidInit();
    3ce6:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <MultipleTasksCar_VidInit>

	/* to implemnet ur target mode */
	for(;;)
	{
		MultipleTasksCar_GetDirections() ;
    3cea:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <MultipleTasksCar_GetDirections>
    3cee:	fd cf       	rjmp	.-6      	; 0x3cea <main+0xc>

00003cf0 <__mulsi3>:
    3cf0:	62 9f       	mul	r22, r18
    3cf2:	d0 01       	movw	r26, r0
    3cf4:	73 9f       	mul	r23, r19
    3cf6:	f0 01       	movw	r30, r0
    3cf8:	82 9f       	mul	r24, r18
    3cfa:	e0 0d       	add	r30, r0
    3cfc:	f1 1d       	adc	r31, r1
    3cfe:	64 9f       	mul	r22, r20
    3d00:	e0 0d       	add	r30, r0
    3d02:	f1 1d       	adc	r31, r1
    3d04:	92 9f       	mul	r25, r18
    3d06:	f0 0d       	add	r31, r0
    3d08:	83 9f       	mul	r24, r19
    3d0a:	f0 0d       	add	r31, r0
    3d0c:	74 9f       	mul	r23, r20
    3d0e:	f0 0d       	add	r31, r0
    3d10:	65 9f       	mul	r22, r21
    3d12:	f0 0d       	add	r31, r0
    3d14:	99 27       	eor	r25, r25
    3d16:	72 9f       	mul	r23, r18
    3d18:	b0 0d       	add	r27, r0
    3d1a:	e1 1d       	adc	r30, r1
    3d1c:	f9 1f       	adc	r31, r25
    3d1e:	63 9f       	mul	r22, r19
    3d20:	b0 0d       	add	r27, r0
    3d22:	e1 1d       	adc	r30, r1
    3d24:	f9 1f       	adc	r31, r25
    3d26:	bd 01       	movw	r22, r26
    3d28:	cf 01       	movw	r24, r30
    3d2a:	11 24       	eor	r1, r1
    3d2c:	08 95       	ret

00003d2e <__udivmodhi4>:
    3d2e:	aa 1b       	sub	r26, r26
    3d30:	bb 1b       	sub	r27, r27
    3d32:	51 e1       	ldi	r21, 0x11	; 17
    3d34:	07 c0       	rjmp	.+14     	; 0x3d44 <__udivmodhi4_ep>

00003d36 <__udivmodhi4_loop>:
    3d36:	aa 1f       	adc	r26, r26
    3d38:	bb 1f       	adc	r27, r27
    3d3a:	a6 17       	cp	r26, r22
    3d3c:	b7 07       	cpc	r27, r23
    3d3e:	10 f0       	brcs	.+4      	; 0x3d44 <__udivmodhi4_ep>
    3d40:	a6 1b       	sub	r26, r22
    3d42:	b7 0b       	sbc	r27, r23

00003d44 <__udivmodhi4_ep>:
    3d44:	88 1f       	adc	r24, r24
    3d46:	99 1f       	adc	r25, r25
    3d48:	5a 95       	dec	r21
    3d4a:	a9 f7       	brne	.-22     	; 0x3d36 <__udivmodhi4_loop>
    3d4c:	80 95       	com	r24
    3d4e:	90 95       	com	r25
    3d50:	bc 01       	movw	r22, r24
    3d52:	cd 01       	movw	r24, r26
    3d54:	08 95       	ret

00003d56 <__prologue_saves__>:
    3d56:	2f 92       	push	r2
    3d58:	3f 92       	push	r3
    3d5a:	4f 92       	push	r4
    3d5c:	5f 92       	push	r5
    3d5e:	6f 92       	push	r6
    3d60:	7f 92       	push	r7
    3d62:	8f 92       	push	r8
    3d64:	9f 92       	push	r9
    3d66:	af 92       	push	r10
    3d68:	bf 92       	push	r11
    3d6a:	cf 92       	push	r12
    3d6c:	df 92       	push	r13
    3d6e:	ef 92       	push	r14
    3d70:	ff 92       	push	r15
    3d72:	0f 93       	push	r16
    3d74:	1f 93       	push	r17
    3d76:	cf 93       	push	r28
    3d78:	df 93       	push	r29
    3d7a:	cd b7       	in	r28, 0x3d	; 61
    3d7c:	de b7       	in	r29, 0x3e	; 62
    3d7e:	ca 1b       	sub	r28, r26
    3d80:	db 0b       	sbc	r29, r27
    3d82:	0f b6       	in	r0, 0x3f	; 63
    3d84:	f8 94       	cli
    3d86:	de bf       	out	0x3e, r29	; 62
    3d88:	0f be       	out	0x3f, r0	; 63
    3d8a:	cd bf       	out	0x3d, r28	; 61
    3d8c:	09 94       	ijmp

00003d8e <__epilogue_restores__>:
    3d8e:	2a 88       	ldd	r2, Y+18	; 0x12
    3d90:	39 88       	ldd	r3, Y+17	; 0x11
    3d92:	48 88       	ldd	r4, Y+16	; 0x10
    3d94:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d96:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d98:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3da0:	b9 84       	ldd	r11, Y+9	; 0x09
    3da2:	c8 84       	ldd	r12, Y+8	; 0x08
    3da4:	df 80       	ldd	r13, Y+7	; 0x07
    3da6:	ee 80       	ldd	r14, Y+6	; 0x06
    3da8:	fd 80       	ldd	r15, Y+5	; 0x05
    3daa:	0c 81       	ldd	r16, Y+4	; 0x04
    3dac:	1b 81       	ldd	r17, Y+3	; 0x03
    3dae:	aa 81       	ldd	r26, Y+2	; 0x02
    3db0:	b9 81       	ldd	r27, Y+1	; 0x01
    3db2:	ce 0f       	add	r28, r30
    3db4:	d1 1d       	adc	r29, r1
    3db6:	0f b6       	in	r0, 0x3f	; 63
    3db8:	f8 94       	cli
    3dba:	de bf       	out	0x3e, r29	; 62
    3dbc:	0f be       	out	0x3f, r0	; 63
    3dbe:	cd bf       	out	0x3d, r28	; 61
    3dc0:	ed 01       	movw	r28, r26
    3dc2:	08 95       	ret

00003dc4 <_exit>:
    3dc4:	f8 94       	cli

00003dc6 <__stop_program>:
    3dc6:	ff cf       	rjmp	.-2      	; 0x3dc6 <__stop_program>
